                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module Lab2
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _Set_outputs
                                     13 	.globl _putchar
                                     14 	.globl _printf
                                     15 	.globl _getchar_nw
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _LED3
                                     20 	.globl _LED2
                                     21 	.globl _LED1
                                     22 	.globl _BILED2
                                     23 	.globl _LED0
                                     24 	.globl _BILED1
                                     25 	.globl _Buzzer
                                     26 	.globl _PB3
                                     27 	.globl _PB1
                                     28 	.globl _PB2
                                     29 	.globl _PB0
                                     30 	.globl _SS
                                     31 	.globl _SS2
                                     32 	.globl _SPIF
                                     33 	.globl _WCOL
                                     34 	.globl _MODF
                                     35 	.globl _RXOVRN
                                     36 	.globl _TXBSY
                                     37 	.globl _SLVSEL
                                     38 	.globl _MSTEN
                                     39 	.globl _SPIEN
                                     40 	.globl _AD0EN
                                     41 	.globl _ADCEN
                                     42 	.globl _AD0TM
                                     43 	.globl _ADCTM
                                     44 	.globl _AD0INT
                                     45 	.globl _ADCINT
                                     46 	.globl _AD0BUSY
                                     47 	.globl _ADBUSY
                                     48 	.globl _AD0CM1
                                     49 	.globl _ADSTM1
                                     50 	.globl _AD0CM0
                                     51 	.globl _ADSTM0
                                     52 	.globl _AD0WINT
                                     53 	.globl _ADWINT
                                     54 	.globl _AD0LJST
                                     55 	.globl _ADLJST
                                     56 	.globl _CF
                                     57 	.globl _CR
                                     58 	.globl _CCF4
                                     59 	.globl _CCF3
                                     60 	.globl _CCF2
                                     61 	.globl _CCF1
                                     62 	.globl _CCF0
                                     63 	.globl _CY
                                     64 	.globl _AC
                                     65 	.globl _F0
                                     66 	.globl _RS1
                                     67 	.globl _RS0
                                     68 	.globl _OV
                                     69 	.globl _F1
                                     70 	.globl _P
                                     71 	.globl _TF2
                                     72 	.globl _EXF2
                                     73 	.globl _RCLK
                                     74 	.globl _TCLK
                                     75 	.globl _EXEN2
                                     76 	.globl _TR2
                                     77 	.globl _CT2
                                     78 	.globl _CPRL2
                                     79 	.globl _BUSY
                                     80 	.globl _ENSMB
                                     81 	.globl _STA
                                     82 	.globl _STO
                                     83 	.globl _SI
                                     84 	.globl _AA
                                     85 	.globl _SMBFTE
                                     86 	.globl _SMBTOE
                                     87 	.globl _PT2
                                     88 	.globl _PS
                                     89 	.globl _PS0
                                     90 	.globl _PT1
                                     91 	.globl _PX1
                                     92 	.globl _PT0
                                     93 	.globl _PX0
                                     94 	.globl _P3_7
                                     95 	.globl _P3_6
                                     96 	.globl _P3_5
                                     97 	.globl _P3_4
                                     98 	.globl _P3_3
                                     99 	.globl _P3_2
                                    100 	.globl _P3_1
                                    101 	.globl _P3_0
                                    102 	.globl _EA
                                    103 	.globl _ET2
                                    104 	.globl _ES
                                    105 	.globl _ES0
                                    106 	.globl _ET1
                                    107 	.globl _EX1
                                    108 	.globl _ET0
                                    109 	.globl _EX0
                                    110 	.globl _P2_7
                                    111 	.globl _P2_6
                                    112 	.globl _P2_5
                                    113 	.globl _P2_4
                                    114 	.globl _P2_3
                                    115 	.globl _P2_2
                                    116 	.globl _P2_1
                                    117 	.globl _P2_0
                                    118 	.globl _S0MODE
                                    119 	.globl _SM00
                                    120 	.globl _SM0
                                    121 	.globl _SM10
                                    122 	.globl _SM1
                                    123 	.globl _MCE0
                                    124 	.globl _SM20
                                    125 	.globl _SM2
                                    126 	.globl _REN0
                                    127 	.globl _REN
                                    128 	.globl _TB80
                                    129 	.globl _TB8
                                    130 	.globl _RB80
                                    131 	.globl _RB8
                                    132 	.globl _TI0
                                    133 	.globl _TI
                                    134 	.globl _RI0
                                    135 	.globl _RI
                                    136 	.globl _P1_7
                                    137 	.globl _P1_6
                                    138 	.globl _P1_5
                                    139 	.globl _P1_4
                                    140 	.globl _P1_3
                                    141 	.globl _P1_2
                                    142 	.globl _P1_1
                                    143 	.globl _P1_0
                                    144 	.globl _TF1
                                    145 	.globl _TR1
                                    146 	.globl _TF0
                                    147 	.globl _TR0
                                    148 	.globl _IE1
                                    149 	.globl _IT1
                                    150 	.globl _IE0
                                    151 	.globl _IT0
                                    152 	.globl _P0_7
                                    153 	.globl _P0_6
                                    154 	.globl _P0_5
                                    155 	.globl _P0_4
                                    156 	.globl _P0_3
                                    157 	.globl _P0_2
                                    158 	.globl _P0_1
                                    159 	.globl _P0_0
                                    160 	.globl _PCA0CP4
                                    161 	.globl _PCA0CP3
                                    162 	.globl _PCA0CP2
                                    163 	.globl _PCA0CP1
                                    164 	.globl _PCA0CP0
                                    165 	.globl _PCA0
                                    166 	.globl _DAC1
                                    167 	.globl _DAC0
                                    168 	.globl _ADC0LT
                                    169 	.globl _ADC0GT
                                    170 	.globl _ADC0
                                    171 	.globl _RCAP4
                                    172 	.globl _TMR4
                                    173 	.globl _TMR3RL
                                    174 	.globl _TMR3
                                    175 	.globl _RCAP2
                                    176 	.globl _TMR2
                                    177 	.globl _TMR1
                                    178 	.globl _TMR0
                                    179 	.globl _WDTCN
                                    180 	.globl _PCA0CPH4
                                    181 	.globl _PCA0CPH3
                                    182 	.globl _PCA0CPH2
                                    183 	.globl _PCA0CPH1
                                    184 	.globl _PCA0CPH0
                                    185 	.globl _PCA0H
                                    186 	.globl _SPI0CN
                                    187 	.globl _EIP2
                                    188 	.globl _EIP1
                                    189 	.globl _TH4
                                    190 	.globl _TL4
                                    191 	.globl _SADDR1
                                    192 	.globl _SBUF1
                                    193 	.globl _SCON1
                                    194 	.globl _B
                                    195 	.globl _RSTSRC
                                    196 	.globl _PCA0CPL4
                                    197 	.globl _PCA0CPL3
                                    198 	.globl _PCA0CPL2
                                    199 	.globl _PCA0CPL1
                                    200 	.globl _PCA0CPL0
                                    201 	.globl _PCA0L
                                    202 	.globl _ADC0CN
                                    203 	.globl _EIE2
                                    204 	.globl _EIE1
                                    205 	.globl _RCAP4H
                                    206 	.globl _RCAP4L
                                    207 	.globl _XBR2
                                    208 	.globl _XBR1
                                    209 	.globl _XBR0
                                    210 	.globl _ACC
                                    211 	.globl _PCA0CPM4
                                    212 	.globl _PCA0CPM3
                                    213 	.globl _PCA0CPM2
                                    214 	.globl _PCA0CPM1
                                    215 	.globl _PCA0CPM0
                                    216 	.globl _PCA0MD
                                    217 	.globl _PCA0CN
                                    218 	.globl _DAC1CN
                                    219 	.globl _DAC1H
                                    220 	.globl _DAC1L
                                    221 	.globl _DAC0CN
                                    222 	.globl _DAC0H
                                    223 	.globl _DAC0L
                                    224 	.globl _REF0CN
                                    225 	.globl _PSW
                                    226 	.globl _SMB0CR
                                    227 	.globl _TH2
                                    228 	.globl _TL2
                                    229 	.globl _RCAP2H
                                    230 	.globl _RCAP2L
                                    231 	.globl _T4CON
                                    232 	.globl _T2CON
                                    233 	.globl _ADC0LTH
                                    234 	.globl _ADC0LTL
                                    235 	.globl _ADC0GTH
                                    236 	.globl _ADC0GTL
                                    237 	.globl _SMB0ADR
                                    238 	.globl _SMB0DAT
                                    239 	.globl _SMB0STA
                                    240 	.globl _SMB0CN
                                    241 	.globl _ADC0H
                                    242 	.globl _ADC0L
                                    243 	.globl _P1MDIN
                                    244 	.globl _ADC0CF
                                    245 	.globl _AMX0SL
                                    246 	.globl _AMX0CF
                                    247 	.globl _SADEN0
                                    248 	.globl _IP
                                    249 	.globl _FLACL
                                    250 	.globl _FLSCL
                                    251 	.globl _P74OUT
                                    252 	.globl _OSCICN
                                    253 	.globl _OSCXCN
                                    254 	.globl _P3
                                    255 	.globl __XPAGE
                                    256 	.globl _EMI0CN
                                    257 	.globl _SADEN1
                                    258 	.globl _P3IF
                                    259 	.globl _AMX1SL
                                    260 	.globl _ADC1CF
                                    261 	.globl _ADC1CN
                                    262 	.globl _SADDR0
                                    263 	.globl _IE
                                    264 	.globl _P3MDOUT
                                    265 	.globl _PRT3CF
                                    266 	.globl _P2MDOUT
                                    267 	.globl _PRT2CF
                                    268 	.globl _P1MDOUT
                                    269 	.globl _PRT1CF
                                    270 	.globl _P0MDOUT
                                    271 	.globl _PRT0CF
                                    272 	.globl _EMI0CF
                                    273 	.globl _EMI0TC
                                    274 	.globl _P2
                                    275 	.globl _CPT1CN
                                    276 	.globl _CPT0CN
                                    277 	.globl _SPI0CKR
                                    278 	.globl _ADC1
                                    279 	.globl _SPI0DAT
                                    280 	.globl _SPI0CFG
                                    281 	.globl _SBUF0
                                    282 	.globl _SBUF
                                    283 	.globl _SCON0
                                    284 	.globl _SCON
                                    285 	.globl _P7
                                    286 	.globl _TMR3H
                                    287 	.globl _TMR3L
                                    288 	.globl _TMR3RLH
                                    289 	.globl _TMR3RLL
                                    290 	.globl _TMR3CN
                                    291 	.globl _P1
                                    292 	.globl _PSCTL
                                    293 	.globl _CKCON
                                    294 	.globl _TH1
                                    295 	.globl _TH0
                                    296 	.globl _TL1
                                    297 	.globl _TL0
                                    298 	.globl _TMOD
                                    299 	.globl _TCON
                                    300 	.globl _PCON
                                    301 	.globl _P6
                                    302 	.globl _P5
                                    303 	.globl _P4
                                    304 	.globl _DPH
                                    305 	.globl _DPL
                                    306 	.globl _SP
                                    307 	.globl _P0
                                    308 	.globl _debounceCount
                                    309 	.globl _Counts
                                    310 	.globl _Port_Init
                                    311 	.globl _Interrupt_Init
                                    312 	.globl _Timer_Init
                                    313 	.globl _Timer0_ISR
                                    314 	.globl _ADC_Init
                                    315 	.globl _read_AD_input
                                    316 	.globl _Debounce
                                    317 	.globl _random
                                    318 	.globl _mode3
                                    319 ;--------------------------------------------------------
                                    320 ; special function registers
                                    321 ;--------------------------------------------------------
                                    322 	.area RSEG    (ABS,DATA)
      000000                        323 	.org 0x0000
                           000080   324 G$P0$0$0 == 0x0080
                           000080   325 _P0	=	0x0080
                           000081   326 G$SP$0$0 == 0x0081
                           000081   327 _SP	=	0x0081
                           000082   328 G$DPL$0$0 == 0x0082
                           000082   329 _DPL	=	0x0082
                           000083   330 G$DPH$0$0 == 0x0083
                           000083   331 _DPH	=	0x0083
                           000084   332 G$P4$0$0 == 0x0084
                           000084   333 _P4	=	0x0084
                           000085   334 G$P5$0$0 == 0x0085
                           000085   335 _P5	=	0x0085
                           000086   336 G$P6$0$0 == 0x0086
                           000086   337 _P6	=	0x0086
                           000087   338 G$PCON$0$0 == 0x0087
                           000087   339 _PCON	=	0x0087
                           000088   340 G$TCON$0$0 == 0x0088
                           000088   341 _TCON	=	0x0088
                           000089   342 G$TMOD$0$0 == 0x0089
                           000089   343 _TMOD	=	0x0089
                           00008A   344 G$TL0$0$0 == 0x008a
                           00008A   345 _TL0	=	0x008a
                           00008B   346 G$TL1$0$0 == 0x008b
                           00008B   347 _TL1	=	0x008b
                           00008C   348 G$TH0$0$0 == 0x008c
                           00008C   349 _TH0	=	0x008c
                           00008D   350 G$TH1$0$0 == 0x008d
                           00008D   351 _TH1	=	0x008d
                           00008E   352 G$CKCON$0$0 == 0x008e
                           00008E   353 _CKCON	=	0x008e
                           00008F   354 G$PSCTL$0$0 == 0x008f
                           00008F   355 _PSCTL	=	0x008f
                           000090   356 G$P1$0$0 == 0x0090
                           000090   357 _P1	=	0x0090
                           000091   358 G$TMR3CN$0$0 == 0x0091
                           000091   359 _TMR3CN	=	0x0091
                           000092   360 G$TMR3RLL$0$0 == 0x0092
                           000092   361 _TMR3RLL	=	0x0092
                           000093   362 G$TMR3RLH$0$0 == 0x0093
                           000093   363 _TMR3RLH	=	0x0093
                           000094   364 G$TMR3L$0$0 == 0x0094
                           000094   365 _TMR3L	=	0x0094
                           000095   366 G$TMR3H$0$0 == 0x0095
                           000095   367 _TMR3H	=	0x0095
                           000096   368 G$P7$0$0 == 0x0096
                           000096   369 _P7	=	0x0096
                           000098   370 G$SCON$0$0 == 0x0098
                           000098   371 _SCON	=	0x0098
                           000098   372 G$SCON0$0$0 == 0x0098
                           000098   373 _SCON0	=	0x0098
                           000099   374 G$SBUF$0$0 == 0x0099
                           000099   375 _SBUF	=	0x0099
                           000099   376 G$SBUF0$0$0 == 0x0099
                           000099   377 _SBUF0	=	0x0099
                           00009A   378 G$SPI0CFG$0$0 == 0x009a
                           00009A   379 _SPI0CFG	=	0x009a
                           00009B   380 G$SPI0DAT$0$0 == 0x009b
                           00009B   381 _SPI0DAT	=	0x009b
                           00009C   382 G$ADC1$0$0 == 0x009c
                           00009C   383 _ADC1	=	0x009c
                           00009D   384 G$SPI0CKR$0$0 == 0x009d
                           00009D   385 _SPI0CKR	=	0x009d
                           00009E   386 G$CPT0CN$0$0 == 0x009e
                           00009E   387 _CPT0CN	=	0x009e
                           00009F   388 G$CPT1CN$0$0 == 0x009f
                           00009F   389 _CPT1CN	=	0x009f
                           0000A0   390 G$P2$0$0 == 0x00a0
                           0000A0   391 _P2	=	0x00a0
                           0000A1   392 G$EMI0TC$0$0 == 0x00a1
                           0000A1   393 _EMI0TC	=	0x00a1
                           0000A3   394 G$EMI0CF$0$0 == 0x00a3
                           0000A3   395 _EMI0CF	=	0x00a3
                           0000A4   396 G$PRT0CF$0$0 == 0x00a4
                           0000A4   397 _PRT0CF	=	0x00a4
                           0000A4   398 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   399 _P0MDOUT	=	0x00a4
                           0000A5   400 G$PRT1CF$0$0 == 0x00a5
                           0000A5   401 _PRT1CF	=	0x00a5
                           0000A5   402 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   403 _P1MDOUT	=	0x00a5
                           0000A6   404 G$PRT2CF$0$0 == 0x00a6
                           0000A6   405 _PRT2CF	=	0x00a6
                           0000A6   406 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   407 _P2MDOUT	=	0x00a6
                           0000A7   408 G$PRT3CF$0$0 == 0x00a7
                           0000A7   409 _PRT3CF	=	0x00a7
                           0000A7   410 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   411 _P3MDOUT	=	0x00a7
                           0000A8   412 G$IE$0$0 == 0x00a8
                           0000A8   413 _IE	=	0x00a8
                           0000A9   414 G$SADDR0$0$0 == 0x00a9
                           0000A9   415 _SADDR0	=	0x00a9
                           0000AA   416 G$ADC1CN$0$0 == 0x00aa
                           0000AA   417 _ADC1CN	=	0x00aa
                           0000AB   418 G$ADC1CF$0$0 == 0x00ab
                           0000AB   419 _ADC1CF	=	0x00ab
                           0000AC   420 G$AMX1SL$0$0 == 0x00ac
                           0000AC   421 _AMX1SL	=	0x00ac
                           0000AD   422 G$P3IF$0$0 == 0x00ad
                           0000AD   423 _P3IF	=	0x00ad
                           0000AE   424 G$SADEN1$0$0 == 0x00ae
                           0000AE   425 _SADEN1	=	0x00ae
                           0000AF   426 G$EMI0CN$0$0 == 0x00af
                           0000AF   427 _EMI0CN	=	0x00af
                           0000AF   428 G$_XPAGE$0$0 == 0x00af
                           0000AF   429 __XPAGE	=	0x00af
                           0000B0   430 G$P3$0$0 == 0x00b0
                           0000B0   431 _P3	=	0x00b0
                           0000B1   432 G$OSCXCN$0$0 == 0x00b1
                           0000B1   433 _OSCXCN	=	0x00b1
                           0000B2   434 G$OSCICN$0$0 == 0x00b2
                           0000B2   435 _OSCICN	=	0x00b2
                           0000B5   436 G$P74OUT$0$0 == 0x00b5
                           0000B5   437 _P74OUT	=	0x00b5
                           0000B6   438 G$FLSCL$0$0 == 0x00b6
                           0000B6   439 _FLSCL	=	0x00b6
                           0000B7   440 G$FLACL$0$0 == 0x00b7
                           0000B7   441 _FLACL	=	0x00b7
                           0000B8   442 G$IP$0$0 == 0x00b8
                           0000B8   443 _IP	=	0x00b8
                           0000B9   444 G$SADEN0$0$0 == 0x00b9
                           0000B9   445 _SADEN0	=	0x00b9
                           0000BA   446 G$AMX0CF$0$0 == 0x00ba
                           0000BA   447 _AMX0CF	=	0x00ba
                           0000BB   448 G$AMX0SL$0$0 == 0x00bb
                           0000BB   449 _AMX0SL	=	0x00bb
                           0000BC   450 G$ADC0CF$0$0 == 0x00bc
                           0000BC   451 _ADC0CF	=	0x00bc
                           0000BD   452 G$P1MDIN$0$0 == 0x00bd
                           0000BD   453 _P1MDIN	=	0x00bd
                           0000BE   454 G$ADC0L$0$0 == 0x00be
                           0000BE   455 _ADC0L	=	0x00be
                           0000BF   456 G$ADC0H$0$0 == 0x00bf
                           0000BF   457 _ADC0H	=	0x00bf
                           0000C0   458 G$SMB0CN$0$0 == 0x00c0
                           0000C0   459 _SMB0CN	=	0x00c0
                           0000C1   460 G$SMB0STA$0$0 == 0x00c1
                           0000C1   461 _SMB0STA	=	0x00c1
                           0000C2   462 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   463 _SMB0DAT	=	0x00c2
                           0000C3   464 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   465 _SMB0ADR	=	0x00c3
                           0000C4   466 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   467 _ADC0GTL	=	0x00c4
                           0000C5   468 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   469 _ADC0GTH	=	0x00c5
                           0000C6   470 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   471 _ADC0LTL	=	0x00c6
                           0000C7   472 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   473 _ADC0LTH	=	0x00c7
                           0000C8   474 G$T2CON$0$0 == 0x00c8
                           0000C8   475 _T2CON	=	0x00c8
                           0000C9   476 G$T4CON$0$0 == 0x00c9
                           0000C9   477 _T4CON	=	0x00c9
                           0000CA   478 G$RCAP2L$0$0 == 0x00ca
                           0000CA   479 _RCAP2L	=	0x00ca
                           0000CB   480 G$RCAP2H$0$0 == 0x00cb
                           0000CB   481 _RCAP2H	=	0x00cb
                           0000CC   482 G$TL2$0$0 == 0x00cc
                           0000CC   483 _TL2	=	0x00cc
                           0000CD   484 G$TH2$0$0 == 0x00cd
                           0000CD   485 _TH2	=	0x00cd
                           0000CF   486 G$SMB0CR$0$0 == 0x00cf
                           0000CF   487 _SMB0CR	=	0x00cf
                           0000D0   488 G$PSW$0$0 == 0x00d0
                           0000D0   489 _PSW	=	0x00d0
                           0000D1   490 G$REF0CN$0$0 == 0x00d1
                           0000D1   491 _REF0CN	=	0x00d1
                           0000D2   492 G$DAC0L$0$0 == 0x00d2
                           0000D2   493 _DAC0L	=	0x00d2
                           0000D3   494 G$DAC0H$0$0 == 0x00d3
                           0000D3   495 _DAC0H	=	0x00d3
                           0000D4   496 G$DAC0CN$0$0 == 0x00d4
                           0000D4   497 _DAC0CN	=	0x00d4
                           0000D5   498 G$DAC1L$0$0 == 0x00d5
                           0000D5   499 _DAC1L	=	0x00d5
                           0000D6   500 G$DAC1H$0$0 == 0x00d6
                           0000D6   501 _DAC1H	=	0x00d6
                           0000D7   502 G$DAC1CN$0$0 == 0x00d7
                           0000D7   503 _DAC1CN	=	0x00d7
                           0000D8   504 G$PCA0CN$0$0 == 0x00d8
                           0000D8   505 _PCA0CN	=	0x00d8
                           0000D9   506 G$PCA0MD$0$0 == 0x00d9
                           0000D9   507 _PCA0MD	=	0x00d9
                           0000DA   508 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   509 _PCA0CPM0	=	0x00da
                           0000DB   510 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   511 _PCA0CPM1	=	0x00db
                           0000DC   512 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   513 _PCA0CPM2	=	0x00dc
                           0000DD   514 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   515 _PCA0CPM3	=	0x00dd
                           0000DE   516 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   517 _PCA0CPM4	=	0x00de
                           0000E0   518 G$ACC$0$0 == 0x00e0
                           0000E0   519 _ACC	=	0x00e0
                           0000E1   520 G$XBR0$0$0 == 0x00e1
                           0000E1   521 _XBR0	=	0x00e1
                           0000E2   522 G$XBR1$0$0 == 0x00e2
                           0000E2   523 _XBR1	=	0x00e2
                           0000E3   524 G$XBR2$0$0 == 0x00e3
                           0000E3   525 _XBR2	=	0x00e3
                           0000E4   526 G$RCAP4L$0$0 == 0x00e4
                           0000E4   527 _RCAP4L	=	0x00e4
                           0000E5   528 G$RCAP4H$0$0 == 0x00e5
                           0000E5   529 _RCAP4H	=	0x00e5
                           0000E6   530 G$EIE1$0$0 == 0x00e6
                           0000E6   531 _EIE1	=	0x00e6
                           0000E7   532 G$EIE2$0$0 == 0x00e7
                           0000E7   533 _EIE2	=	0x00e7
                           0000E8   534 G$ADC0CN$0$0 == 0x00e8
                           0000E8   535 _ADC0CN	=	0x00e8
                           0000E9   536 G$PCA0L$0$0 == 0x00e9
                           0000E9   537 _PCA0L	=	0x00e9
                           0000EA   538 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   539 _PCA0CPL0	=	0x00ea
                           0000EB   540 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   541 _PCA0CPL1	=	0x00eb
                           0000EC   542 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   543 _PCA0CPL2	=	0x00ec
                           0000ED   544 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   545 _PCA0CPL3	=	0x00ed
                           0000EE   546 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   547 _PCA0CPL4	=	0x00ee
                           0000EF   548 G$RSTSRC$0$0 == 0x00ef
                           0000EF   549 _RSTSRC	=	0x00ef
                           0000F0   550 G$B$0$0 == 0x00f0
                           0000F0   551 _B	=	0x00f0
                           0000F1   552 G$SCON1$0$0 == 0x00f1
                           0000F1   553 _SCON1	=	0x00f1
                           0000F2   554 G$SBUF1$0$0 == 0x00f2
                           0000F2   555 _SBUF1	=	0x00f2
                           0000F3   556 G$SADDR1$0$0 == 0x00f3
                           0000F3   557 _SADDR1	=	0x00f3
                           0000F4   558 G$TL4$0$0 == 0x00f4
                           0000F4   559 _TL4	=	0x00f4
                           0000F5   560 G$TH4$0$0 == 0x00f5
                           0000F5   561 _TH4	=	0x00f5
                           0000F6   562 G$EIP1$0$0 == 0x00f6
                           0000F6   563 _EIP1	=	0x00f6
                           0000F7   564 G$EIP2$0$0 == 0x00f7
                           0000F7   565 _EIP2	=	0x00f7
                           0000F8   566 G$SPI0CN$0$0 == 0x00f8
                           0000F8   567 _SPI0CN	=	0x00f8
                           0000F9   568 G$PCA0H$0$0 == 0x00f9
                           0000F9   569 _PCA0H	=	0x00f9
                           0000FA   570 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   571 _PCA0CPH0	=	0x00fa
                           0000FB   572 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   573 _PCA0CPH1	=	0x00fb
                           0000FC   574 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   575 _PCA0CPH2	=	0x00fc
                           0000FD   576 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   577 _PCA0CPH3	=	0x00fd
                           0000FE   578 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   579 _PCA0CPH4	=	0x00fe
                           0000FF   580 G$WDTCN$0$0 == 0x00ff
                           0000FF   581 _WDTCN	=	0x00ff
                           008C8A   582 G$TMR0$0$0 == 0x8c8a
                           008C8A   583 _TMR0	=	0x8c8a
                           008D8B   584 G$TMR1$0$0 == 0x8d8b
                           008D8B   585 _TMR1	=	0x8d8b
                           00CDCC   586 G$TMR2$0$0 == 0xcdcc
                           00CDCC   587 _TMR2	=	0xcdcc
                           00CBCA   588 G$RCAP2$0$0 == 0xcbca
                           00CBCA   589 _RCAP2	=	0xcbca
                           009594   590 G$TMR3$0$0 == 0x9594
                           009594   591 _TMR3	=	0x9594
                           009392   592 G$TMR3RL$0$0 == 0x9392
                           009392   593 _TMR3RL	=	0x9392
                           00F5F4   594 G$TMR4$0$0 == 0xf5f4
                           00F5F4   595 _TMR4	=	0xf5f4
                           00E5E4   596 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   597 _RCAP4	=	0xe5e4
                           00BFBE   598 G$ADC0$0$0 == 0xbfbe
                           00BFBE   599 _ADC0	=	0xbfbe
                           00C5C4   600 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   601 _ADC0GT	=	0xc5c4
                           00C7C6   602 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   603 _ADC0LT	=	0xc7c6
                           00D3D2   604 G$DAC0$0$0 == 0xd3d2
                           00D3D2   605 _DAC0	=	0xd3d2
                           00D6D5   606 G$DAC1$0$0 == 0xd6d5
                           00D6D5   607 _DAC1	=	0xd6d5
                           00F9E9   608 G$PCA0$0$0 == 0xf9e9
                           00F9E9   609 _PCA0	=	0xf9e9
                           00FAEA   610 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   611 _PCA0CP0	=	0xfaea
                           00FBEB   612 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   613 _PCA0CP1	=	0xfbeb
                           00FCEC   614 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   615 _PCA0CP2	=	0xfcec
                           00FDED   616 G$PCA0CP3$0$0 == 0xfded
                           00FDED   617 _PCA0CP3	=	0xfded
                           00FEEE   618 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   619 _PCA0CP4	=	0xfeee
                                    620 ;--------------------------------------------------------
                                    621 ; special function bits
                                    622 ;--------------------------------------------------------
                                    623 	.area RSEG    (ABS,DATA)
      000000                        624 	.org 0x0000
                           000080   625 G$P0_0$0$0 == 0x0080
                           000080   626 _P0_0	=	0x0080
                           000081   627 G$P0_1$0$0 == 0x0081
                           000081   628 _P0_1	=	0x0081
                           000082   629 G$P0_2$0$0 == 0x0082
                           000082   630 _P0_2	=	0x0082
                           000083   631 G$P0_3$0$0 == 0x0083
                           000083   632 _P0_3	=	0x0083
                           000084   633 G$P0_4$0$0 == 0x0084
                           000084   634 _P0_4	=	0x0084
                           000085   635 G$P0_5$0$0 == 0x0085
                           000085   636 _P0_5	=	0x0085
                           000086   637 G$P0_6$0$0 == 0x0086
                           000086   638 _P0_6	=	0x0086
                           000087   639 G$P0_7$0$0 == 0x0087
                           000087   640 _P0_7	=	0x0087
                           000088   641 G$IT0$0$0 == 0x0088
                           000088   642 _IT0	=	0x0088
                           000089   643 G$IE0$0$0 == 0x0089
                           000089   644 _IE0	=	0x0089
                           00008A   645 G$IT1$0$0 == 0x008a
                           00008A   646 _IT1	=	0x008a
                           00008B   647 G$IE1$0$0 == 0x008b
                           00008B   648 _IE1	=	0x008b
                           00008C   649 G$TR0$0$0 == 0x008c
                           00008C   650 _TR0	=	0x008c
                           00008D   651 G$TF0$0$0 == 0x008d
                           00008D   652 _TF0	=	0x008d
                           00008E   653 G$TR1$0$0 == 0x008e
                           00008E   654 _TR1	=	0x008e
                           00008F   655 G$TF1$0$0 == 0x008f
                           00008F   656 _TF1	=	0x008f
                           000090   657 G$P1_0$0$0 == 0x0090
                           000090   658 _P1_0	=	0x0090
                           000091   659 G$P1_1$0$0 == 0x0091
                           000091   660 _P1_1	=	0x0091
                           000092   661 G$P1_2$0$0 == 0x0092
                           000092   662 _P1_2	=	0x0092
                           000093   663 G$P1_3$0$0 == 0x0093
                           000093   664 _P1_3	=	0x0093
                           000094   665 G$P1_4$0$0 == 0x0094
                           000094   666 _P1_4	=	0x0094
                           000095   667 G$P1_5$0$0 == 0x0095
                           000095   668 _P1_5	=	0x0095
                           000096   669 G$P1_6$0$0 == 0x0096
                           000096   670 _P1_6	=	0x0096
                           000097   671 G$P1_7$0$0 == 0x0097
                           000097   672 _P1_7	=	0x0097
                           000098   673 G$RI$0$0 == 0x0098
                           000098   674 _RI	=	0x0098
                           000098   675 G$RI0$0$0 == 0x0098
                           000098   676 _RI0	=	0x0098
                           000099   677 G$TI$0$0 == 0x0099
                           000099   678 _TI	=	0x0099
                           000099   679 G$TI0$0$0 == 0x0099
                           000099   680 _TI0	=	0x0099
                           00009A   681 G$RB8$0$0 == 0x009a
                           00009A   682 _RB8	=	0x009a
                           00009A   683 G$RB80$0$0 == 0x009a
                           00009A   684 _RB80	=	0x009a
                           00009B   685 G$TB8$0$0 == 0x009b
                           00009B   686 _TB8	=	0x009b
                           00009B   687 G$TB80$0$0 == 0x009b
                           00009B   688 _TB80	=	0x009b
                           00009C   689 G$REN$0$0 == 0x009c
                           00009C   690 _REN	=	0x009c
                           00009C   691 G$REN0$0$0 == 0x009c
                           00009C   692 _REN0	=	0x009c
                           00009D   693 G$SM2$0$0 == 0x009d
                           00009D   694 _SM2	=	0x009d
                           00009D   695 G$SM20$0$0 == 0x009d
                           00009D   696 _SM20	=	0x009d
                           00009D   697 G$MCE0$0$0 == 0x009d
                           00009D   698 _MCE0	=	0x009d
                           00009E   699 G$SM1$0$0 == 0x009e
                           00009E   700 _SM1	=	0x009e
                           00009E   701 G$SM10$0$0 == 0x009e
                           00009E   702 _SM10	=	0x009e
                           00009F   703 G$SM0$0$0 == 0x009f
                           00009F   704 _SM0	=	0x009f
                           00009F   705 G$SM00$0$0 == 0x009f
                           00009F   706 _SM00	=	0x009f
                           00009F   707 G$S0MODE$0$0 == 0x009f
                           00009F   708 _S0MODE	=	0x009f
                           0000A0   709 G$P2_0$0$0 == 0x00a0
                           0000A0   710 _P2_0	=	0x00a0
                           0000A1   711 G$P2_1$0$0 == 0x00a1
                           0000A1   712 _P2_1	=	0x00a1
                           0000A2   713 G$P2_2$0$0 == 0x00a2
                           0000A2   714 _P2_2	=	0x00a2
                           0000A3   715 G$P2_3$0$0 == 0x00a3
                           0000A3   716 _P2_3	=	0x00a3
                           0000A4   717 G$P2_4$0$0 == 0x00a4
                           0000A4   718 _P2_4	=	0x00a4
                           0000A5   719 G$P2_5$0$0 == 0x00a5
                           0000A5   720 _P2_5	=	0x00a5
                           0000A6   721 G$P2_6$0$0 == 0x00a6
                           0000A6   722 _P2_6	=	0x00a6
                           0000A7   723 G$P2_7$0$0 == 0x00a7
                           0000A7   724 _P2_7	=	0x00a7
                           0000A8   725 G$EX0$0$0 == 0x00a8
                           0000A8   726 _EX0	=	0x00a8
                           0000A9   727 G$ET0$0$0 == 0x00a9
                           0000A9   728 _ET0	=	0x00a9
                           0000AA   729 G$EX1$0$0 == 0x00aa
                           0000AA   730 _EX1	=	0x00aa
                           0000AB   731 G$ET1$0$0 == 0x00ab
                           0000AB   732 _ET1	=	0x00ab
                           0000AC   733 G$ES0$0$0 == 0x00ac
                           0000AC   734 _ES0	=	0x00ac
                           0000AC   735 G$ES$0$0 == 0x00ac
                           0000AC   736 _ES	=	0x00ac
                           0000AD   737 G$ET2$0$0 == 0x00ad
                           0000AD   738 _ET2	=	0x00ad
                           0000AF   739 G$EA$0$0 == 0x00af
                           0000AF   740 _EA	=	0x00af
                           0000B0   741 G$P3_0$0$0 == 0x00b0
                           0000B0   742 _P3_0	=	0x00b0
                           0000B1   743 G$P3_1$0$0 == 0x00b1
                           0000B1   744 _P3_1	=	0x00b1
                           0000B2   745 G$P3_2$0$0 == 0x00b2
                           0000B2   746 _P3_2	=	0x00b2
                           0000B3   747 G$P3_3$0$0 == 0x00b3
                           0000B3   748 _P3_3	=	0x00b3
                           0000B4   749 G$P3_4$0$0 == 0x00b4
                           0000B4   750 _P3_4	=	0x00b4
                           0000B5   751 G$P3_5$0$0 == 0x00b5
                           0000B5   752 _P3_5	=	0x00b5
                           0000B6   753 G$P3_6$0$0 == 0x00b6
                           0000B6   754 _P3_6	=	0x00b6
                           0000B7   755 G$P3_7$0$0 == 0x00b7
                           0000B7   756 _P3_7	=	0x00b7
                           0000B8   757 G$PX0$0$0 == 0x00b8
                           0000B8   758 _PX0	=	0x00b8
                           0000B9   759 G$PT0$0$0 == 0x00b9
                           0000B9   760 _PT0	=	0x00b9
                           0000BA   761 G$PX1$0$0 == 0x00ba
                           0000BA   762 _PX1	=	0x00ba
                           0000BB   763 G$PT1$0$0 == 0x00bb
                           0000BB   764 _PT1	=	0x00bb
                           0000BC   765 G$PS0$0$0 == 0x00bc
                           0000BC   766 _PS0	=	0x00bc
                           0000BC   767 G$PS$0$0 == 0x00bc
                           0000BC   768 _PS	=	0x00bc
                           0000BD   769 G$PT2$0$0 == 0x00bd
                           0000BD   770 _PT2	=	0x00bd
                           0000C0   771 G$SMBTOE$0$0 == 0x00c0
                           0000C0   772 _SMBTOE	=	0x00c0
                           0000C1   773 G$SMBFTE$0$0 == 0x00c1
                           0000C1   774 _SMBFTE	=	0x00c1
                           0000C2   775 G$AA$0$0 == 0x00c2
                           0000C2   776 _AA	=	0x00c2
                           0000C3   777 G$SI$0$0 == 0x00c3
                           0000C3   778 _SI	=	0x00c3
                           0000C4   779 G$STO$0$0 == 0x00c4
                           0000C4   780 _STO	=	0x00c4
                           0000C5   781 G$STA$0$0 == 0x00c5
                           0000C5   782 _STA	=	0x00c5
                           0000C6   783 G$ENSMB$0$0 == 0x00c6
                           0000C6   784 _ENSMB	=	0x00c6
                           0000C7   785 G$BUSY$0$0 == 0x00c7
                           0000C7   786 _BUSY	=	0x00c7
                           0000C8   787 G$CPRL2$0$0 == 0x00c8
                           0000C8   788 _CPRL2	=	0x00c8
                           0000C9   789 G$CT2$0$0 == 0x00c9
                           0000C9   790 _CT2	=	0x00c9
                           0000CA   791 G$TR2$0$0 == 0x00ca
                           0000CA   792 _TR2	=	0x00ca
                           0000CB   793 G$EXEN2$0$0 == 0x00cb
                           0000CB   794 _EXEN2	=	0x00cb
                           0000CC   795 G$TCLK$0$0 == 0x00cc
                           0000CC   796 _TCLK	=	0x00cc
                           0000CD   797 G$RCLK$0$0 == 0x00cd
                           0000CD   798 _RCLK	=	0x00cd
                           0000CE   799 G$EXF2$0$0 == 0x00ce
                           0000CE   800 _EXF2	=	0x00ce
                           0000CF   801 G$TF2$0$0 == 0x00cf
                           0000CF   802 _TF2	=	0x00cf
                           0000D0   803 G$P$0$0 == 0x00d0
                           0000D0   804 _P	=	0x00d0
                           0000D1   805 G$F1$0$0 == 0x00d1
                           0000D1   806 _F1	=	0x00d1
                           0000D2   807 G$OV$0$0 == 0x00d2
                           0000D2   808 _OV	=	0x00d2
                           0000D3   809 G$RS0$0$0 == 0x00d3
                           0000D3   810 _RS0	=	0x00d3
                           0000D4   811 G$RS1$0$0 == 0x00d4
                           0000D4   812 _RS1	=	0x00d4
                           0000D5   813 G$F0$0$0 == 0x00d5
                           0000D5   814 _F0	=	0x00d5
                           0000D6   815 G$AC$0$0 == 0x00d6
                           0000D6   816 _AC	=	0x00d6
                           0000D7   817 G$CY$0$0 == 0x00d7
                           0000D7   818 _CY	=	0x00d7
                           0000D8   819 G$CCF0$0$0 == 0x00d8
                           0000D8   820 _CCF0	=	0x00d8
                           0000D9   821 G$CCF1$0$0 == 0x00d9
                           0000D9   822 _CCF1	=	0x00d9
                           0000DA   823 G$CCF2$0$0 == 0x00da
                           0000DA   824 _CCF2	=	0x00da
                           0000DB   825 G$CCF3$0$0 == 0x00db
                           0000DB   826 _CCF3	=	0x00db
                           0000DC   827 G$CCF4$0$0 == 0x00dc
                           0000DC   828 _CCF4	=	0x00dc
                           0000DE   829 G$CR$0$0 == 0x00de
                           0000DE   830 _CR	=	0x00de
                           0000DF   831 G$CF$0$0 == 0x00df
                           0000DF   832 _CF	=	0x00df
                           0000E8   833 G$ADLJST$0$0 == 0x00e8
                           0000E8   834 _ADLJST	=	0x00e8
                           0000E8   835 G$AD0LJST$0$0 == 0x00e8
                           0000E8   836 _AD0LJST	=	0x00e8
                           0000E9   837 G$ADWINT$0$0 == 0x00e9
                           0000E9   838 _ADWINT	=	0x00e9
                           0000E9   839 G$AD0WINT$0$0 == 0x00e9
                           0000E9   840 _AD0WINT	=	0x00e9
                           0000EA   841 G$ADSTM0$0$0 == 0x00ea
                           0000EA   842 _ADSTM0	=	0x00ea
                           0000EA   843 G$AD0CM0$0$0 == 0x00ea
                           0000EA   844 _AD0CM0	=	0x00ea
                           0000EB   845 G$ADSTM1$0$0 == 0x00eb
                           0000EB   846 _ADSTM1	=	0x00eb
                           0000EB   847 G$AD0CM1$0$0 == 0x00eb
                           0000EB   848 _AD0CM1	=	0x00eb
                           0000EC   849 G$ADBUSY$0$0 == 0x00ec
                           0000EC   850 _ADBUSY	=	0x00ec
                           0000EC   851 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   852 _AD0BUSY	=	0x00ec
                           0000ED   853 G$ADCINT$0$0 == 0x00ed
                           0000ED   854 _ADCINT	=	0x00ed
                           0000ED   855 G$AD0INT$0$0 == 0x00ed
                           0000ED   856 _AD0INT	=	0x00ed
                           0000EE   857 G$ADCTM$0$0 == 0x00ee
                           0000EE   858 _ADCTM	=	0x00ee
                           0000EE   859 G$AD0TM$0$0 == 0x00ee
                           0000EE   860 _AD0TM	=	0x00ee
                           0000EF   861 G$ADCEN$0$0 == 0x00ef
                           0000EF   862 _ADCEN	=	0x00ef
                           0000EF   863 G$AD0EN$0$0 == 0x00ef
                           0000EF   864 _AD0EN	=	0x00ef
                           0000F8   865 G$SPIEN$0$0 == 0x00f8
                           0000F8   866 _SPIEN	=	0x00f8
                           0000F9   867 G$MSTEN$0$0 == 0x00f9
                           0000F9   868 _MSTEN	=	0x00f9
                           0000FA   869 G$SLVSEL$0$0 == 0x00fa
                           0000FA   870 _SLVSEL	=	0x00fa
                           0000FB   871 G$TXBSY$0$0 == 0x00fb
                           0000FB   872 _TXBSY	=	0x00fb
                           0000FC   873 G$RXOVRN$0$0 == 0x00fc
                           0000FC   874 _RXOVRN	=	0x00fc
                           0000FD   875 G$MODF$0$0 == 0x00fd
                           0000FD   876 _MODF	=	0x00fd
                           0000FE   877 G$WCOL$0$0 == 0x00fe
                           0000FE   878 _WCOL	=	0x00fe
                           0000FF   879 G$SPIF$0$0 == 0x00ff
                           0000FF   880 _SPIF	=	0x00ff
                           0000B0   881 G$SS2$0$0 == 0x00b0
                           0000B0   882 _SS2	=	0x00b0
                           0000B1   883 G$SS$0$0 == 0x00b1
                           0000B1   884 _SS	=	0x00b1
                           0000B2   885 G$PB0$0$0 == 0x00b2
                           0000B2   886 _PB0	=	0x00b2
                           0000B3   887 G$PB2$0$0 == 0x00b3
                           0000B3   888 _PB2	=	0x00b3
                           0000B4   889 G$PB1$0$0 == 0x00b4
                           0000B4   890 _PB1	=	0x00b4
                           0000B5   891 G$PB3$0$0 == 0x00b5
                           0000B5   892 _PB3	=	0x00b5
                           0000B6   893 G$Buzzer$0$0 == 0x00b6
                           0000B6   894 _Buzzer	=	0x00b6
                           0000B7   895 G$BILED1$0$0 == 0x00b7
                           0000B7   896 _BILED1	=	0x00b7
                           0000A0   897 G$LED0$0$0 == 0x00a0
                           0000A0   898 _LED0	=	0x00a0
                           0000A1   899 G$BILED2$0$0 == 0x00a1
                           0000A1   900 _BILED2	=	0x00a1
                           0000A2   901 G$LED1$0$0 == 0x00a2
                           0000A2   902 _LED1	=	0x00a2
                           0000A3   903 G$LED2$0$0 == 0x00a3
                           0000A3   904 _LED2	=	0x00a3
                           0000A5   905 G$LED3$0$0 == 0x00a5
                           0000A5   906 _LED3	=	0x00a5
                                    907 ;--------------------------------------------------------
                                    908 ; overlayable register banks
                                    909 ;--------------------------------------------------------
                                    910 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        911 	.ds 8
                                    912 ;--------------------------------------------------------
                                    913 ; internal ram data
                                    914 ;--------------------------------------------------------
                                    915 	.area DSEG    (DATA)
                           000000   916 G$Counts$0$0==.
      000000                        917 _Counts::
      000000                        918 	.ds 2
                           000002   919 G$debounceCount$0$0==.
      000002                        920 _debounceCount::
      000002                        921 	.ds 2
                                    922 ;--------------------------------------------------------
                                    923 ; overlayable items in internal ram 
                                    924 ;--------------------------------------------------------
                                    925 	.area	OSEG    (OVR,DATA)
                                    926 	.area	OSEG    (OVR,DATA)
                                    927 	.area	OSEG    (OVR,DATA)
                                    928 ;--------------------------------------------------------
                                    929 ; Stack segment in internal ram 
                                    930 ;--------------------------------------------------------
                                    931 	.area	SSEG
      000000                        932 __start__stack:
      000000                        933 	.ds	1
                                    934 
                                    935 ;--------------------------------------------------------
                                    936 ; indirectly addressable internal ram data
                                    937 ;--------------------------------------------------------
                                    938 	.area ISEG    (DATA)
                                    939 ;--------------------------------------------------------
                                    940 ; absolute internal ram data
                                    941 ;--------------------------------------------------------
                                    942 	.area IABS    (ABS,DATA)
                                    943 	.area IABS    (ABS,DATA)
                                    944 ;--------------------------------------------------------
                                    945 ; bit data
                                    946 ;--------------------------------------------------------
                                    947 	.area BSEG    (BIT)
                                    948 ;--------------------------------------------------------
                                    949 ; paged external ram data
                                    950 ;--------------------------------------------------------
                                    951 	.area PSEG    (PAG,XDATA)
                                    952 ;--------------------------------------------------------
                                    953 ; external ram data
                                    954 ;--------------------------------------------------------
                                    955 	.area XSEG    (XDATA)
                                    956 ;--------------------------------------------------------
                                    957 ; absolute external ram data
                                    958 ;--------------------------------------------------------
                                    959 	.area XABS    (ABS,XDATA)
                                    960 ;--------------------------------------------------------
                                    961 ; external initialized ram data
                                    962 ;--------------------------------------------------------
                                    963 	.area XISEG   (XDATA)
                                    964 	.area HOME    (CODE)
                                    965 	.area GSINIT0 (CODE)
                                    966 	.area GSINIT1 (CODE)
                                    967 	.area GSINIT2 (CODE)
                                    968 	.area GSINIT3 (CODE)
                                    969 	.area GSINIT4 (CODE)
                                    970 	.area GSINIT5 (CODE)
                                    971 	.area GSINIT  (CODE)
                                    972 	.area GSFINAL (CODE)
                                    973 	.area CSEG    (CODE)
                                    974 ;--------------------------------------------------------
                                    975 ; interrupt vector 
                                    976 ;--------------------------------------------------------
                                    977 	.area HOME    (CODE)
      000000                        978 __interrupt_vect:
      000000 02r00r00         [24]  979 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  980 	reti
      000004                        981 	.ds	7
      00000B 02r00rBB         [24]  982 	ljmp	_Timer0_ISR
                                    983 ;--------------------------------------------------------
                                    984 ; global & static initialisations
                                    985 ;--------------------------------------------------------
                                    986 	.area HOME    (CODE)
                                    987 	.area GSINIT  (CODE)
                                    988 	.area GSFINAL (CODE)
                                    989 	.area GSINIT  (CODE)
                                    990 	.globl __sdcc_gsinit_startup
                                    991 	.globl __sdcc_program_startup
                                    992 	.globl __start__stack
                                    993 	.globl __mcs51_genXINIT
                                    994 	.globl __mcs51_genXRAMCLEAR
                                    995 	.globl __mcs51_genRAMCLEAR
                                    996 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  997 	ljmp	__sdcc_program_startup
                                    998 ;--------------------------------------------------------
                                    999 ; Home
                                   1000 ;--------------------------------------------------------
                                   1001 	.area HOME    (CODE)
                                   1002 	.area HOME    (CODE)
      00000E                       1003 __sdcc_program_startup:
      00000E 02r00r7B         [24] 1004 	ljmp	_main
                                   1005 ;	return from main will return to caller
                                   1006 ;--------------------------------------------------------
                                   1007 ; code
                                   1008 ;--------------------------------------------------------
                                   1009 	.area CSEG    (CODE)
                                   1010 ;------------------------------------------------------------
                                   1011 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1012 ;------------------------------------------------------------
                                   1013 ;i                         Allocated to registers r6 r7 
                                   1014 ;------------------------------------------------------------
                           000000  1015 	G$SYSCLK_Init$0$0 ==.
                           000000  1016 	C$c8051_SDCC.h$62$0$0 ==.
                                   1017 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1018 ;	-----------------------------------------
                                   1019 ;	 function SYSCLK_Init
                                   1020 ;	-----------------------------------------
      000000                       1021 _SYSCLK_Init:
                           000007  1022 	ar7 = 0x07
                           000006  1023 	ar6 = 0x06
                           000005  1024 	ar5 = 0x05
                           000004  1025 	ar4 = 0x04
                           000003  1026 	ar3 = 0x03
                           000002  1027 	ar2 = 0x02
                           000001  1028 	ar1 = 0x01
                           000000  1029 	ar0 = 0x00
                           000000  1030 	C$c8051_SDCC.h$66$1$2 ==.
                                   1031 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1032 	mov	_OSCXCN,#0x67
                           000003  1033 	C$c8051_SDCC.h$69$1$2 ==.
                                   1034 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1035 	mov	r6,#0x00
      000005 7F 01            [12] 1036 	mov	r7,#0x01
      000007                       1037 00107$:
      000007 EE               [12] 1038 	mov	a,r6
      000008 24 FF            [12] 1039 	add	a,#0xff
      00000A FC               [12] 1040 	mov	r4,a
      00000B EF               [12] 1041 	mov	a,r7
      00000C 34 FF            [12] 1042 	addc	a,#0xff
      00000E FD               [12] 1043 	mov	r5,a
      00000F 8C 06            [24] 1044 	mov	ar6,r4
      000011 8D 07            [24] 1045 	mov	ar7,r5
      000013 EC               [12] 1046 	mov	a,r4
      000014 4D               [12] 1047 	orl	a,r5
      000015 70 F0            [24] 1048 	jnz	00107$
                           000017  1049 	C$c8051_SDCC.h$71$1$2 ==.
                                   1050 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1051 00102$:
      000017 E5 B1            [12] 1052 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1053 	jnb	acc.7,00102$
                           00001C  1054 	C$c8051_SDCC.h$73$1$2 ==.
                                   1055 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1056 	mov	_OSCICN,#0x88
                           00001F  1057 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1058 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1059 	ret
                                   1060 ;------------------------------------------------------------
                                   1061 ;Allocation info for local variables in function 'UART0_Init'
                                   1062 ;------------------------------------------------------------
                           000020  1063 	G$UART0_Init$0$0 ==.
                           000020  1064 	C$c8051_SDCC.h$84$1$2 ==.
                                   1065 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1066 ;	-----------------------------------------
                                   1067 ;	 function UART0_Init
                                   1068 ;	-----------------------------------------
      000020                       1069 _UART0_Init:
                           000020  1070 	C$c8051_SDCC.h$86$1$4 ==.
                                   1071 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1072 	mov	_SCON0,#0x50
                           000023  1073 	C$c8051_SDCC.h$87$1$4 ==.
                                   1074 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1075 	mov	_TMOD,#0x20
                           000026  1076 	C$c8051_SDCC.h$88$1$4 ==.
                                   1077 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1078 	mov	_TH1,#0xdc
                           000029  1079 	C$c8051_SDCC.h$89$1$4 ==.
                                   1080 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1081 	setb	_TR1
                           00002B  1082 	C$c8051_SDCC.h$90$1$4 ==.
                                   1083 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1084 	orl	_CKCON,#0x10
                           00002E  1085 	C$c8051_SDCC.h$91$1$4 ==.
                                   1086 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1087 	orl	_PCON,#0x80
                           000031  1088 	C$c8051_SDCC.h$93$1$4 ==.
                                   1089 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1090 	setb	_TI0
                           000033  1091 	C$c8051_SDCC.h$94$1$4 ==.
                                   1092 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1093 	orl	_P0MDOUT,#0x01
                           000036  1094 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1095 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1096 	ret
                                   1097 ;------------------------------------------------------------
                                   1098 ;Allocation info for local variables in function 'Sys_Init'
                                   1099 ;------------------------------------------------------------
                           000037  1100 	G$Sys_Init$0$0 ==.
                           000037  1101 	C$c8051_SDCC.h$103$1$4 ==.
                                   1102 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1103 ;	-----------------------------------------
                                   1104 ;	 function Sys_Init
                                   1105 ;	-----------------------------------------
      000037                       1106 _Sys_Init:
                           000037  1107 	C$c8051_SDCC.h$105$1$6 ==.
                                   1108 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1109 	mov	_WDTCN,#0xde
                           00003A  1110 	C$c8051_SDCC.h$106$1$6 ==.
                                   1111 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1112 	mov	_WDTCN,#0xad
                           00003D  1113 	C$c8051_SDCC.h$108$1$6 ==.
                                   1114 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1115 	lcall	_SYSCLK_Init
                           000040  1116 	C$c8051_SDCC.h$109$1$6 ==.
                                   1117 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1118 	lcall	_UART0_Init
                           000043  1119 	C$c8051_SDCC.h$111$1$6 ==.
                                   1120 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1121 	orl	_XBR0,#0x04
                           000046  1122 	C$c8051_SDCC.h$112$1$6 ==.
                                   1123 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1124 	orl	_XBR2,#0x40
                           000049  1125 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1126 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1127 	ret
                                   1128 ;------------------------------------------------------------
                                   1129 ;Allocation info for local variables in function 'putchar'
                                   1130 ;------------------------------------------------------------
                                   1131 ;c                         Allocated to registers r7 
                                   1132 ;------------------------------------------------------------
                           00004A  1133 	G$putchar$0$0 ==.
                           00004A  1134 	C$c8051_SDCC.h$129$1$6 ==.
                                   1135 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1136 ;	-----------------------------------------
                                   1137 ;	 function putchar
                                   1138 ;	-----------------------------------------
      00004A                       1139 _putchar:
      00004A AF 82            [24] 1140 	mov	r7,dpl
                           00004C  1141 	C$c8051_SDCC.h$132$1$8 ==.
                                   1142 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1143 00101$:
                           00004C  1144 	C$c8051_SDCC.h$133$1$8 ==.
                                   1145 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1146 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1147 	sjmp	00101$
      000051                       1148 00112$:
                           000051  1149 	C$c8051_SDCC.h$134$1$8 ==.
                                   1150 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1151 	mov	_SBUF0,r7
                           000053  1152 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1153 	XG$putchar$0$0 ==.
      000053 22               [24] 1154 	ret
                                   1155 ;------------------------------------------------------------
                                   1156 ;Allocation info for local variables in function 'getchar'
                                   1157 ;------------------------------------------------------------
                                   1158 ;c                         Allocated to registers r7 
                                   1159 ;------------------------------------------------------------
                           000054  1160 	G$getchar$0$0 ==.
                           000054  1161 	C$c8051_SDCC.h$154$1$8 ==.
                                   1162 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1163 ;	-----------------------------------------
                                   1164 ;	 function getchar
                                   1165 ;	-----------------------------------------
      000054                       1166 _getchar:
                           000054  1167 	C$c8051_SDCC.h$157$1$10 ==.
                                   1168 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1169 00101$:
                           000054  1170 	C$c8051_SDCC.h$158$1$10 ==.
                                   1171 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1172 	jbc	_RI0,00112$
      000057 80 FB            [24] 1173 	sjmp	00101$
      000059                       1174 00112$:
                           000059  1175 	C$c8051_SDCC.h$159$1$10 ==.
                                   1176 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1177 	mov	r7,_SBUF0
                           00005B  1178 	C$c8051_SDCC.h$160$1$10 ==.
                                   1179 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1180 	mov	dpl,r7
      00005D C0 07            [24] 1181 	push	ar7
      00005F 12r00r4A         [24] 1182 	lcall	_putchar
      000062 D0 07            [24] 1183 	pop	ar7
                           000064  1184 	C$c8051_SDCC.h$161$1$10 ==.
                                   1185 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1186 	mov	dpl,r7
                           000066  1187 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1188 	XG$getchar$0$0 ==.
      000066 22               [24] 1189 	ret
                                   1190 ;------------------------------------------------------------
                                   1191 ;Allocation info for local variables in function 'getchar_nw'
                                   1192 ;------------------------------------------------------------
                                   1193 ;c                         Allocated to registers 
                                   1194 ;------------------------------------------------------------
                           000067  1195 	G$getchar_nw$0$0 ==.
                           000067  1196 	C$c8051_SDCC.h$168$1$10 ==.
                                   1197 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1198 ;	-----------------------------------------
                                   1199 ;	 function getchar_nw
                                   1200 ;	-----------------------------------------
      000067                       1201 _getchar_nw:
                           000067  1202 	C$c8051_SDCC.h$171$1$12 ==.
                                   1203 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1204 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1205 	mov	dpl,#0xff
      00006D 80 0B            [24] 1206 	sjmp	00104$
      00006F                       1207 00102$:
                           00006F  1208 	C$c8051_SDCC.h$174$2$13 ==.
                                   1209 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1210 	clr	_RI0
                           000071  1211 	C$c8051_SDCC.h$175$2$13 ==.
                                   1212 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1213 	mov	dpl,_SBUF0
                           000074  1214 	C$c8051_SDCC.h$176$2$13 ==.
                                   1215 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1216 	lcall	_putchar
                           000077  1217 	C$c8051_SDCC.h$177$2$13 ==.
                                   1218 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1219 	mov	dpl,_SBUF0
      00007A                       1220 00104$:
                           00007A  1221 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1222 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1223 	ret
                                   1224 ;------------------------------------------------------------
                                   1225 ;Allocation info for local variables in function 'main'
                                   1226 ;------------------------------------------------------------
                           00007B  1227 	G$main$0$0 ==.
                           00007B  1228 	C$Lab2.c$67$1$12 ==.
                                   1229 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:67: void main(void)
                                   1230 ;	-----------------------------------------
                                   1231 ;	 function main
                                   1232 ;	-----------------------------------------
      00007B                       1233 _main:
                           00007B  1234 	C$Lab2.c$70$1$41 ==.
                                   1235 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:70: Sys_Init(); /* Initialize the C8051 board */
      00007B 12r00r37         [24] 1236 	lcall	_Sys_Init
                           00007E  1237 	C$Lab2.c$71$1$41 ==.
                                   1238 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:71: Port_Init(); /* Configure P1.4 for analog input */
      00007E 12r00r90         [24] 1239 	lcall	_Port_Init
                           000081  1240 	C$Lab2.c$72$1$41 ==.
                                   1241 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:72: ADC_Init(); /* Initialize A/D conversion */
      000081 12r00rD4         [24] 1242 	lcall	_ADC_Init
                           000084  1243 	C$Lab2.c$73$1$41 ==.
                                   1244 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:73: putchar(' ');
      000084 75 82 20         [24] 1245 	mov	dpl,#0x20
      000087 12r00r4A         [24] 1246 	lcall	_putchar
                           00008A  1247 	C$Lab2.c$75$1$41 ==.
                                   1248 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:75: while (1)          // infinite loop 
      00008A                       1249 00102$:
                           00008A  1250 	C$Lab2.c$79$2$42 ==.
                                   1251 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:79: Set_outputs();
      00008A 12r00r00         [24] 1252 	lcall	_Set_outputs
      00008D 80 FB            [24] 1253 	sjmp	00102$
                           00008F  1254 	C$Lab2.c$88$1$41 ==.
                           00008F  1255 	XG$main$0$0 ==.
      00008F 22               [24] 1256 	ret
                                   1257 ;------------------------------------------------------------
                                   1258 ;Allocation info for local variables in function 'Port_Init'
                                   1259 ;------------------------------------------------------------
                           000090  1260 	G$Port_Init$0$0 ==.
                           000090  1261 	C$Lab2.c$91$1$41 ==.
                                   1262 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:91: void Port_Init(void)
                                   1263 ;	-----------------------------------------
                                   1264 ;	 function Port_Init
                                   1265 ;	-----------------------------------------
      000090                       1266 _Port_Init:
                           000090  1267 	C$Lab2.c$94$1$44 ==.
                                   1268 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:94: P3MDOUT &= 0xC0; // set Port 3 input pins to push-pull mode (fill in the blank)
      000090 53 A7 C0         [24] 1269 	anl	_P3MDOUT,#0xc0
                           000093  1270 	C$Lab2.c$95$1$44 ==.
                                   1271 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:95: P3MDOUT |= 0xC0; // set Port 3 output pins to open drain mode (fill in the blank)
      000093 43 A7 C0         [24] 1272 	orl	_P3MDOUT,#0xc0
                           000096  1273 	C$Lab2.c$96$1$44 ==.
                                   1274 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:96: P3 |= ~0xC0; // set Port 3 input pins to high impedance state (fill in the blank)
      000096 43 B0 3F         [24] 1275 	orl	_P3,#0x3f
                           000099  1276 	C$Lab2.c$99$1$44 ==.
                                   1277 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:99: P2MDOUT |= ~0xC0;  // set Port 2 output pins
      000099 43 A6 3F         [24] 1278 	orl	_P2MDOUT,#0x3f
                           00009C  1279 	C$Lab2.c$102$1$44 ==.
                                   1280 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:102: P1MDIN &= ~0x10; /* Set P1.4 for analog input */
      00009C 53 BD EF         [24] 1281 	anl	_P1MDIN,#0xef
                           00009F  1282 	C$Lab2.c$103$1$44 ==.
                                   1283 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:103: P1MDOUT &= ~0x10; /* Set P1.4 to open drain */
      00009F 53 A5 EF         [24] 1284 	anl	_P1MDOUT,#0xef
                           0000A2  1285 	C$Lab2.c$104$1$44 ==.
                                   1286 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:104: P1 |= 0x10; /* Send logic 1 to input pin P1.4 for impedance */
      0000A2 43 90 10         [24] 1287 	orl	_P1,#0x10
                           0000A5  1288 	C$Lab2.c$105$1$44 ==.
                           0000A5  1289 	XG$Port_Init$0$0 ==.
      0000A5 22               [24] 1290 	ret
                                   1291 ;------------------------------------------------------------
                                   1292 ;Allocation info for local variables in function 'Interrupt_Init'
                                   1293 ;------------------------------------------------------------
                           0000A6  1294 	G$Interrupt_Init$0$0 ==.
                           0000A6  1295 	C$Lab2.c$109$1$44 ==.
                                   1296 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:109: void Interrupt_Init(void)
                                   1297 ;	-----------------------------------------
                                   1298 ;	 function Interrupt_Init
                                   1299 ;	-----------------------------------------
      0000A6                       1300 _Interrupt_Init:
                           0000A6  1301 	C$Lab2.c$111$1$46 ==.
                                   1302 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:111: IE |= 0x82;      // enable Timer0 Interrupt request (by masking)
      0000A6 43 A8 82         [24] 1303 	orl	_IE,#0x82
                           0000A9  1304 	C$Lab2.c$112$1$46 ==.
                           0000A9  1305 	XG$Interrupt_Init$0$0 ==.
      0000A9 22               [24] 1306 	ret
                                   1307 ;------------------------------------------------------------
                                   1308 ;Allocation info for local variables in function 'Timer_Init'
                                   1309 ;------------------------------------------------------------
                           0000AA  1310 	G$Timer_Init$0$0 ==.
                           0000AA  1311 	C$Lab2.c$116$1$46 ==.
                                   1312 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:116: void Timer_Init(void)
                                   1313 ;	-----------------------------------------
                                   1314 ;	 function Timer_Init
                                   1315 ;	-----------------------------------------
      0000AA                       1316 _Timer_Init:
                           0000AA  1317 	C$Lab2.c$119$1$48 ==.
                                   1318 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:119: CKCON |= 0x08;  // Timer0 uses SYSCLK as source
      0000AA 43 8E 08         [24] 1319 	orl	_CKCON,#0x08
                           0000AD  1320 	C$Lab2.c$120$1$48 ==.
                                   1321 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:120: TMOD &= 0xF0;   // clear the 4 least significant bits
      0000AD 53 89 F0         [24] 1322 	anl	_TMOD,#0xf0
                           0000B0  1323 	C$Lab2.c$121$1$48 ==.
                                   1324 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:121: TMOD |= 0x01;   // Timer0 in mode 1 
      0000B0 43 89 01         [24] 1325 	orl	_TMOD,#0x01
                           0000B3  1326 	C$Lab2.c$122$1$48 ==.
                                   1327 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:122: TR0 = 0;        // Stop Timer0
      0000B3 C2 8C            [12] 1328 	clr	_TR0
                           0000B5  1329 	C$Lab2.c$123$1$48 ==.
                                   1330 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:123: TMR0 = 0;       // Clear high & low byte of T0
      0000B5 E4               [12] 1331 	clr	a
      0000B6 F5 8A            [12] 1332 	mov	((_TMR0 >> 0) & 0xFF),a
      0000B8 F5 8C            [12] 1333 	mov	((_TMR0 >> 8) & 0xFF),a
                           0000BA  1334 	C$Lab2.c$125$1$48 ==.
                           0000BA  1335 	XG$Timer_Init$0$0 ==.
      0000BA 22               [24] 1336 	ret
                                   1337 ;------------------------------------------------------------
                                   1338 ;Allocation info for local variables in function 'Timer0_ISR'
                                   1339 ;------------------------------------------------------------
                           0000BB  1340 	G$Timer0_ISR$0$0 ==.
                           0000BB  1341 	C$Lab2.c$129$1$48 ==.
                                   1342 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:129: void Timer0_ISR(void) __interrupt 1
                                   1343 ;	-----------------------------------------
                                   1344 ;	 function Timer0_ISR
                                   1345 ;	-----------------------------------------
      0000BB                       1346 _Timer0_ISR:
      0000BB C0 E0            [24] 1347 	push	acc
      0000BD C0 D0            [24] 1348 	push	psw
                           0000BF  1349 	C$Lab2.c$133$1$50 ==.
                                   1350 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:133: Counts++;
      0000BF 05*00            [12] 1351 	inc	_Counts
      0000C1 E4               [12] 1352 	clr	a
      0000C2 B5*00 02         [24] 1353 	cjne	a,_Counts,00103$
      0000C5 05*01            [12] 1354 	inc	(_Counts + 1)
      0000C7                       1355 00103$:
                           0000C7  1356 	C$Lab2.c$134$1$50 ==.
                                   1357 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:134: debounceCount++;
      0000C7 05*02            [12] 1358 	inc	_debounceCount
      0000C9 E4               [12] 1359 	clr	a
      0000CA B5*02 02         [24] 1360 	cjne	a,_debounceCount,00104$
      0000CD 05*03            [12] 1361 	inc	(_debounceCount + 1)
      0000CF                       1362 00104$:
      0000CF D0 D0            [24] 1363 	pop	psw
      0000D1 D0 E0            [24] 1364 	pop	acc
                           0000D3  1365 	C$Lab2.c$135$1$50 ==.
                           0000D3  1366 	XG$Timer0_ISR$0$0 ==.
      0000D3 32               [24] 1367 	reti
                                   1368 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1369 ;	eliminated unneeded push/pop dpl
                                   1370 ;	eliminated unneeded push/pop dph
                                   1371 ;	eliminated unneeded push/pop b
                                   1372 ;------------------------------------------------------------
                                   1373 ;Allocation info for local variables in function 'ADC_Init'
                                   1374 ;------------------------------------------------------------
                           0000D4  1375 	G$ADC_Init$0$0 ==.
                           0000D4  1376 	C$Lab2.c$139$1$50 ==.
                                   1377 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:139: void ADC_Init(void)
                                   1378 ;	-----------------------------------------
                                   1379 ;	 function ADC_Init
                                   1380 ;	-----------------------------------------
      0000D4                       1381 _ADC_Init:
                           0000D4  1382 	C$Lab2.c$141$1$52 ==.
                                   1383 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:141: REF0CN = 0x03;  /* Set Vref to use internal reference voltage (2.4V) */
      0000D4 75 D1 03         [24] 1384 	mov	_REF0CN,#0x03
                           0000D7  1385 	C$Lab2.c$142$1$52 ==.
                                   1386 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:142: ADC1CN = 0x80;  /* Enable A/D converter (ADC1) */
      0000D7 75 AA 80         [24] 1387 	mov	_ADC1CN,#0x80
                           0000DA  1388 	C$Lab2.c$143$1$52 ==.
                                   1389 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:143: ADC1CF |= 0x01; /* Set A/D converter gain to 1 */
      0000DA 43 AB 01         [24] 1390 	orl	_ADC1CF,#0x01
                           0000DD  1391 	C$Lab2.c$144$1$52 ==.
                           0000DD  1392 	XG$ADC_Init$0$0 ==.
      0000DD 22               [24] 1393 	ret
                                   1394 ;------------------------------------------------------------
                                   1395 ;Allocation info for local variables in function 'read_AD_input'
                                   1396 ;------------------------------------------------------------
                                   1397 ;n                         Allocated to registers 
                                   1398 ;------------------------------------------------------------
                           0000DE  1399 	G$read_AD_input$0$0 ==.
                           0000DE  1400 	C$Lab2.c$148$1$52 ==.
                                   1401 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:148: unsigned char read_AD_input(unsigned char n)
                                   1402 ;	-----------------------------------------
                                   1403 ;	 function read_AD_input
                                   1404 ;	-----------------------------------------
      0000DE                       1405 _read_AD_input:
      0000DE 85 82 AC         [24] 1406 	mov	_AMX1SL,dpl
                           0000E1  1407 	C$Lab2.c$151$1$54 ==.
                                   1408 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:151: ADC1CN = ADC1CN & ~0x20; /* Clear the “Conversion Completed” flag */
      0000E1 53 AA DF         [24] 1409 	anl	_ADC1CN,#0xdf
                           0000E4  1410 	C$Lab2.c$152$1$54 ==.
                                   1411 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:152: ADC1CN = ADC1CN | 0x10; /* Initiate A/D conversion */
      0000E4 43 AA 10         [24] 1412 	orl	_ADC1CN,#0x10
                           0000E7  1413 	C$Lab2.c$153$1$54 ==.
                                   1414 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:153: while ((ADC1CN & 0x20) == 0x00); /* Wait for conversion to complete */
      0000E7                       1415 00101$:
      0000E7 E5 AA            [12] 1416 	mov	a,_ADC1CN
      0000E9 30 E5 FB         [24] 1417 	jnb	acc.5,00101$
                           0000EC  1418 	C$Lab2.c$154$1$54 ==.
                                   1419 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:154: return ADC1; /* Return digital value in ADC1 register */
      0000EC 85 9C 82         [24] 1420 	mov	dpl,_ADC1
                           0000EF  1421 	C$Lab2.c$155$1$54 ==.
                           0000EF  1422 	XG$read_AD_input$0$0 ==.
      0000EF 22               [24] 1423 	ret
                                   1424 ;------------------------------------------------------------
                                   1425 ;Allocation info for local variables in function 'Debounce'
                                   1426 ;------------------------------------------------------------
                           0000F0  1427 	G$Debounce$0$0 ==.
                           0000F0  1428 	C$Lab2.c$158$1$54 ==.
                                   1429 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:158: void Debounce(void)
                                   1430 ;	-----------------------------------------
                                   1431 ;	 function Debounce
                                   1432 ;	-----------------------------------------
      0000F0                       1433 _Debounce:
                           0000F0  1434 	C$Lab2.c$160$1$56 ==.
                                   1435 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:160: debounceCount = 0; //reset counter
      0000F0 E4               [12] 1436 	clr	a
      0000F1 F5*02            [12] 1437 	mov	_debounceCount,a
      0000F3 F5*03            [12] 1438 	mov	(_debounceCount + 1),a
                           0000F5  1439 	C$Lab2.c$161$1$56 ==.
                                   1440 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:161: while(debounceCount < 7); //wait 20 msec
      0000F5                       1441 00101$:
      0000F5 C3               [12] 1442 	clr	c
      0000F6 E5*02            [12] 1443 	mov	a,_debounceCount
      0000F8 94 07            [12] 1444 	subb	a,#0x07
      0000FA E5*03            [12] 1445 	mov	a,(_debounceCount + 1)
      0000FC 94 00            [12] 1446 	subb	a,#0x00
      0000FE 40 F5            [24] 1447 	jc	00101$
                           000100  1448 	C$Lab2.c$162$1$56 ==.
                           000100  1449 	XG$Debounce$0$0 ==.
      000100 22               [24] 1450 	ret
                                   1451 ;------------------------------------------------------------
                                   1452 ;Allocation info for local variables in function 'random'
                                   1453 ;------------------------------------------------------------
                           000101  1454 	G$random$0$0 ==.
                           000101  1455 	C$Lab2.c$165$1$56 ==.
                                   1456 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:165: unsigned char random(void)
                                   1457 ;	-----------------------------------------
                                   1458 ;	 function random
                                   1459 ;	-----------------------------------------
      000101                       1460 _random:
                           000101  1461 	C$Lab2.c$167$1$58 ==.
                                   1462 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:167: return rand()%3;  // rand returns a random number between 0 and 32767.
      000101 12r00r00         [24] 1463 	lcall	_rand
      000104 75*00 03         [24] 1464 	mov	__modsint_PARM_2,#0x03
      000107 75*01 00         [24] 1465 	mov	(__modsint_PARM_2 + 1),#0x00
      00010A 12r00r00         [24] 1466 	lcall	__modsint
                           00010D  1467 	C$Lab2.c$171$1$58 ==.
                           00010D  1468 	XG$random$0$0 ==.
      00010D 22               [24] 1469 	ret
                                   1470 ;------------------------------------------------------------
                                   1471 ;Allocation info for local variables in function 'mode3'
                                   1472 ;------------------------------------------------------------
                           00010E  1473 	G$mode3$0$0 ==.
                           00010E  1474 	C$Lab2.c$178$1$58 ==.
                                   1475 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:178: void mode3(void)
                                   1476 ;	-----------------------------------------
                                   1477 ;	 function mode3
                                   1478 ;	-----------------------------------------
      00010E                       1479 _mode3:
                           00010E  1480 	C$Lab2.c$180$1$63 ==.
                                   1481 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:180: printf("\rMode 3\n\r");
      00010E 74r00            [12] 1482 	mov	a,#___str_0
      000110 C0 E0            [24] 1483 	push	acc
      000112 74s00            [12] 1484 	mov	a,#(___str_0 >> 8)
      000114 C0 E0            [24] 1485 	push	acc
      000116 74 80            [12] 1486 	mov	a,#0x80
      000118 C0 E0            [24] 1487 	push	acc
      00011A 12r00r00         [24] 1488 	lcall	_printf
      00011D 15 81            [12] 1489 	dec	sp
      00011F 15 81            [12] 1490 	dec	sp
      000121 15 81            [12] 1491 	dec	sp
                           000123  1492 	C$Lab2.c$181$1$63 ==.
                                   1493 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:181: printf("Match pattern by adjusting potentiometer\n\r");
      000123 74r0A            [12] 1494 	mov	a,#___str_1
      000125 C0 E0            [24] 1495 	push	acc
      000127 74s00            [12] 1496 	mov	a,#(___str_1 >> 8)
      000129 C0 E0            [24] 1497 	push	acc
      00012B 74 80            [12] 1498 	mov	a,#0x80
      00012D C0 E0            [24] 1499 	push	acc
      00012F 12r00r00         [24] 1500 	lcall	_printf
      000132 15 81            [12] 1501 	dec	sp
      000134 15 81            [12] 1502 	dec	sp
      000136 15 81            [12] 1503 	dec	sp
                           000138  1504 	C$Lab2.c$182$1$63 ==.
                                   1505 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:182: LED3 = 1;
      000138 D2 A5            [12] 1506 	setb	_LED3
                           00013A  1507 	C$Lab2.c$183$1$63 ==.
                                   1508 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:183: LED2 = 1;
      00013A D2 A3            [12] 1509 	setb	_LED2
                           00013C  1510 	C$Lab2.c$184$1$63 ==.
                                   1511 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:184: LED1 = 1;
      00013C D2 A2            [12] 1512 	setb	_LED1
                           00013E  1513 	C$Lab2.c$185$1$63 ==.
                                   1514 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:185: LED0 = 1;
      00013E D2 A0            [12] 1515 	setb	_LED0
                           000140  1516 	C$Lab2.c$186$1$63 ==.
                                   1517 ;	C:\Users\Tim\Documents\LITEC\Lab2\Lab2.c:186: while(PB0){
      000140                       1518 00101$:
      000140 20 B2 FD         [24] 1519 	jb	_PB0,00101$
                           000143  1520 	C$Lab2.c$190$1$63 ==.
                           000143  1521 	XG$mode3$0$0 ==.
      000143 22               [24] 1522 	ret
                                   1523 	.area CSEG    (CODE)
                                   1524 	.area CONST   (CODE)
                           000000  1525 FLab2$__str_0$0$0 == .
      000000                       1526 ___str_0:
      000000 0D                    1527 	.db 0x0d
      000001 4D 6F 64 65 20 33     1528 	.ascii "Mode 3"
      000007 0A                    1529 	.db 0x0a
      000008 0D                    1530 	.db 0x0d
      000009 00                    1531 	.db 0x00
                           00000A  1532 FLab2$__str_1$0$0 == .
      00000A                       1533 ___str_1:
      00000A 4D 61 74 63 68 20 70  1534 	.ascii "Match pattern by adjusting potentiometer"
             61 74 74 65 72 6E 20
             62 79 20 61 64 6A 75
             73 74 69 6E 67 20 70
             6F 74 65 6E 74 69 6F
             6D 65 74 65 72
      000032 0A                    1535 	.db 0x0a
      000033 0D                    1536 	.db 0x0d
      000034 00                    1537 	.db 0x00
                                   1538 	.area XINIT   (CODE)
                                   1539 	.area CABS    (ABS,CODE)
