/*  Names:Chuizheng Kong
    Section:3
    Date:
    File name:
    Description:
*/
/*
  This program demonstrates the use of T0 interrupts. The code will count the
  number of T0 timer overflows that occur while a slide switch is in the ON position.
*/

#include <c8051_SDCC.h>// include files. This file is available online
#include <stdio.h>
#include <stdlib.h>

//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Port_Init(void);      // Initialize ports for input and output
void Timer_Init(void);     // Initialize Timer 0 
void Interrupt_Init(void); //Initialize interrupts
void ADC_Init(void);
void Timer0_ISR(void) __interrupt 1;
unsigned char random(unsigned char); 
void CDS(void); // determine which mode to use
void clear(void);
void mode0(void);
void mode1(void);// mode 1 run by CDS
void mode2(void);
void mode3(void);
void theBuzz(void);
void lightLED(unsigned char);
void lightLEDmode3(unsigned char num);
unsigned char buttonPress(void);
void game(void);

//-----------------------------------------------------------------------------
// Global Variables
//-----------------------------------------------------------------------------
__sbit __at 0xB7 BILED1;
__sbit __at 0xA1 BILED2;
__sbit __at 0xB2 PB0;
__sbit __at 0xB3 PB2;
__sbit __at 0xB4 PB1;
__sbit __at 0xB5 PB3;
__sbit __at 0xA0 LED0;
__sbit __at 0xA2 LED1;
__sbit __at 0xA3 LED2;
__sbit __at 0xA5 LED3;
__sbit __at 0xB6 BUZZER; // Buzzer, associated with Port3, Pin 7
__sbit __at 0xB1 SS0;
__sbit __at 0xB0 SS1;
// sbit settings are incomplete, include those developed 
// in Lab 1-1 and add the sbit setting for LED1
unsigned int Counts = 0;
unsigned int score = 0;
unsigned char input;
unsigned char i; //for all the looping
unsigned int speed = 337*1.3;//as timer0 is a 16-bit SYSCLK, default speed is set to 1 second.

//variables in mode1
unsigned char light[8];
unsigned char times[8];
unsigned int alive = 1;
unsigned char seq;
unsigned char rep;
unsigned char currLED = 4;

//variables in mode2
unsigned char adc;
unsigned char whichLED;
unsigned char blink;
//variables in mode2
unsigned char adc;
unsigned char whichLED;
unsigned char blink;
//variables in mode3
unsigned char ADresult;
unsigned int blink_rate; 
unsigned int delay; //New Variable for delay55555555555555555
unsigned char led_on;//Saves the random value

//variables in buttonPress()
unsigned int currCounts;
//----------------------------------------------------------------------------
//  Main Function
//***************
void main(void)
{
    Sys_Init();      // System Initialization
    Port_Init();     // Initialize ports 2 and 3 
    Interrupt_Init();
    Timer_Init();    // Initialize Timer 0 
	ADC_Init();
	printf("\r Start theGame!\n");
    putchar(' ');    // the quote fonts may not copy correctly into SiLabs IDE
	while(1)
	{
		CDS();
		alive = 1;
		score = 0;
	}
	 
}

//***************
void Port_Init(void)
{
	// Port 3
    P3MDOUT &= 0xC0; // set Port 3 input pins to push-pull mode (fill in the blank)
    P3MDOUT |= 0xC0; // set Port 3 output pins to open drain mode (fill in the blank)
    P3 |= ~0xC0; // set Port 3 input pins to high impedance state (fill in the blank)

    // Port 2
    P2MDOUT |= ~0xC0;  // set Port 2 output pins

    // Port 1
 	P1MDIN &= ~0x10; /* Set P1.4 for analog input */
 	P1MDOUT &= ~0x10; /* Set P1.4 to open drain */
 	P1 |= 0x10; /* Send logic 1 to input pin P1.4 for impedance */
}
//***************
void Interrupt_Init(void)
{
    IE |= 0x02;      // enable Timer0 Interrupt request (by masking)
    EA = 1;       // enable global interrupts (by sbit)
}
//***************
void Timer_Init(void)
{

    CKCON |= 0x08;  // Timer0 uses SYSCLK as source
    TMOD &= 0xF0;   // clear the 4 least significant bits
    TMOD |= 0x01;   // Timer0 in mode 1
    TR0 = 0;           // Stop Timer0
    TMR0 = 0;           // Clear high & low byte of T0

}


//***************
void Timer0_ISR(void) __interrupt 1
{
	Counts++;// add interrupt code here, in this lab, the code will increment the 
			// global variable 'counts'
}
//***************
void ADC_Init(void)
{
 	REF0CN = 0x03;  /* Set Vref to use internal reference voltage (2.4V) */
 	ADC1CN = 0x80;  /* Enable A/D converter (ADC1) */
 	ADC1CF |= 0x01; /* Set A/D converter gain to 1 */
}
//**************
unsigned char read_AD_input(unsigned char n)
{
 	AMX1SL = n; /* Set P1.n as the analog input for ADC1 */
 	ADC1CN = ADC1CN & ~0x20; /* Clear the “Conversion Completed” flag */
 	ADC1CN = ADC1CN | 0x10; /* Initiate A/D conversion */
 	while ((ADC1CN & 0x20) == 0x00); /* Wait for conversion to complete */
 	return ADC1; /* Return digital value in ADC1 register */
}

/******************************************************************************/
/*
  This function demonstrates how to obtain a random integer between 0 and 1 in
  C. You may modify and use this code to get a random integer between 0 and N.
*/

/*return a random integer number between 0 and 1*/
unsigned char random(unsigned char mode)
{
	if(mode == 0)        // rand returns a random number between 0 and 32767.
    	return rand()%4;   // return random 0,1,2,3
	if(mode == 1)		 
		return rand()%3+1;  //return random 1,2,3
    if(mode == 3)
    	return rand()%2; //returns 0 or 1 
    else
		return 4;                   
}


//***************
void clear(void)
{
	BILED1 = 1;  // Turn OFF the LEDs and Buzzer
	BILED2 = 1;
	LED0 = 1;
	LED1 = 1;
	LED2 = 1;
	LED3 = 1;
	BUZZER = 1;
}

//***************
void CDS(void)
{
	printf("Switch to your desired mode: \r\n \
		    mode 0  SS0(off)  SS1(off)   \r\n \
			mode 1  SS0(off)  SS1(on)    \r\n \
			mode 2  SS0(on)   SS1(off)   \r\n \
			mode 3  SS0(on)   SS1(on)    \r\n");
	printf("Press a key on your computer after the selection to start the game \r\n");
	input = getchar();
	if(SS0 && SS1)
	{
		printf("You are currently in mode 0, GL! \r\n");
		mode0();
	}
	else if(SS0 && !SS1)
	{	printf("You are currently in mode 1, CHA! CHA! \r\n");
		mode1();
	}
	else if(!SS0 && SS1)
	{
		printf("You are currently in mode 2, Emmmm... \r\n");
		mode2();
	}		
	else if(!SS0 && !SS1)
	{
		printf("You are currently in mode 3, wanna be faster? \r\n");
		mode3();
	}
}
//***************
void mode0(void)
{
}

//***************
void mode1(void)//currently easy mode1
{
	//explain rool, wait for a key press to start.
	printf("game rule\r\n");
	theBuzz();
	theBuzz();


	//this for loop create the rule for the game
	for(i = 0; i < 8; i++)
	{	
		light[i] = random(0);
		times[i] = random(1);
		//print the answer! don't look
		printf("%u|%u \r\n",light[i],times[i]);
	}

	//following code will run the game 8 times
	for(i = 0; i < 8; i++) //8 sequence of the game
	{	
		
		for(seq = 0; seq < i || seq == i; seq++)
			for(rep = 1; rep <= times[seq]; rep++)
				lightLED(light[seq]);
		theBuzz();//time to make selection	

		//checkLED method
		Counts = 0;
		TMR0 = 0;
		TR0 = 1;

		//each addition of new sequence, more time will be given for responses.
		for(seq = 0; seq < i || seq == i; seq++)
		{
			for(rep = 1; rep <= times[seq]; rep++)
			{
				do
				{
					if(Counts > (i+1)*speed)
					{
						printf("TIME OUT \r\n");
						break; //out off all loop
					}
				}
				while(PB0 && PB1 && PB2 && PB3);//TTTTTTTTTTTTT
				currLED = buttonPress();
				if(currLED != light[seq])
				{
					alive = 0;//you are dead
					printf("GAME OVER, you pressed %u,and your score is %u \r\n",currLED, score);
					//********need red light
					BILED1 = 0;
					theBuzz();//TTTTTTTTTTTTT
					BILED1 = 1;
					break;
				}
			}
			if(alive)
				score++;
			else
				break;
		}
		if(!alive)
		{
			TR0 = 0;
			break;
		}
		else//turn on green light for 1 sec
		{
			currCounts = Counts;
			BILED2 = 0;
			while(Counts < currCounts+337);//TTTTTTTTTTTTT
			BILED2 = 1;
			printf("correct \r\n");
		}

		TR0 = 0;
		//may be good game logo...
	}
	if(alive)
		printf("you successfully passed the game! \r\n");

}

//***************
void mode2(void)
{
	printf("\r Rule: \n");
	printf("\r Player 1 use pushbutton and potentiometer to create a sequence \n");
	printf("\r pushbutton indicate the LED and use potentiometer to adjust blinks \n");
	printf("\r then player2 play the game with preprogrammed sequence \n");
	while (1){

		Counts = 0;
		clear();
		printf("\r Push any button to start modification! \n");

		if (!PB0 || !PB1 || !PB2 || !PB3) {
			TR0 = 1;
			printf("\r Game start in 3 seconds \n");
			BUZZER = 0;
			while (Counts < 1011);
			BUZZER = 1;
			printf("\r game start \n");
			Counts = 0;
			printf("\r Player1's turn \n");
			// following code will run 8 times
			for (i = 0; i < 8; i++) {
				adc = read_AD_input(4);
				printf("\r Sequence %u \n", i);
				while (PB0 && PB1 && PB2 && PB3);
				if (!PB0) {
					whichLED = 0;
				}
				else if (!PB1) {
					whichLED = 1;
				}
				else if (!PB2) {
					whichLED = 2;
				}
				else if (!PB3) {
					whichLED = 3;
				}
				printf("\r LED %u \n", whichLED);
				//the chosen LED on for 1 second
				if (whichLED == 0) {
					Counts = 0;
					LED0 = 0;
					while (Counts < 337);
					LED0 = 1;
				}
				else if (whichLED == 1) {
					Counts = 0;
					LED1 = 0;
					while (Counts < 337);
					LED1 = 1;
				}
				else if (whichLED == 2) {
					Counts = 0;
					LED2 = 0;
					while (Counts < 337);
					LED2 = 1;
				}
				else if (whichLED == 3) {
					Counts = 0;
					LED3 = 0;
					while (Counts < 337);
					LED3 = 1;
				}
				Counts = 0;
				while (Counts < 337 * 2);
				if (adc < 85) {
					blink = 1;
					LED0 = 0;
				}
				else if (adc > 85 && adc < 170) {
					blink = 2;
					LED0 = 0;
					LED1 = 0;
				}
				else if (adc > 170) {
					blink = 3;
					LED0 = 0;
					LED1 = 0;
					LED2 = 0;
				}

				Counts = 0;
				printf("\r next sequence start in 2 seconds\n");
				while (Counts < 337 * 2);
				Counts = 0;
				light[i] = whichLED;
				times[i] = blink;
				clear();
				while (Counts < 337 / 2);
			}
			Counts = 0;
			LED0 = 0;
			LED1 = 0;
			LED2 = 0;
			LED3 = 0;
			while (Counts < 337);
			clear();
			break;

		}
	}
	for (i = 0; i < 8; i++) {
		printf("%u|%u \r\n", light[i], times[i]);
	}
	Counts = 0;
	printf("\r Player2's turn start in 10 seconds \n");
	while (Counts < 3370);
	game();
}


//***************
void mode3(void)
{
	printf("game rule\r\n");
	theBuzz();
	clear();
	Counts = 0; //Reset Counter

	//SET BLINK RATE
	printf("\rSet blink rate, then press PB0\n\r");
	
	TR0 = 1; //Turn on timer
	while(PB0)
	{
		currCounts = Counts; 
		while(Counts < 7+currCounts); //Debounce
		ADresult = read_AD_input(4); //read AD input from pin1.4
		blink_rate = ((ADresult*0.95/255.0)+1.0); //Convert to ADresult to speed
	}
	
	printf("\rBlink Rate: %d\n\r", blink_rate);
	
	
	LED0 = 0; //LED0 on
	while(Counts < speed*blink_rate);
	LED0 = 1; //LED0 off
	
	currCounts = Counts; 
	while(Counts < 50+currCounts); //Debounce
	
	//SET DELAY
	printf("\rSet Delay, then press PB0\n\r");
	while(PB0)
	{
		//printf("\rSet Delay\n\r");
		ADresult = read_AD_input(4);
		delay = ((ADresult*7.0/255.0)+1.0);
	}
	
	printf("Delay: %u \n\r", delay);
    
    Counts = 0; //reset counter
	LED0 = 0; //LED0 on
	while(Counts < speed*0.5);
	LED0 = 1; //LED0 off
	while(Counts < (speed*(delay+0.5)));
	LED0 = 0;
	while(Counts < 337*0.5);
	LED0 = 1; //LED0 off

	//SETTING UP THE GAME-------------------------------------------
	
	
	printf("\rBeginning the Game\n\r");

	for(i = 0; i < 5; i++)
	{
		TR0 = 1;
		led_on = random(1);
		lightLEDmode3(led_on);

		if(buttonPress() == led_on)
		{
			//********need green light
			BILED2 = 0;
			theBuzz();//TTTTTTTTTTTTT
			BILED2 = 1;
			score++;
		}
		else
		{
			//********need red light
			BILED1 = 0;
			theBuzz();//TTTTTTTTTTTTT
			BILED1 = 1;
		}
	}

	printf("score: %d\n", score);
	theBuzz();
	clear();
	TR0 = 0; //Turn off everything
	TMR0 = 0;
	delay = 0;
	speed = 0;

	Counts = 0; 
}




//***************
void theBuzz(void)
{
	TMR0 = 0;
	TR0 = 1;
	Counts = 0;
	while(Counts<337/2);
	BUZZER = 0; //Turn Buzzer on
	while(Counts<337);
	BUZZER = 1;
	TR0 = 0;

}

//***************
void lightLED(unsigned char num)
{
	Counts = 0; //clear whole timer sys
	TMR0 = 0;
	TR0 = 1; //start timer0

	while(Counts < speed/3);//give speed/3 between each light.
		
	if(num == 0)
		LED0 = 0;
	else if(num == 1)
		LED1 = 0;
	else if(num == 2)
		LED2 = 0;
	else if(num == 3)
		LED3 = 0;
	//light is up, now hold of "speed"/2 amount of time
	while(Counts < speed/2+speed/3);
	clear();
	TR0 = 0;//stop the timer0
	Counts = 0;
}


//***************

void lightLEDmode3(unsigned char num)
{
	Counts = 0; //clear whole timer sys
	TMR0 = 0;
	//TR0 = 1; //start timer0

	while(Counts < speed*delay);//give speed/3 between each light.
		
	if(num == 0)
		LED0 = 0;
	else if(num == 1)
		LED1 = 0;
	else if(num == 2)
		LED2 = 0;
	else if(num == 3)
		LED3 = 0;
	//light is up
	Counts = 0;
	while(Counts < speed*(blink_rate));
	clear();
	//TR0 = 0;//stop the timer0
}


//***************
unsigned char buttonPress(void)
{
	currCounts = Counts;
	while(Counts < 7+currCounts);
	if(!PB0 && PB1 && PB2 && PB3)
	{
		printf("PB0 \r\n");
		while(!PB0);
		return 0;
	}
	else if(PB0 && !PB1 && PB2 && PB3)
	{
		printf("PB1 \r\n");
		while(!PB1);
		return 1;	
	}
	else if(PB0 && PB1 && !PB2 && PB3)
	{
		printf("PB2 \r\n");
		while(!PB2);
		return 2;
	}
	else if(PB0 && PB1 && PB2 && !PB3)
	{
		printf("PB3 \r\n");
		while(!PB3);
		return 3;
	}
	else
		return 4;		
}

//***********
void game(void) {
	//folloing code will run the game 8 times
	for (i = 0; i < 8; i++) //8 sequence of the game
	{

		for (seq = 0; seq < i || seq == i; seq++)
			for (rep = 1; rep <= times[seq]; rep++)
				lightLED(light[seq]);
		theBuzz();//time to make selection	

				  //checkLED method
		Counts = 0;
		TMR0 = 0;
		TR0 = 1;

		//each addition of new sequence, more time will be given for responses.
		for (seq = 0; seq < i || seq == i; seq++)
		{
			for (rep = 1; rep <= times[seq]; rep++)
			{
				do
				{
					if (Counts >(i + 1)*speed)
					{
						printf("TIME OUT \r\n");
						break; //out off all loop
					}
				} while (PB0 && PB1 && PB2 && PB3);//TTTTTTTTTTTTT
				currLED = buttonPress();
				if (currLED != light[seq])
				{
					alive = 0;//you are dead
					printf("GAME OVER, you pressed %u,and your score is %u \r\n", currLED, score);
					//********need red light
					BILED1 = 0;
					theBuzz();//TTTTTTTTTTTTT
					BILED1 = 1;
					break;
				}
			}
			if (alive)
				score++;
			else
				break;
		}
		if (!alive)
		{
			TR0 = 0;
			break;
		}
		else//turn on green light for 1 sec
		{
			currCounts = Counts;
			BILED2 = 0;
			while (Counts < currCounts + 337);//TTTTTTTTTTTTT
			BILED2 = 1;
			printf("correct \r\n");
		}

		TR0 = 0;
		//may be good game logo...
	}
	if (alive)
		printf("you successfully passed the game! \r\n");

}
