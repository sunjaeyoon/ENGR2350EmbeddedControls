                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module worksheet_11
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 	.globl _printf
                                     15 	.globl _getchar_nw
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _SPIF
                                     20 	.globl _WCOL
                                     21 	.globl _MODF
                                     22 	.globl _RXOVRN
                                     23 	.globl _TXBSY
                                     24 	.globl _SLVSEL
                                     25 	.globl _MSTEN
                                     26 	.globl _SPIEN
                                     27 	.globl _AD0EN
                                     28 	.globl _ADCEN
                                     29 	.globl _AD0TM
                                     30 	.globl _ADCTM
                                     31 	.globl _AD0INT
                                     32 	.globl _ADCINT
                                     33 	.globl _AD0BUSY
                                     34 	.globl _ADBUSY
                                     35 	.globl _AD0CM1
                                     36 	.globl _ADSTM1
                                     37 	.globl _AD0CM0
                                     38 	.globl _ADSTM0
                                     39 	.globl _AD0WINT
                                     40 	.globl _ADWINT
                                     41 	.globl _AD0LJST
                                     42 	.globl _ADLJST
                                     43 	.globl _CF
                                     44 	.globl _CR
                                     45 	.globl _CCF4
                                     46 	.globl _CCF3
                                     47 	.globl _CCF2
                                     48 	.globl _CCF1
                                     49 	.globl _CCF0
                                     50 	.globl _CY
                                     51 	.globl _AC
                                     52 	.globl _F0
                                     53 	.globl _RS1
                                     54 	.globl _RS0
                                     55 	.globl _OV
                                     56 	.globl _F1
                                     57 	.globl _P
                                     58 	.globl _TF2
                                     59 	.globl _EXF2
                                     60 	.globl _RCLK
                                     61 	.globl _TCLK
                                     62 	.globl _EXEN2
                                     63 	.globl _TR2
                                     64 	.globl _CT2
                                     65 	.globl _CPRL2
                                     66 	.globl _BUSY
                                     67 	.globl _ENSMB
                                     68 	.globl _STA
                                     69 	.globl _STO
                                     70 	.globl _SI
                                     71 	.globl _AA
                                     72 	.globl _SMBFTE
                                     73 	.globl _SMBTOE
                                     74 	.globl _PT2
                                     75 	.globl _PS
                                     76 	.globl _PS0
                                     77 	.globl _PT1
                                     78 	.globl _PX1
                                     79 	.globl _PT0
                                     80 	.globl _PX0
                                     81 	.globl _P3_7
                                     82 	.globl _P3_6
                                     83 	.globl _P3_5
                                     84 	.globl _P3_4
                                     85 	.globl _P3_3
                                     86 	.globl _P3_2
                                     87 	.globl _P3_1
                                     88 	.globl _P3_0
                                     89 	.globl _EA
                                     90 	.globl _ET2
                                     91 	.globl _ES
                                     92 	.globl _ES0
                                     93 	.globl _ET1
                                     94 	.globl _EX1
                                     95 	.globl _ET0
                                     96 	.globl _EX0
                                     97 	.globl _P2_7
                                     98 	.globl _P2_6
                                     99 	.globl _P2_5
                                    100 	.globl _P2_4
                                    101 	.globl _P2_3
                                    102 	.globl _P2_2
                                    103 	.globl _P2_1
                                    104 	.globl _P2_0
                                    105 	.globl _S0MODE
                                    106 	.globl _SM00
                                    107 	.globl _SM0
                                    108 	.globl _SM10
                                    109 	.globl _SM1
                                    110 	.globl _MCE0
                                    111 	.globl _SM20
                                    112 	.globl _SM2
                                    113 	.globl _REN0
                                    114 	.globl _REN
                                    115 	.globl _TB80
                                    116 	.globl _TB8
                                    117 	.globl _RB80
                                    118 	.globl _RB8
                                    119 	.globl _TI0
                                    120 	.globl _TI
                                    121 	.globl _RI0
                                    122 	.globl _RI
                                    123 	.globl _P1_7
                                    124 	.globl _P1_6
                                    125 	.globl _P1_5
                                    126 	.globl _P1_4
                                    127 	.globl _P1_3
                                    128 	.globl _P1_2
                                    129 	.globl _P1_1
                                    130 	.globl _P1_0
                                    131 	.globl _TF1
                                    132 	.globl _TR1
                                    133 	.globl _TF0
                                    134 	.globl _TR0
                                    135 	.globl _IE1
                                    136 	.globl _IT1
                                    137 	.globl _IE0
                                    138 	.globl _IT0
                                    139 	.globl _P0_7
                                    140 	.globl _P0_6
                                    141 	.globl _P0_5
                                    142 	.globl _P0_4
                                    143 	.globl _P0_3
                                    144 	.globl _P0_2
                                    145 	.globl _P0_1
                                    146 	.globl _P0_0
                                    147 	.globl _PCA0CP4
                                    148 	.globl _PCA0CP3
                                    149 	.globl _PCA0CP2
                                    150 	.globl _PCA0CP1
                                    151 	.globl _PCA0CP0
                                    152 	.globl _PCA0
                                    153 	.globl _DAC1
                                    154 	.globl _DAC0
                                    155 	.globl _ADC0LT
                                    156 	.globl _ADC0GT
                                    157 	.globl _ADC0
                                    158 	.globl _RCAP4
                                    159 	.globl _TMR4
                                    160 	.globl _TMR3RL
                                    161 	.globl _TMR3
                                    162 	.globl _RCAP2
                                    163 	.globl _TMR2
                                    164 	.globl _TMR1
                                    165 	.globl _TMR0
                                    166 	.globl _WDTCN
                                    167 	.globl _PCA0CPH4
                                    168 	.globl _PCA0CPH3
                                    169 	.globl _PCA0CPH2
                                    170 	.globl _PCA0CPH1
                                    171 	.globl _PCA0CPH0
                                    172 	.globl _PCA0H
                                    173 	.globl _SPI0CN
                                    174 	.globl _EIP2
                                    175 	.globl _EIP1
                                    176 	.globl _TH4
                                    177 	.globl _TL4
                                    178 	.globl _SADDR1
                                    179 	.globl _SBUF1
                                    180 	.globl _SCON1
                                    181 	.globl _B
                                    182 	.globl _RSTSRC
                                    183 	.globl _PCA0CPL4
                                    184 	.globl _PCA0CPL3
                                    185 	.globl _PCA0CPL2
                                    186 	.globl _PCA0CPL1
                                    187 	.globl _PCA0CPL0
                                    188 	.globl _PCA0L
                                    189 	.globl _ADC0CN
                                    190 	.globl _EIE2
                                    191 	.globl _EIE1
                                    192 	.globl _RCAP4H
                                    193 	.globl _RCAP4L
                                    194 	.globl _XBR2
                                    195 	.globl _XBR1
                                    196 	.globl _XBR0
                                    197 	.globl _ACC
                                    198 	.globl _PCA0CPM4
                                    199 	.globl _PCA0CPM3
                                    200 	.globl _PCA0CPM2
                                    201 	.globl _PCA0CPM1
                                    202 	.globl _PCA0CPM0
                                    203 	.globl _PCA0MD
                                    204 	.globl _PCA0CN
                                    205 	.globl _DAC1CN
                                    206 	.globl _DAC1H
                                    207 	.globl _DAC1L
                                    208 	.globl _DAC0CN
                                    209 	.globl _DAC0H
                                    210 	.globl _DAC0L
                                    211 	.globl _REF0CN
                                    212 	.globl _PSW
                                    213 	.globl _SMB0CR
                                    214 	.globl _TH2
                                    215 	.globl _TL2
                                    216 	.globl _RCAP2H
                                    217 	.globl _RCAP2L
                                    218 	.globl _T4CON
                                    219 	.globl _T2CON
                                    220 	.globl _ADC0LTH
                                    221 	.globl _ADC0LTL
                                    222 	.globl _ADC0GTH
                                    223 	.globl _ADC0GTL
                                    224 	.globl _SMB0ADR
                                    225 	.globl _SMB0DAT
                                    226 	.globl _SMB0STA
                                    227 	.globl _SMB0CN
                                    228 	.globl _ADC0H
                                    229 	.globl _ADC0L
                                    230 	.globl _P1MDIN
                                    231 	.globl _ADC0CF
                                    232 	.globl _AMX0SL
                                    233 	.globl _AMX0CF
                                    234 	.globl _SADEN0
                                    235 	.globl _IP
                                    236 	.globl _FLACL
                                    237 	.globl _FLSCL
                                    238 	.globl _P74OUT
                                    239 	.globl _OSCICN
                                    240 	.globl _OSCXCN
                                    241 	.globl _P3
                                    242 	.globl __XPAGE
                                    243 	.globl _EMI0CN
                                    244 	.globl _SADEN1
                                    245 	.globl _P3IF
                                    246 	.globl _AMX1SL
                                    247 	.globl _ADC1CF
                                    248 	.globl _ADC1CN
                                    249 	.globl _SADDR0
                                    250 	.globl _IE
                                    251 	.globl _P3MDOUT
                                    252 	.globl _PRT3CF
                                    253 	.globl _P2MDOUT
                                    254 	.globl _PRT2CF
                                    255 	.globl _P1MDOUT
                                    256 	.globl _PRT1CF
                                    257 	.globl _P0MDOUT
                                    258 	.globl _PRT0CF
                                    259 	.globl _EMI0CF
                                    260 	.globl _EMI0TC
                                    261 	.globl _P2
                                    262 	.globl _CPT1CN
                                    263 	.globl _CPT0CN
                                    264 	.globl _SPI0CKR
                                    265 	.globl _ADC1
                                    266 	.globl _SPI0DAT
                                    267 	.globl _SPI0CFG
                                    268 	.globl _SBUF0
                                    269 	.globl _SBUF
                                    270 	.globl _SCON0
                                    271 	.globl _SCON
                                    272 	.globl _P7
                                    273 	.globl _TMR3H
                                    274 	.globl _TMR3L
                                    275 	.globl _TMR3RLH
                                    276 	.globl _TMR3RLL
                                    277 	.globl _TMR3CN
                                    278 	.globl _P1
                                    279 	.globl _PSCTL
                                    280 	.globl _CKCON
                                    281 	.globl _TH1
                                    282 	.globl _TH0
                                    283 	.globl _TL1
                                    284 	.globl _TL0
                                    285 	.globl _TMOD
                                    286 	.globl _TCON
                                    287 	.globl _PCON
                                    288 	.globl _P6
                                    289 	.globl _P5
                                    290 	.globl _P4
                                    291 	.globl _DPH
                                    292 	.globl _DPL
                                    293 	.globl _SP
                                    294 	.globl _P0
                                    295 	.globl _temp_motorpw_alg6
                                    296 	.globl _temp_motorpw_alg5
                                    297 	.globl _temp_motorpw_alg4
                                    298 	.globl _temp_motorpw_alg3
                                    299 	.globl _temp_motorpw_alg2
                                    300 	.globl _temp_motorpw_alg1
                                    301 	.globl _temp_motorpw_2byte
                                    302 	.globl _error
                                    303 	.globl _previous_error
                                    304 	.globl _pw_neut
                                    305 	.globl _kd
                                    306 	.globl _kp
                                    307 	.globl _actual
                                    308 	.globl _desired
                                    309 ;--------------------------------------------------------
                                    310 ; special function registers
                                    311 ;--------------------------------------------------------
                                    312 	.area RSEG    (ABS,DATA)
      000000                        313 	.org 0x0000
                           000080   314 G$P0$0$0 == 0x0080
                           000080   315 _P0	=	0x0080
                           000081   316 G$SP$0$0 == 0x0081
                           000081   317 _SP	=	0x0081
                           000082   318 G$DPL$0$0 == 0x0082
                           000082   319 _DPL	=	0x0082
                           000083   320 G$DPH$0$0 == 0x0083
                           000083   321 _DPH	=	0x0083
                           000084   322 G$P4$0$0 == 0x0084
                           000084   323 _P4	=	0x0084
                           000085   324 G$P5$0$0 == 0x0085
                           000085   325 _P5	=	0x0085
                           000086   326 G$P6$0$0 == 0x0086
                           000086   327 _P6	=	0x0086
                           000087   328 G$PCON$0$0 == 0x0087
                           000087   329 _PCON	=	0x0087
                           000088   330 G$TCON$0$0 == 0x0088
                           000088   331 _TCON	=	0x0088
                           000089   332 G$TMOD$0$0 == 0x0089
                           000089   333 _TMOD	=	0x0089
                           00008A   334 G$TL0$0$0 == 0x008a
                           00008A   335 _TL0	=	0x008a
                           00008B   336 G$TL1$0$0 == 0x008b
                           00008B   337 _TL1	=	0x008b
                           00008C   338 G$TH0$0$0 == 0x008c
                           00008C   339 _TH0	=	0x008c
                           00008D   340 G$TH1$0$0 == 0x008d
                           00008D   341 _TH1	=	0x008d
                           00008E   342 G$CKCON$0$0 == 0x008e
                           00008E   343 _CKCON	=	0x008e
                           00008F   344 G$PSCTL$0$0 == 0x008f
                           00008F   345 _PSCTL	=	0x008f
                           000090   346 G$P1$0$0 == 0x0090
                           000090   347 _P1	=	0x0090
                           000091   348 G$TMR3CN$0$0 == 0x0091
                           000091   349 _TMR3CN	=	0x0091
                           000092   350 G$TMR3RLL$0$0 == 0x0092
                           000092   351 _TMR3RLL	=	0x0092
                           000093   352 G$TMR3RLH$0$0 == 0x0093
                           000093   353 _TMR3RLH	=	0x0093
                           000094   354 G$TMR3L$0$0 == 0x0094
                           000094   355 _TMR3L	=	0x0094
                           000095   356 G$TMR3H$0$0 == 0x0095
                           000095   357 _TMR3H	=	0x0095
                           000096   358 G$P7$0$0 == 0x0096
                           000096   359 _P7	=	0x0096
                           000098   360 G$SCON$0$0 == 0x0098
                           000098   361 _SCON	=	0x0098
                           000098   362 G$SCON0$0$0 == 0x0098
                           000098   363 _SCON0	=	0x0098
                           000099   364 G$SBUF$0$0 == 0x0099
                           000099   365 _SBUF	=	0x0099
                           000099   366 G$SBUF0$0$0 == 0x0099
                           000099   367 _SBUF0	=	0x0099
                           00009A   368 G$SPI0CFG$0$0 == 0x009a
                           00009A   369 _SPI0CFG	=	0x009a
                           00009B   370 G$SPI0DAT$0$0 == 0x009b
                           00009B   371 _SPI0DAT	=	0x009b
                           00009C   372 G$ADC1$0$0 == 0x009c
                           00009C   373 _ADC1	=	0x009c
                           00009D   374 G$SPI0CKR$0$0 == 0x009d
                           00009D   375 _SPI0CKR	=	0x009d
                           00009E   376 G$CPT0CN$0$0 == 0x009e
                           00009E   377 _CPT0CN	=	0x009e
                           00009F   378 G$CPT1CN$0$0 == 0x009f
                           00009F   379 _CPT1CN	=	0x009f
                           0000A0   380 G$P2$0$0 == 0x00a0
                           0000A0   381 _P2	=	0x00a0
                           0000A1   382 G$EMI0TC$0$0 == 0x00a1
                           0000A1   383 _EMI0TC	=	0x00a1
                           0000A3   384 G$EMI0CF$0$0 == 0x00a3
                           0000A3   385 _EMI0CF	=	0x00a3
                           0000A4   386 G$PRT0CF$0$0 == 0x00a4
                           0000A4   387 _PRT0CF	=	0x00a4
                           0000A4   388 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   389 _P0MDOUT	=	0x00a4
                           0000A5   390 G$PRT1CF$0$0 == 0x00a5
                           0000A5   391 _PRT1CF	=	0x00a5
                           0000A5   392 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   393 _P1MDOUT	=	0x00a5
                           0000A6   394 G$PRT2CF$0$0 == 0x00a6
                           0000A6   395 _PRT2CF	=	0x00a6
                           0000A6   396 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   397 _P2MDOUT	=	0x00a6
                           0000A7   398 G$PRT3CF$0$0 == 0x00a7
                           0000A7   399 _PRT3CF	=	0x00a7
                           0000A7   400 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   401 _P3MDOUT	=	0x00a7
                           0000A8   402 G$IE$0$0 == 0x00a8
                           0000A8   403 _IE	=	0x00a8
                           0000A9   404 G$SADDR0$0$0 == 0x00a9
                           0000A9   405 _SADDR0	=	0x00a9
                           0000AA   406 G$ADC1CN$0$0 == 0x00aa
                           0000AA   407 _ADC1CN	=	0x00aa
                           0000AB   408 G$ADC1CF$0$0 == 0x00ab
                           0000AB   409 _ADC1CF	=	0x00ab
                           0000AC   410 G$AMX1SL$0$0 == 0x00ac
                           0000AC   411 _AMX1SL	=	0x00ac
                           0000AD   412 G$P3IF$0$0 == 0x00ad
                           0000AD   413 _P3IF	=	0x00ad
                           0000AE   414 G$SADEN1$0$0 == 0x00ae
                           0000AE   415 _SADEN1	=	0x00ae
                           0000AF   416 G$EMI0CN$0$0 == 0x00af
                           0000AF   417 _EMI0CN	=	0x00af
                           0000AF   418 G$_XPAGE$0$0 == 0x00af
                           0000AF   419 __XPAGE	=	0x00af
                           0000B0   420 G$P3$0$0 == 0x00b0
                           0000B0   421 _P3	=	0x00b0
                           0000B1   422 G$OSCXCN$0$0 == 0x00b1
                           0000B1   423 _OSCXCN	=	0x00b1
                           0000B2   424 G$OSCICN$0$0 == 0x00b2
                           0000B2   425 _OSCICN	=	0x00b2
                           0000B5   426 G$P74OUT$0$0 == 0x00b5
                           0000B5   427 _P74OUT	=	0x00b5
                           0000B6   428 G$FLSCL$0$0 == 0x00b6
                           0000B6   429 _FLSCL	=	0x00b6
                           0000B7   430 G$FLACL$0$0 == 0x00b7
                           0000B7   431 _FLACL	=	0x00b7
                           0000B8   432 G$IP$0$0 == 0x00b8
                           0000B8   433 _IP	=	0x00b8
                           0000B9   434 G$SADEN0$0$0 == 0x00b9
                           0000B9   435 _SADEN0	=	0x00b9
                           0000BA   436 G$AMX0CF$0$0 == 0x00ba
                           0000BA   437 _AMX0CF	=	0x00ba
                           0000BB   438 G$AMX0SL$0$0 == 0x00bb
                           0000BB   439 _AMX0SL	=	0x00bb
                           0000BC   440 G$ADC0CF$0$0 == 0x00bc
                           0000BC   441 _ADC0CF	=	0x00bc
                           0000BD   442 G$P1MDIN$0$0 == 0x00bd
                           0000BD   443 _P1MDIN	=	0x00bd
                           0000BE   444 G$ADC0L$0$0 == 0x00be
                           0000BE   445 _ADC0L	=	0x00be
                           0000BF   446 G$ADC0H$0$0 == 0x00bf
                           0000BF   447 _ADC0H	=	0x00bf
                           0000C0   448 G$SMB0CN$0$0 == 0x00c0
                           0000C0   449 _SMB0CN	=	0x00c0
                           0000C1   450 G$SMB0STA$0$0 == 0x00c1
                           0000C1   451 _SMB0STA	=	0x00c1
                           0000C2   452 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   453 _SMB0DAT	=	0x00c2
                           0000C3   454 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   455 _SMB0ADR	=	0x00c3
                           0000C4   456 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   457 _ADC0GTL	=	0x00c4
                           0000C5   458 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   459 _ADC0GTH	=	0x00c5
                           0000C6   460 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   461 _ADC0LTL	=	0x00c6
                           0000C7   462 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   463 _ADC0LTH	=	0x00c7
                           0000C8   464 G$T2CON$0$0 == 0x00c8
                           0000C8   465 _T2CON	=	0x00c8
                           0000C9   466 G$T4CON$0$0 == 0x00c9
                           0000C9   467 _T4CON	=	0x00c9
                           0000CA   468 G$RCAP2L$0$0 == 0x00ca
                           0000CA   469 _RCAP2L	=	0x00ca
                           0000CB   470 G$RCAP2H$0$0 == 0x00cb
                           0000CB   471 _RCAP2H	=	0x00cb
                           0000CC   472 G$TL2$0$0 == 0x00cc
                           0000CC   473 _TL2	=	0x00cc
                           0000CD   474 G$TH2$0$0 == 0x00cd
                           0000CD   475 _TH2	=	0x00cd
                           0000CF   476 G$SMB0CR$0$0 == 0x00cf
                           0000CF   477 _SMB0CR	=	0x00cf
                           0000D0   478 G$PSW$0$0 == 0x00d0
                           0000D0   479 _PSW	=	0x00d0
                           0000D1   480 G$REF0CN$0$0 == 0x00d1
                           0000D1   481 _REF0CN	=	0x00d1
                           0000D2   482 G$DAC0L$0$0 == 0x00d2
                           0000D2   483 _DAC0L	=	0x00d2
                           0000D3   484 G$DAC0H$0$0 == 0x00d3
                           0000D3   485 _DAC0H	=	0x00d3
                           0000D4   486 G$DAC0CN$0$0 == 0x00d4
                           0000D4   487 _DAC0CN	=	0x00d4
                           0000D5   488 G$DAC1L$0$0 == 0x00d5
                           0000D5   489 _DAC1L	=	0x00d5
                           0000D6   490 G$DAC1H$0$0 == 0x00d6
                           0000D6   491 _DAC1H	=	0x00d6
                           0000D7   492 G$DAC1CN$0$0 == 0x00d7
                           0000D7   493 _DAC1CN	=	0x00d7
                           0000D8   494 G$PCA0CN$0$0 == 0x00d8
                           0000D8   495 _PCA0CN	=	0x00d8
                           0000D9   496 G$PCA0MD$0$0 == 0x00d9
                           0000D9   497 _PCA0MD	=	0x00d9
                           0000DA   498 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   499 _PCA0CPM0	=	0x00da
                           0000DB   500 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   501 _PCA0CPM1	=	0x00db
                           0000DC   502 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   503 _PCA0CPM2	=	0x00dc
                           0000DD   504 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   505 _PCA0CPM3	=	0x00dd
                           0000DE   506 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   507 _PCA0CPM4	=	0x00de
                           0000E0   508 G$ACC$0$0 == 0x00e0
                           0000E0   509 _ACC	=	0x00e0
                           0000E1   510 G$XBR0$0$0 == 0x00e1
                           0000E1   511 _XBR0	=	0x00e1
                           0000E2   512 G$XBR1$0$0 == 0x00e2
                           0000E2   513 _XBR1	=	0x00e2
                           0000E3   514 G$XBR2$0$0 == 0x00e3
                           0000E3   515 _XBR2	=	0x00e3
                           0000E4   516 G$RCAP4L$0$0 == 0x00e4
                           0000E4   517 _RCAP4L	=	0x00e4
                           0000E5   518 G$RCAP4H$0$0 == 0x00e5
                           0000E5   519 _RCAP4H	=	0x00e5
                           0000E6   520 G$EIE1$0$0 == 0x00e6
                           0000E6   521 _EIE1	=	0x00e6
                           0000E7   522 G$EIE2$0$0 == 0x00e7
                           0000E7   523 _EIE2	=	0x00e7
                           0000E8   524 G$ADC0CN$0$0 == 0x00e8
                           0000E8   525 _ADC0CN	=	0x00e8
                           0000E9   526 G$PCA0L$0$0 == 0x00e9
                           0000E9   527 _PCA0L	=	0x00e9
                           0000EA   528 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   529 _PCA0CPL0	=	0x00ea
                           0000EB   530 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   531 _PCA0CPL1	=	0x00eb
                           0000EC   532 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   533 _PCA0CPL2	=	0x00ec
                           0000ED   534 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   535 _PCA0CPL3	=	0x00ed
                           0000EE   536 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   537 _PCA0CPL4	=	0x00ee
                           0000EF   538 G$RSTSRC$0$0 == 0x00ef
                           0000EF   539 _RSTSRC	=	0x00ef
                           0000F0   540 G$B$0$0 == 0x00f0
                           0000F0   541 _B	=	0x00f0
                           0000F1   542 G$SCON1$0$0 == 0x00f1
                           0000F1   543 _SCON1	=	0x00f1
                           0000F2   544 G$SBUF1$0$0 == 0x00f2
                           0000F2   545 _SBUF1	=	0x00f2
                           0000F3   546 G$SADDR1$0$0 == 0x00f3
                           0000F3   547 _SADDR1	=	0x00f3
                           0000F4   548 G$TL4$0$0 == 0x00f4
                           0000F4   549 _TL4	=	0x00f4
                           0000F5   550 G$TH4$0$0 == 0x00f5
                           0000F5   551 _TH4	=	0x00f5
                           0000F6   552 G$EIP1$0$0 == 0x00f6
                           0000F6   553 _EIP1	=	0x00f6
                           0000F7   554 G$EIP2$0$0 == 0x00f7
                           0000F7   555 _EIP2	=	0x00f7
                           0000F8   556 G$SPI0CN$0$0 == 0x00f8
                           0000F8   557 _SPI0CN	=	0x00f8
                           0000F9   558 G$PCA0H$0$0 == 0x00f9
                           0000F9   559 _PCA0H	=	0x00f9
                           0000FA   560 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   561 _PCA0CPH0	=	0x00fa
                           0000FB   562 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   563 _PCA0CPH1	=	0x00fb
                           0000FC   564 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   565 _PCA0CPH2	=	0x00fc
                           0000FD   566 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   567 _PCA0CPH3	=	0x00fd
                           0000FE   568 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   569 _PCA0CPH4	=	0x00fe
                           0000FF   570 G$WDTCN$0$0 == 0x00ff
                           0000FF   571 _WDTCN	=	0x00ff
                           008C8A   572 G$TMR0$0$0 == 0x8c8a
                           008C8A   573 _TMR0	=	0x8c8a
                           008D8B   574 G$TMR1$0$0 == 0x8d8b
                           008D8B   575 _TMR1	=	0x8d8b
                           00CDCC   576 G$TMR2$0$0 == 0xcdcc
                           00CDCC   577 _TMR2	=	0xcdcc
                           00CBCA   578 G$RCAP2$0$0 == 0xcbca
                           00CBCA   579 _RCAP2	=	0xcbca
                           009594   580 G$TMR3$0$0 == 0x9594
                           009594   581 _TMR3	=	0x9594
                           009392   582 G$TMR3RL$0$0 == 0x9392
                           009392   583 _TMR3RL	=	0x9392
                           00F5F4   584 G$TMR4$0$0 == 0xf5f4
                           00F5F4   585 _TMR4	=	0xf5f4
                           00E5E4   586 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   587 _RCAP4	=	0xe5e4
                           00BFBE   588 G$ADC0$0$0 == 0xbfbe
                           00BFBE   589 _ADC0	=	0xbfbe
                           00C5C4   590 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   591 _ADC0GT	=	0xc5c4
                           00C7C6   592 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   593 _ADC0LT	=	0xc7c6
                           00D3D2   594 G$DAC0$0$0 == 0xd3d2
                           00D3D2   595 _DAC0	=	0xd3d2
                           00D6D5   596 G$DAC1$0$0 == 0xd6d5
                           00D6D5   597 _DAC1	=	0xd6d5
                           00F9E9   598 G$PCA0$0$0 == 0xf9e9
                           00F9E9   599 _PCA0	=	0xf9e9
                           00FAEA   600 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   601 _PCA0CP0	=	0xfaea
                           00FBEB   602 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   603 _PCA0CP1	=	0xfbeb
                           00FCEC   604 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   605 _PCA0CP2	=	0xfcec
                           00FDED   606 G$PCA0CP3$0$0 == 0xfded
                           00FDED   607 _PCA0CP3	=	0xfded
                           00FEEE   608 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   609 _PCA0CP4	=	0xfeee
                                    610 ;--------------------------------------------------------
                                    611 ; special function bits
                                    612 ;--------------------------------------------------------
                                    613 	.area RSEG    (ABS,DATA)
      000000                        614 	.org 0x0000
                           000080   615 G$P0_0$0$0 == 0x0080
                           000080   616 _P0_0	=	0x0080
                           000081   617 G$P0_1$0$0 == 0x0081
                           000081   618 _P0_1	=	0x0081
                           000082   619 G$P0_2$0$0 == 0x0082
                           000082   620 _P0_2	=	0x0082
                           000083   621 G$P0_3$0$0 == 0x0083
                           000083   622 _P0_3	=	0x0083
                           000084   623 G$P0_4$0$0 == 0x0084
                           000084   624 _P0_4	=	0x0084
                           000085   625 G$P0_5$0$0 == 0x0085
                           000085   626 _P0_5	=	0x0085
                           000086   627 G$P0_6$0$0 == 0x0086
                           000086   628 _P0_6	=	0x0086
                           000087   629 G$P0_7$0$0 == 0x0087
                           000087   630 _P0_7	=	0x0087
                           000088   631 G$IT0$0$0 == 0x0088
                           000088   632 _IT0	=	0x0088
                           000089   633 G$IE0$0$0 == 0x0089
                           000089   634 _IE0	=	0x0089
                           00008A   635 G$IT1$0$0 == 0x008a
                           00008A   636 _IT1	=	0x008a
                           00008B   637 G$IE1$0$0 == 0x008b
                           00008B   638 _IE1	=	0x008b
                           00008C   639 G$TR0$0$0 == 0x008c
                           00008C   640 _TR0	=	0x008c
                           00008D   641 G$TF0$0$0 == 0x008d
                           00008D   642 _TF0	=	0x008d
                           00008E   643 G$TR1$0$0 == 0x008e
                           00008E   644 _TR1	=	0x008e
                           00008F   645 G$TF1$0$0 == 0x008f
                           00008F   646 _TF1	=	0x008f
                           000090   647 G$P1_0$0$0 == 0x0090
                           000090   648 _P1_0	=	0x0090
                           000091   649 G$P1_1$0$0 == 0x0091
                           000091   650 _P1_1	=	0x0091
                           000092   651 G$P1_2$0$0 == 0x0092
                           000092   652 _P1_2	=	0x0092
                           000093   653 G$P1_3$0$0 == 0x0093
                           000093   654 _P1_3	=	0x0093
                           000094   655 G$P1_4$0$0 == 0x0094
                           000094   656 _P1_4	=	0x0094
                           000095   657 G$P1_5$0$0 == 0x0095
                           000095   658 _P1_5	=	0x0095
                           000096   659 G$P1_6$0$0 == 0x0096
                           000096   660 _P1_6	=	0x0096
                           000097   661 G$P1_7$0$0 == 0x0097
                           000097   662 _P1_7	=	0x0097
                           000098   663 G$RI$0$0 == 0x0098
                           000098   664 _RI	=	0x0098
                           000098   665 G$RI0$0$0 == 0x0098
                           000098   666 _RI0	=	0x0098
                           000099   667 G$TI$0$0 == 0x0099
                           000099   668 _TI	=	0x0099
                           000099   669 G$TI0$0$0 == 0x0099
                           000099   670 _TI0	=	0x0099
                           00009A   671 G$RB8$0$0 == 0x009a
                           00009A   672 _RB8	=	0x009a
                           00009A   673 G$RB80$0$0 == 0x009a
                           00009A   674 _RB80	=	0x009a
                           00009B   675 G$TB8$0$0 == 0x009b
                           00009B   676 _TB8	=	0x009b
                           00009B   677 G$TB80$0$0 == 0x009b
                           00009B   678 _TB80	=	0x009b
                           00009C   679 G$REN$0$0 == 0x009c
                           00009C   680 _REN	=	0x009c
                           00009C   681 G$REN0$0$0 == 0x009c
                           00009C   682 _REN0	=	0x009c
                           00009D   683 G$SM2$0$0 == 0x009d
                           00009D   684 _SM2	=	0x009d
                           00009D   685 G$SM20$0$0 == 0x009d
                           00009D   686 _SM20	=	0x009d
                           00009D   687 G$MCE0$0$0 == 0x009d
                           00009D   688 _MCE0	=	0x009d
                           00009E   689 G$SM1$0$0 == 0x009e
                           00009E   690 _SM1	=	0x009e
                           00009E   691 G$SM10$0$0 == 0x009e
                           00009E   692 _SM10	=	0x009e
                           00009F   693 G$SM0$0$0 == 0x009f
                           00009F   694 _SM0	=	0x009f
                           00009F   695 G$SM00$0$0 == 0x009f
                           00009F   696 _SM00	=	0x009f
                           00009F   697 G$S0MODE$0$0 == 0x009f
                           00009F   698 _S0MODE	=	0x009f
                           0000A0   699 G$P2_0$0$0 == 0x00a0
                           0000A0   700 _P2_0	=	0x00a0
                           0000A1   701 G$P2_1$0$0 == 0x00a1
                           0000A1   702 _P2_1	=	0x00a1
                           0000A2   703 G$P2_2$0$0 == 0x00a2
                           0000A2   704 _P2_2	=	0x00a2
                           0000A3   705 G$P2_3$0$0 == 0x00a3
                           0000A3   706 _P2_3	=	0x00a3
                           0000A4   707 G$P2_4$0$0 == 0x00a4
                           0000A4   708 _P2_4	=	0x00a4
                           0000A5   709 G$P2_5$0$0 == 0x00a5
                           0000A5   710 _P2_5	=	0x00a5
                           0000A6   711 G$P2_6$0$0 == 0x00a6
                           0000A6   712 _P2_6	=	0x00a6
                           0000A7   713 G$P2_7$0$0 == 0x00a7
                           0000A7   714 _P2_7	=	0x00a7
                           0000A8   715 G$EX0$0$0 == 0x00a8
                           0000A8   716 _EX0	=	0x00a8
                           0000A9   717 G$ET0$0$0 == 0x00a9
                           0000A9   718 _ET0	=	0x00a9
                           0000AA   719 G$EX1$0$0 == 0x00aa
                           0000AA   720 _EX1	=	0x00aa
                           0000AB   721 G$ET1$0$0 == 0x00ab
                           0000AB   722 _ET1	=	0x00ab
                           0000AC   723 G$ES0$0$0 == 0x00ac
                           0000AC   724 _ES0	=	0x00ac
                           0000AC   725 G$ES$0$0 == 0x00ac
                           0000AC   726 _ES	=	0x00ac
                           0000AD   727 G$ET2$0$0 == 0x00ad
                           0000AD   728 _ET2	=	0x00ad
                           0000AF   729 G$EA$0$0 == 0x00af
                           0000AF   730 _EA	=	0x00af
                           0000B0   731 G$P3_0$0$0 == 0x00b0
                           0000B0   732 _P3_0	=	0x00b0
                           0000B1   733 G$P3_1$0$0 == 0x00b1
                           0000B1   734 _P3_1	=	0x00b1
                           0000B2   735 G$P3_2$0$0 == 0x00b2
                           0000B2   736 _P3_2	=	0x00b2
                           0000B3   737 G$P3_3$0$0 == 0x00b3
                           0000B3   738 _P3_3	=	0x00b3
                           0000B4   739 G$P3_4$0$0 == 0x00b4
                           0000B4   740 _P3_4	=	0x00b4
                           0000B5   741 G$P3_5$0$0 == 0x00b5
                           0000B5   742 _P3_5	=	0x00b5
                           0000B6   743 G$P3_6$0$0 == 0x00b6
                           0000B6   744 _P3_6	=	0x00b6
                           0000B7   745 G$P3_7$0$0 == 0x00b7
                           0000B7   746 _P3_7	=	0x00b7
                           0000B8   747 G$PX0$0$0 == 0x00b8
                           0000B8   748 _PX0	=	0x00b8
                           0000B9   749 G$PT0$0$0 == 0x00b9
                           0000B9   750 _PT0	=	0x00b9
                           0000BA   751 G$PX1$0$0 == 0x00ba
                           0000BA   752 _PX1	=	0x00ba
                           0000BB   753 G$PT1$0$0 == 0x00bb
                           0000BB   754 _PT1	=	0x00bb
                           0000BC   755 G$PS0$0$0 == 0x00bc
                           0000BC   756 _PS0	=	0x00bc
                           0000BC   757 G$PS$0$0 == 0x00bc
                           0000BC   758 _PS	=	0x00bc
                           0000BD   759 G$PT2$0$0 == 0x00bd
                           0000BD   760 _PT2	=	0x00bd
                           0000C0   761 G$SMBTOE$0$0 == 0x00c0
                           0000C0   762 _SMBTOE	=	0x00c0
                           0000C1   763 G$SMBFTE$0$0 == 0x00c1
                           0000C1   764 _SMBFTE	=	0x00c1
                           0000C2   765 G$AA$0$0 == 0x00c2
                           0000C2   766 _AA	=	0x00c2
                           0000C3   767 G$SI$0$0 == 0x00c3
                           0000C3   768 _SI	=	0x00c3
                           0000C4   769 G$STO$0$0 == 0x00c4
                           0000C4   770 _STO	=	0x00c4
                           0000C5   771 G$STA$0$0 == 0x00c5
                           0000C5   772 _STA	=	0x00c5
                           0000C6   773 G$ENSMB$0$0 == 0x00c6
                           0000C6   774 _ENSMB	=	0x00c6
                           0000C7   775 G$BUSY$0$0 == 0x00c7
                           0000C7   776 _BUSY	=	0x00c7
                           0000C8   777 G$CPRL2$0$0 == 0x00c8
                           0000C8   778 _CPRL2	=	0x00c8
                           0000C9   779 G$CT2$0$0 == 0x00c9
                           0000C9   780 _CT2	=	0x00c9
                           0000CA   781 G$TR2$0$0 == 0x00ca
                           0000CA   782 _TR2	=	0x00ca
                           0000CB   783 G$EXEN2$0$0 == 0x00cb
                           0000CB   784 _EXEN2	=	0x00cb
                           0000CC   785 G$TCLK$0$0 == 0x00cc
                           0000CC   786 _TCLK	=	0x00cc
                           0000CD   787 G$RCLK$0$0 == 0x00cd
                           0000CD   788 _RCLK	=	0x00cd
                           0000CE   789 G$EXF2$0$0 == 0x00ce
                           0000CE   790 _EXF2	=	0x00ce
                           0000CF   791 G$TF2$0$0 == 0x00cf
                           0000CF   792 _TF2	=	0x00cf
                           0000D0   793 G$P$0$0 == 0x00d0
                           0000D0   794 _P	=	0x00d0
                           0000D1   795 G$F1$0$0 == 0x00d1
                           0000D1   796 _F1	=	0x00d1
                           0000D2   797 G$OV$0$0 == 0x00d2
                           0000D2   798 _OV	=	0x00d2
                           0000D3   799 G$RS0$0$0 == 0x00d3
                           0000D3   800 _RS0	=	0x00d3
                           0000D4   801 G$RS1$0$0 == 0x00d4
                           0000D4   802 _RS1	=	0x00d4
                           0000D5   803 G$F0$0$0 == 0x00d5
                           0000D5   804 _F0	=	0x00d5
                           0000D6   805 G$AC$0$0 == 0x00d6
                           0000D6   806 _AC	=	0x00d6
                           0000D7   807 G$CY$0$0 == 0x00d7
                           0000D7   808 _CY	=	0x00d7
                           0000D8   809 G$CCF0$0$0 == 0x00d8
                           0000D8   810 _CCF0	=	0x00d8
                           0000D9   811 G$CCF1$0$0 == 0x00d9
                           0000D9   812 _CCF1	=	0x00d9
                           0000DA   813 G$CCF2$0$0 == 0x00da
                           0000DA   814 _CCF2	=	0x00da
                           0000DB   815 G$CCF3$0$0 == 0x00db
                           0000DB   816 _CCF3	=	0x00db
                           0000DC   817 G$CCF4$0$0 == 0x00dc
                           0000DC   818 _CCF4	=	0x00dc
                           0000DE   819 G$CR$0$0 == 0x00de
                           0000DE   820 _CR	=	0x00de
                           0000DF   821 G$CF$0$0 == 0x00df
                           0000DF   822 _CF	=	0x00df
                           0000E8   823 G$ADLJST$0$0 == 0x00e8
                           0000E8   824 _ADLJST	=	0x00e8
                           0000E8   825 G$AD0LJST$0$0 == 0x00e8
                           0000E8   826 _AD0LJST	=	0x00e8
                           0000E9   827 G$ADWINT$0$0 == 0x00e9
                           0000E9   828 _ADWINT	=	0x00e9
                           0000E9   829 G$AD0WINT$0$0 == 0x00e9
                           0000E9   830 _AD0WINT	=	0x00e9
                           0000EA   831 G$ADSTM0$0$0 == 0x00ea
                           0000EA   832 _ADSTM0	=	0x00ea
                           0000EA   833 G$AD0CM0$0$0 == 0x00ea
                           0000EA   834 _AD0CM0	=	0x00ea
                           0000EB   835 G$ADSTM1$0$0 == 0x00eb
                           0000EB   836 _ADSTM1	=	0x00eb
                           0000EB   837 G$AD0CM1$0$0 == 0x00eb
                           0000EB   838 _AD0CM1	=	0x00eb
                           0000EC   839 G$ADBUSY$0$0 == 0x00ec
                           0000EC   840 _ADBUSY	=	0x00ec
                           0000EC   841 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   842 _AD0BUSY	=	0x00ec
                           0000ED   843 G$ADCINT$0$0 == 0x00ed
                           0000ED   844 _ADCINT	=	0x00ed
                           0000ED   845 G$AD0INT$0$0 == 0x00ed
                           0000ED   846 _AD0INT	=	0x00ed
                           0000EE   847 G$ADCTM$0$0 == 0x00ee
                           0000EE   848 _ADCTM	=	0x00ee
                           0000EE   849 G$AD0TM$0$0 == 0x00ee
                           0000EE   850 _AD0TM	=	0x00ee
                           0000EF   851 G$ADCEN$0$0 == 0x00ef
                           0000EF   852 _ADCEN	=	0x00ef
                           0000EF   853 G$AD0EN$0$0 == 0x00ef
                           0000EF   854 _AD0EN	=	0x00ef
                           0000F8   855 G$SPIEN$0$0 == 0x00f8
                           0000F8   856 _SPIEN	=	0x00f8
                           0000F9   857 G$MSTEN$0$0 == 0x00f9
                           0000F9   858 _MSTEN	=	0x00f9
                           0000FA   859 G$SLVSEL$0$0 == 0x00fa
                           0000FA   860 _SLVSEL	=	0x00fa
                           0000FB   861 G$TXBSY$0$0 == 0x00fb
                           0000FB   862 _TXBSY	=	0x00fb
                           0000FC   863 G$RXOVRN$0$0 == 0x00fc
                           0000FC   864 _RXOVRN	=	0x00fc
                           0000FD   865 G$MODF$0$0 == 0x00fd
                           0000FD   866 _MODF	=	0x00fd
                           0000FE   867 G$WCOL$0$0 == 0x00fe
                           0000FE   868 _WCOL	=	0x00fe
                           0000FF   869 G$SPIF$0$0 == 0x00ff
                           0000FF   870 _SPIF	=	0x00ff
                                    871 ;--------------------------------------------------------
                                    872 ; overlayable register banks
                                    873 ;--------------------------------------------------------
                                    874 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        875 	.ds 8
                                    876 ;--------------------------------------------------------
                                    877 ; internal ram data
                                    878 ;--------------------------------------------------------
                                    879 	.area DSEG    (DATA)
                           000000   880 G$desired$0$0==.
      000000                        881 _desired::
      000000                        882 	.ds 2
                           000002   883 G$actual$0$0==.
      000002                        884 _actual::
      000002                        885 	.ds 2
                           000004   886 G$kp$0$0==.
      000004                        887 _kp::
      000004                        888 	.ds 2
                           000006   889 G$kd$0$0==.
      000006                        890 _kd::
      000006                        891 	.ds 2
                           000008   892 G$pw_neut$0$0==.
      000008                        893 _pw_neut::
      000008                        894 	.ds 2
                           00000A   895 G$previous_error$0$0==.
      00000A                        896 _previous_error::
      00000A                        897 	.ds 2
                           00000C   898 G$error$0$0==.
      00000C                        899 _error::
      00000C                        900 	.ds 2
                           00000E   901 G$temp_motorpw_2byte$0$0==.
      00000E                        902 _temp_motorpw_2byte::
      00000E                        903 	.ds 2
                           000010   904 G$temp_motorpw_alg1$0$0==.
      000010                        905 _temp_motorpw_alg1::
      000010                        906 	.ds 4
                           000014   907 G$temp_motorpw_alg2$0$0==.
      000014                        908 _temp_motorpw_alg2::
      000014                        909 	.ds 4
                           000018   910 G$temp_motorpw_alg3$0$0==.
      000018                        911 _temp_motorpw_alg3::
      000018                        912 	.ds 4
                           00001C   913 G$temp_motorpw_alg4$0$0==.
      00001C                        914 _temp_motorpw_alg4::
      00001C                        915 	.ds 4
                           000020   916 G$temp_motorpw_alg5$0$0==.
      000020                        917 _temp_motorpw_alg5::
      000020                        918 	.ds 4
                           000024   919 G$temp_motorpw_alg6$0$0==.
      000024                        920 _temp_motorpw_alg6::
      000024                        921 	.ds 4
                           000028   922 Lworksheet_11.main$sloc0$1$0==.
      000028                        923 _main_sloc0_1_0:
      000028                        924 	.ds 4
                                    925 ;--------------------------------------------------------
                                    926 ; overlayable items in internal ram 
                                    927 ;--------------------------------------------------------
                                    928 	.area	OSEG    (OVR,DATA)
                                    929 	.area	OSEG    (OVR,DATA)
                                    930 ;--------------------------------------------------------
                                    931 ; Stack segment in internal ram 
                                    932 ;--------------------------------------------------------
                                    933 	.area	SSEG
      000000                        934 __start__stack:
      000000                        935 	.ds	1
                                    936 
                                    937 ;--------------------------------------------------------
                                    938 ; indirectly addressable internal ram data
                                    939 ;--------------------------------------------------------
                                    940 	.area ISEG    (DATA)
                                    941 ;--------------------------------------------------------
                                    942 ; absolute internal ram data
                                    943 ;--------------------------------------------------------
                                    944 	.area IABS    (ABS,DATA)
                                    945 	.area IABS    (ABS,DATA)
                                    946 ;--------------------------------------------------------
                                    947 ; bit data
                                    948 ;--------------------------------------------------------
                                    949 	.area BSEG    (BIT)
                                    950 ;--------------------------------------------------------
                                    951 ; paged external ram data
                                    952 ;--------------------------------------------------------
                                    953 	.area PSEG    (PAG,XDATA)
                                    954 ;--------------------------------------------------------
                                    955 ; external ram data
                                    956 ;--------------------------------------------------------
                                    957 	.area XSEG    (XDATA)
                                    958 ;--------------------------------------------------------
                                    959 ; absolute external ram data
                                    960 ;--------------------------------------------------------
                                    961 	.area XABS    (ABS,XDATA)
                                    962 ;--------------------------------------------------------
                                    963 ; external initialized ram data
                                    964 ;--------------------------------------------------------
                                    965 	.area XISEG   (XDATA)
                                    966 	.area HOME    (CODE)
                                    967 	.area GSINIT0 (CODE)
                                    968 	.area GSINIT1 (CODE)
                                    969 	.area GSINIT2 (CODE)
                                    970 	.area GSINIT3 (CODE)
                                    971 	.area GSINIT4 (CODE)
                                    972 	.area GSINIT5 (CODE)
                                    973 	.area GSINIT  (CODE)
                                    974 	.area GSFINAL (CODE)
                                    975 	.area CSEG    (CODE)
                                    976 ;--------------------------------------------------------
                                    977 ; interrupt vector 
                                    978 ;--------------------------------------------------------
                                    979 	.area HOME    (CODE)
      000000                        980 __interrupt_vect:
      000000 02r00r00         [24]  981 	ljmp	__sdcc_gsinit_startup
                                    982 ;--------------------------------------------------------
                                    983 ; global & static initialisations
                                    984 ;--------------------------------------------------------
                                    985 	.area HOME    (CODE)
                                    986 	.area GSINIT  (CODE)
                                    987 	.area GSFINAL (CODE)
                                    988 	.area GSINIT  (CODE)
                                    989 	.globl __sdcc_gsinit_startup
                                    990 	.globl __sdcc_program_startup
                                    991 	.globl __start__stack
                                    992 	.globl __mcs51_genXINIT
                                    993 	.globl __mcs51_genXRAMCLEAR
                                    994 	.globl __mcs51_genRAMCLEAR
                           000000   995 	C$worksheet_11.c$20$1$27 ==.
                                    996 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:20: unsigned int desired = 3500;           // set this value
      000000 75*00 AC         [24]  997 	mov	_desired,#0xac
      000003 75*01 0D         [24]  998 	mov	(_desired + 1),#0x0d
                           000006   999 	C$worksheet_11.c$21$1$27 ==.
                                   1000 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:21: unsigned int actual = 1800;            // set this value
      000006 75*02 08         [24] 1001 	mov	_actual,#0x08
      000009 75*03 07         [24] 1002 	mov	(_actual + 1),#0x07
                           00000C  1003 	C$worksheet_11.c$22$1$27 ==.
                                   1004 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:22: unsigned int kp = 30;                // set this value
      00000C 75*04 1E         [24] 1005 	mov	_kp,#0x1e
      00000F 75*05 00         [24] 1006 	mov	(_kp + 1),#0x00
                           000012  1007 	C$worksheet_11.c$23$1$27 ==.
                                   1008 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:23: unsigned int kd = 30;                // set this value
      000012 75*06 1E         [24] 1009 	mov	_kd,#0x1e
      000015 75*07 00         [24] 1010 	mov	(_kd + 1),#0x00
                           000018  1011 	C$worksheet_11.c$24$1$27 ==.
                                   1012 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:24: signed int pw_neut = 2765;             // set this value
      000018 75*08 CD         [24] 1013 	mov	_pw_neut,#0xcd
      00001B 75*09 0A         [24] 1014 	mov	(_pw_neut + 1),#0x0a
                           00001E  1015 	C$worksheet_11.c$25$1$27 ==.
                                   1016 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:25: signed int previous_error = 20;      // set this value
      00001E 75*0A 14         [24] 1017 	mov	_previous_error,#0x14
      000021 75*0B 00         [24] 1018 	mov	(_previous_error + 1),#0x00
                           000024  1019 	C$worksheet_11.c$26$1$27 ==.
                                   1020 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:26: signed int error = 0;               // set this value
      000024 E4               [12] 1021 	clr	a
      000025 F5*0C            [12] 1022 	mov	_error,a
      000027 F5*0D            [12] 1023 	mov	(_error + 1),a
                           000029  1024 	C$worksheet_11.c$27$1$27 ==.
                                   1025 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:27: signed int temp_motorpw_2byte = 0;
      000029 F5*0E            [12] 1026 	mov	_temp_motorpw_2byte,a
      00002B F5*0F            [12] 1027 	mov	(_temp_motorpw_2byte + 1),a
                           00002D  1028 	C$worksheet_11.c$28$1$27 ==.
                                   1029 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:28: signed long temp_motorpw_alg1 = 0;
      00002D F5*10            [12] 1030 	mov	_temp_motorpw_alg1,a
      00002F F5*11            [12] 1031 	mov	(_temp_motorpw_alg1 + 1),a
      000031 F5*12            [12] 1032 	mov	(_temp_motorpw_alg1 + 2),a
      000033 F5*13            [12] 1033 	mov	(_temp_motorpw_alg1 + 3),a
                           000035  1034 	C$worksheet_11.c$29$1$27 ==.
                                   1035 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:29: signed long temp_motorpw_alg2 = 0;
      000035 F5*14            [12] 1036 	mov	_temp_motorpw_alg2,a
      000037 F5*15            [12] 1037 	mov	(_temp_motorpw_alg2 + 1),a
      000039 F5*16            [12] 1038 	mov	(_temp_motorpw_alg2 + 2),a
      00003B F5*17            [12] 1039 	mov	(_temp_motorpw_alg2 + 3),a
                           00003D  1040 	C$worksheet_11.c$30$1$27 ==.
                                   1041 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:30: signed long temp_motorpw_alg3 = 0;
      00003D F5*18            [12] 1042 	mov	_temp_motorpw_alg3,a
      00003F F5*19            [12] 1043 	mov	(_temp_motorpw_alg3 + 1),a
      000041 F5*1A            [12] 1044 	mov	(_temp_motorpw_alg3 + 2),a
      000043 F5*1B            [12] 1045 	mov	(_temp_motorpw_alg3 + 3),a
                           000045  1046 	C$worksheet_11.c$31$1$27 ==.
                                   1047 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:31: signed long temp_motorpw_alg4 = 0;
      000045 F5*1C            [12] 1048 	mov	_temp_motorpw_alg4,a
      000047 F5*1D            [12] 1049 	mov	(_temp_motorpw_alg4 + 1),a
      000049 F5*1E            [12] 1050 	mov	(_temp_motorpw_alg4 + 2),a
      00004B F5*1F            [12] 1051 	mov	(_temp_motorpw_alg4 + 3),a
                           00004D  1052 	C$worksheet_11.c$32$1$27 ==.
                                   1053 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:32: signed long temp_motorpw_alg5 = 0;
      00004D F5*20            [12] 1054 	mov	_temp_motorpw_alg5,a
      00004F F5*21            [12] 1055 	mov	(_temp_motorpw_alg5 + 1),a
      000051 F5*22            [12] 1056 	mov	(_temp_motorpw_alg5 + 2),a
      000053 F5*23            [12] 1057 	mov	(_temp_motorpw_alg5 + 3),a
                           000055  1058 	C$worksheet_11.c$33$1$27 ==.
                                   1059 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:33: signed long temp_motorpw_alg6 = 0;
      000055 F5*24            [12] 1060 	mov	_temp_motorpw_alg6,a
      000057 F5*25            [12] 1061 	mov	(_temp_motorpw_alg6 + 1),a
      000059 F5*26            [12] 1062 	mov	(_temp_motorpw_alg6 + 2),a
      00005B F5*27            [12] 1063 	mov	(_temp_motorpw_alg6 + 3),a
                                   1064 	.area GSFINAL (CODE)
      000000 02r00r03         [24] 1065 	ljmp	__sdcc_program_startup
                                   1066 ;--------------------------------------------------------
                                   1067 ; Home
                                   1068 ;--------------------------------------------------------
                                   1069 	.area HOME    (CODE)
                                   1070 	.area HOME    (CODE)
      000003                       1071 __sdcc_program_startup:
      000003 02r00r7B         [24] 1072 	ljmp	_main
                                   1073 ;	return from main will return to caller
                                   1074 ;--------------------------------------------------------
                                   1075 ; code
                                   1076 ;--------------------------------------------------------
                                   1077 	.area CSEG    (CODE)
                                   1078 ;------------------------------------------------------------
                                   1079 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1080 ;------------------------------------------------------------
                                   1081 ;i                         Allocated to registers r6 r7 
                                   1082 ;------------------------------------------------------------
                           000000  1083 	G$SYSCLK_Init$0$0 ==.
                           000000  1084 	C$c8051_SDCC.h$62$0$0 ==.
                                   1085 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1086 ;	-----------------------------------------
                                   1087 ;	 function SYSCLK_Init
                                   1088 ;	-----------------------------------------
      000000                       1089 _SYSCLK_Init:
                           000007  1090 	ar7 = 0x07
                           000006  1091 	ar6 = 0x06
                           000005  1092 	ar5 = 0x05
                           000004  1093 	ar4 = 0x04
                           000003  1094 	ar3 = 0x03
                           000002  1095 	ar2 = 0x02
                           000001  1096 	ar1 = 0x01
                           000000  1097 	ar0 = 0x00
                           000000  1098 	C$c8051_SDCC.h$66$1$2 ==.
                                   1099 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1100 	mov	_OSCXCN,#0x67
                           000003  1101 	C$c8051_SDCC.h$69$1$2 ==.
                                   1102 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1103 	mov	r6,#0x00
      000005 7F 01            [12] 1104 	mov	r7,#0x01
      000007                       1105 00107$:
      000007 EE               [12] 1106 	mov	a,r6
      000008 24 FF            [12] 1107 	add	a,#0xff
      00000A FC               [12] 1108 	mov	r4,a
      00000B EF               [12] 1109 	mov	a,r7
      00000C 34 FF            [12] 1110 	addc	a,#0xff
      00000E FD               [12] 1111 	mov	r5,a
      00000F 8C 06            [24] 1112 	mov	ar6,r4
      000011 8D 07            [24] 1113 	mov	ar7,r5
      000013 EC               [12] 1114 	mov	a,r4
      000014 4D               [12] 1115 	orl	a,r5
      000015 70 F0            [24] 1116 	jnz	00107$
                           000017  1117 	C$c8051_SDCC.h$71$1$2 ==.
                                   1118 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1119 00102$:
      000017 E5 B1            [12] 1120 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1121 	jnb	acc.7,00102$
                           00001C  1122 	C$c8051_SDCC.h$73$1$2 ==.
                                   1123 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1124 	mov	_OSCICN,#0x88
                           00001F  1125 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1126 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1127 	ret
                                   1128 ;------------------------------------------------------------
                                   1129 ;Allocation info for local variables in function 'UART0_Init'
                                   1130 ;------------------------------------------------------------
                           000020  1131 	G$UART0_Init$0$0 ==.
                           000020  1132 	C$c8051_SDCC.h$84$1$2 ==.
                                   1133 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1134 ;	-----------------------------------------
                                   1135 ;	 function UART0_Init
                                   1136 ;	-----------------------------------------
      000020                       1137 _UART0_Init:
                           000020  1138 	C$c8051_SDCC.h$86$1$4 ==.
                                   1139 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1140 	mov	_SCON0,#0x50
                           000023  1141 	C$c8051_SDCC.h$87$1$4 ==.
                                   1142 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1143 	mov	_TMOD,#0x20
                           000026  1144 	C$c8051_SDCC.h$88$1$4 ==.
                                   1145 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1146 	mov	_TH1,#0xdc
                           000029  1147 	C$c8051_SDCC.h$89$1$4 ==.
                                   1148 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1149 	setb	_TR1
                           00002B  1150 	C$c8051_SDCC.h$90$1$4 ==.
                                   1151 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1152 	orl	_CKCON,#0x10
                           00002E  1153 	C$c8051_SDCC.h$91$1$4 ==.
                                   1154 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1155 	orl	_PCON,#0x80
                           000031  1156 	C$c8051_SDCC.h$93$1$4 ==.
                                   1157 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1158 	setb	_TI0
                           000033  1159 	C$c8051_SDCC.h$94$1$4 ==.
                                   1160 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1161 	orl	_P0MDOUT,#0x01
                           000036  1162 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1163 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1164 	ret
                                   1165 ;------------------------------------------------------------
                                   1166 ;Allocation info for local variables in function 'Sys_Init'
                                   1167 ;------------------------------------------------------------
                           000037  1168 	G$Sys_Init$0$0 ==.
                           000037  1169 	C$c8051_SDCC.h$103$1$4 ==.
                                   1170 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1171 ;	-----------------------------------------
                                   1172 ;	 function Sys_Init
                                   1173 ;	-----------------------------------------
      000037                       1174 _Sys_Init:
                           000037  1175 	C$c8051_SDCC.h$105$1$6 ==.
                                   1176 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1177 	mov	_WDTCN,#0xde
                           00003A  1178 	C$c8051_SDCC.h$106$1$6 ==.
                                   1179 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1180 	mov	_WDTCN,#0xad
                           00003D  1181 	C$c8051_SDCC.h$108$1$6 ==.
                                   1182 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1183 	lcall	_SYSCLK_Init
                           000040  1184 	C$c8051_SDCC.h$109$1$6 ==.
                                   1185 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1186 	lcall	_UART0_Init
                           000043  1187 	C$c8051_SDCC.h$111$1$6 ==.
                                   1188 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1189 	orl	_XBR0,#0x04
                           000046  1190 	C$c8051_SDCC.h$112$1$6 ==.
                                   1191 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1192 	orl	_XBR2,#0x40
                           000049  1193 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1194 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1195 	ret
                                   1196 ;------------------------------------------------------------
                                   1197 ;Allocation info for local variables in function 'putchar'
                                   1198 ;------------------------------------------------------------
                                   1199 ;c                         Allocated to registers r7 
                                   1200 ;------------------------------------------------------------
                           00004A  1201 	G$putchar$0$0 ==.
                           00004A  1202 	C$c8051_SDCC.h$129$1$6 ==.
                                   1203 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1204 ;	-----------------------------------------
                                   1205 ;	 function putchar
                                   1206 ;	-----------------------------------------
      00004A                       1207 _putchar:
      00004A AF 82            [24] 1208 	mov	r7,dpl
                           00004C  1209 	C$c8051_SDCC.h$132$1$8 ==.
                                   1210 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1211 00101$:
                           00004C  1212 	C$c8051_SDCC.h$133$1$8 ==.
                                   1213 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1214 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1215 	sjmp	00101$
      000051                       1216 00112$:
                           000051  1217 	C$c8051_SDCC.h$134$1$8 ==.
                                   1218 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1219 	mov	_SBUF0,r7
                           000053  1220 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1221 	XG$putchar$0$0 ==.
      000053 22               [24] 1222 	ret
                                   1223 ;------------------------------------------------------------
                                   1224 ;Allocation info for local variables in function 'getchar'
                                   1225 ;------------------------------------------------------------
                                   1226 ;c                         Allocated to registers r7 
                                   1227 ;------------------------------------------------------------
                           000054  1228 	G$getchar$0$0 ==.
                           000054  1229 	C$c8051_SDCC.h$154$1$8 ==.
                                   1230 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1231 ;	-----------------------------------------
                                   1232 ;	 function getchar
                                   1233 ;	-----------------------------------------
      000054                       1234 _getchar:
                           000054  1235 	C$c8051_SDCC.h$157$1$10 ==.
                                   1236 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1237 00101$:
                           000054  1238 	C$c8051_SDCC.h$158$1$10 ==.
                                   1239 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1240 	jbc	_RI0,00112$
      000057 80 FB            [24] 1241 	sjmp	00101$
      000059                       1242 00112$:
                           000059  1243 	C$c8051_SDCC.h$159$1$10 ==.
                                   1244 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1245 	mov	r7,_SBUF0
                           00005B  1246 	C$c8051_SDCC.h$160$1$10 ==.
                                   1247 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1248 	mov	dpl,r7
      00005D C0 07            [24] 1249 	push	ar7
      00005F 12r00r4A         [24] 1250 	lcall	_putchar
      000062 D0 07            [24] 1251 	pop	ar7
                           000064  1252 	C$c8051_SDCC.h$161$1$10 ==.
                                   1253 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1254 	mov	dpl,r7
                           000066  1255 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1256 	XG$getchar$0$0 ==.
      000066 22               [24] 1257 	ret
                                   1258 ;------------------------------------------------------------
                                   1259 ;Allocation info for local variables in function 'getchar_nw'
                                   1260 ;------------------------------------------------------------
                                   1261 ;c                         Allocated to registers 
                                   1262 ;------------------------------------------------------------
                           000067  1263 	G$getchar_nw$0$0 ==.
                           000067  1264 	C$c8051_SDCC.h$168$1$10 ==.
                                   1265 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1266 ;	-----------------------------------------
                                   1267 ;	 function getchar_nw
                                   1268 ;	-----------------------------------------
      000067                       1269 _getchar_nw:
                           000067  1270 	C$c8051_SDCC.h$171$1$12 ==.
                                   1271 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1272 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1273 	mov	dpl,#0xff
      00006D 80 0B            [24] 1274 	sjmp	00104$
      00006F                       1275 00102$:
                           00006F  1276 	C$c8051_SDCC.h$174$2$13 ==.
                                   1277 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1278 	clr	_RI0
                           000071  1279 	C$c8051_SDCC.h$175$2$13 ==.
                                   1280 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1281 	mov	dpl,_SBUF0
                           000074  1282 	C$c8051_SDCC.h$176$2$13 ==.
                                   1283 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1284 	lcall	_putchar
                           000077  1285 	C$c8051_SDCC.h$177$2$13 ==.
                                   1286 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1287 	mov	dpl,_SBUF0
      00007A                       1288 00104$:
                           00007A  1289 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1290 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1291 	ret
                                   1292 ;------------------------------------------------------------
                                   1293 ;Allocation info for local variables in function 'main'
                                   1294 ;------------------------------------------------------------
                                   1295 ;sloc0                     Allocated with name '_main_sloc0_1_0'
                                   1296 ;------------------------------------------------------------
                           00007B  1297 	G$main$0$0 ==.
                           00007B  1298 	C$worksheet_11.c$35$1$12 ==.
                                   1299 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:35: void main()
                                   1300 ;	-----------------------------------------
                                   1301 ;	 function main
                                   1302 ;	-----------------------------------------
      00007B                       1303 _main:
                           00007B  1304 	C$worksheet_11.c$37$1$27 ==.
                                   1305 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:37: Sys_Init();
      00007B 12r00r37         [24] 1306 	lcall	_Sys_Init
                           00007E  1307 	C$worksheet_11.c$38$1$27 ==.
                                   1308 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:38: putchar(' ');
      00007E 75 82 20         [24] 1309 	mov	dpl,#0x20
      000081 12r00r4A         [24] 1310 	lcall	_putchar
                           000084  1311 	C$worksheet_11.c$39$1$27 ==.
                                   1312 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:39: error = desired-actual;
      000084 E5*00            [12] 1313 	mov	a,_desired
      000086 C3               [12] 1314 	clr	c
      000087 95*02            [12] 1315 	subb	a,_actual
      000089 F5*0C            [12] 1316 	mov	_error,a
      00008B E5*01            [12] 1317 	mov	a,(_desired + 1)
      00008D 95*03            [12] 1318 	subb	a,(_actual + 1)
      00008F F5*0D            [12] 1319 	mov	(_error + 1),a
                           000091  1320 	C$worksheet_11.c$41$1$27 ==.
                                   1321 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:41: temp_motorpw_2byte = pw_neut+kp*error+kd*(error-previous_error);
      000091 85*0C*00         [24] 1322 	mov	__mulint_PARM_2,_error
      000094 85*0D*01         [24] 1323 	mov	(__mulint_PARM_2 + 1),(_error + 1)
      000097 85*04 82         [24] 1324 	mov	dpl,_kp
      00009A 85*05 83         [24] 1325 	mov	dph,(_kp + 1)
      00009D 12r00r00         [24] 1326 	lcall	__mulint
      0000A0 AE 82            [24] 1327 	mov	r6,dpl
      0000A2 AF 83            [24] 1328 	mov	r7,dph
      0000A4 AC*08            [24] 1329 	mov	r4,_pw_neut
      0000A6 AD*09            [24] 1330 	mov	r5,(_pw_neut + 1)
      0000A8 EE               [12] 1331 	mov	a,r6
      0000A9 2C               [12] 1332 	add	a,r4
      0000AA FE               [12] 1333 	mov	r6,a
      0000AB EF               [12] 1334 	mov	a,r7
      0000AC 3D               [12] 1335 	addc	a,r5
      0000AD FF               [12] 1336 	mov	r7,a
      0000AE E5*0C            [12] 1337 	mov	a,_error
      0000B0 C3               [12] 1338 	clr	c
      0000B1 95*0A            [12] 1339 	subb	a,_previous_error
      0000B3 FC               [12] 1340 	mov	r4,a
      0000B4 E5*0D            [12] 1341 	mov	a,(_error + 1)
      0000B6 95*0B            [12] 1342 	subb	a,(_previous_error + 1)
      0000B8 FD               [12] 1343 	mov	r5,a
      0000B9 8C*00            [24] 1344 	mov	__mulint_PARM_2,r4
      0000BB 8D*01            [24] 1345 	mov	(__mulint_PARM_2 + 1),r5
      0000BD 85*06 82         [24] 1346 	mov	dpl,_kd
      0000C0 85*07 83         [24] 1347 	mov	dph,(_kd + 1)
      0000C3 C0 07            [24] 1348 	push	ar7
      0000C5 C0 06            [24] 1349 	push	ar6
      0000C7 12r00r00         [24] 1350 	lcall	__mulint
      0000CA AC 82            [24] 1351 	mov	r4,dpl
      0000CC AD 83            [24] 1352 	mov	r5,dph
      0000CE D0 06            [24] 1353 	pop	ar6
      0000D0 D0 07            [24] 1354 	pop	ar7
      0000D2 EC               [12] 1355 	mov	a,r4
      0000D3 2E               [12] 1356 	add	a,r6
      0000D4 F5*0E            [12] 1357 	mov	_temp_motorpw_2byte,a
      0000D6 ED               [12] 1358 	mov	a,r5
      0000D7 3F               [12] 1359 	addc	a,r7
      0000D8 F5*0F            [12] 1360 	mov	(_temp_motorpw_2byte + 1),a
                           0000DA  1361 	C$worksheet_11.c$42$1$27 ==.
                                   1362 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:42: printf("The two byte calculation of motorpw is %d \r\n",temp_motorpw_2byte);
      0000DA C0*0E            [24] 1363 	push	_temp_motorpw_2byte
      0000DC C0*0F            [24] 1364 	push	(_temp_motorpw_2byte + 1)
      0000DE 74r00            [12] 1365 	mov	a,#___str_0
      0000E0 C0 E0            [24] 1366 	push	acc
      0000E2 74s00            [12] 1367 	mov	a,#(___str_0 >> 8)
      0000E4 C0 E0            [24] 1368 	push	acc
      0000E6 74 80            [12] 1369 	mov	a,#0x80
      0000E8 C0 E0            [24] 1370 	push	acc
      0000EA 12r00r00         [24] 1371 	lcall	_printf
      0000ED E5 81            [12] 1372 	mov	a,sp
      0000EF 24 FB            [12] 1373 	add	a,#0xfb
      0000F1 F5 81            [12] 1374 	mov	sp,a
                           0000F3  1375 	C$worksheet_11.c$44$1$27 ==.
                                   1376 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:44: temp_motorpw_alg1 = pw_neut+kp*error+kd*(error-previous_error);
      0000F3 85*0C*00         [24] 1377 	mov	__mulint_PARM_2,_error
      0000F6 85*0D*01         [24] 1378 	mov	(__mulint_PARM_2 + 1),(_error + 1)
      0000F9 85*04 82         [24] 1379 	mov	dpl,_kp
      0000FC 85*05 83         [24] 1380 	mov	dph,(_kp + 1)
      0000FF 12r00r00         [24] 1381 	lcall	__mulint
      000102 AE 82            [24] 1382 	mov	r6,dpl
      000104 AF 83            [24] 1383 	mov	r7,dph
      000106 AC*08            [24] 1384 	mov	r4,_pw_neut
      000108 AD*09            [24] 1385 	mov	r5,(_pw_neut + 1)
      00010A EE               [12] 1386 	mov	a,r6
      00010B 2C               [12] 1387 	add	a,r4
      00010C FE               [12] 1388 	mov	r6,a
      00010D EF               [12] 1389 	mov	a,r7
      00010E 3D               [12] 1390 	addc	a,r5
      00010F FF               [12] 1391 	mov	r7,a
      000110 E5*0C            [12] 1392 	mov	a,_error
      000112 C3               [12] 1393 	clr	c
      000113 95*0A            [12] 1394 	subb	a,_previous_error
      000115 FC               [12] 1395 	mov	r4,a
      000116 E5*0D            [12] 1396 	mov	a,(_error + 1)
      000118 95*0B            [12] 1397 	subb	a,(_previous_error + 1)
      00011A FD               [12] 1398 	mov	r5,a
      00011B 8C*00            [24] 1399 	mov	__mulint_PARM_2,r4
      00011D 8D*01            [24] 1400 	mov	(__mulint_PARM_2 + 1),r5
      00011F 85*06 82         [24] 1401 	mov	dpl,_kd
      000122 85*07 83         [24] 1402 	mov	dph,(_kd + 1)
      000125 C0 07            [24] 1403 	push	ar7
      000127 C0 06            [24] 1404 	push	ar6
      000129 12r00r00         [24] 1405 	lcall	__mulint
      00012C AC 82            [24] 1406 	mov	r4,dpl
      00012E AD 83            [24] 1407 	mov	r5,dph
      000130 D0 06            [24] 1408 	pop	ar6
      000132 D0 07            [24] 1409 	pop	ar7
      000134 EC               [12] 1410 	mov	a,r4
      000135 2E               [12] 1411 	add	a,r6
      000136 FE               [12] 1412 	mov	r6,a
      000137 ED               [12] 1413 	mov	a,r5
      000138 3F               [12] 1414 	addc	a,r7
      000139 FF               [12] 1415 	mov	r7,a
      00013A 8E*10            [24] 1416 	mov	_temp_motorpw_alg1,r6
      00013C 8F*11            [24] 1417 	mov	(_temp_motorpw_alg1 + 1),r7
      00013E 75*12 00         [24] 1418 	mov	(_temp_motorpw_alg1 + 2),#0x00
      000141 75*13 00         [24] 1419 	mov	(_temp_motorpw_alg1 + 3),#0x00
                           000144  1420 	C$worksheet_11.c$45$1$27 ==.
                                   1421 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:45: printf("Algorithm 1, four byte calculation of motorpw is %ld \r\n",temp_motorpw_alg1);
      000144 C0*10            [24] 1422 	push	_temp_motorpw_alg1
      000146 C0*11            [24] 1423 	push	(_temp_motorpw_alg1 + 1)
      000148 C0*12            [24] 1424 	push	(_temp_motorpw_alg1 + 2)
      00014A C0*13            [24] 1425 	push	(_temp_motorpw_alg1 + 3)
      00014C 74r2D            [12] 1426 	mov	a,#___str_1
      00014E C0 E0            [24] 1427 	push	acc
      000150 74s00            [12] 1428 	mov	a,#(___str_1 >> 8)
      000152 C0 E0            [24] 1429 	push	acc
      000154 74 80            [12] 1430 	mov	a,#0x80
      000156 C0 E0            [24] 1431 	push	acc
      000158 12r00r00         [24] 1432 	lcall	_printf
      00015B E5 81            [12] 1433 	mov	a,sp
      00015D 24 F9            [12] 1434 	add	a,#0xf9
      00015F F5 81            [12] 1435 	mov	sp,a
                           000161  1436 	C$worksheet_11.c$47$1$27 ==.
                                   1437 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:47: temp_motorpw_alg2 = pw_neut+(signed long)kp*error+kd*(error-previous_error);
      000161 AC*04            [24] 1438 	mov	r4,_kp
      000163 AD*05            [24] 1439 	mov	r5,(_kp + 1)
      000165 7E 00            [12] 1440 	mov	r6,#0x00
      000167 7F 00            [12] 1441 	mov	r7,#0x00
      000169 85*0C*00         [24] 1442 	mov	__mullong_PARM_2,_error
      00016C E5*0D            [12] 1443 	mov	a,(_error + 1)
      00016E F5*01            [12] 1444 	mov	(__mullong_PARM_2 + 1),a
      000170 33               [12] 1445 	rlc	a
      000171 95 E0            [12] 1446 	subb	a,acc
      000173 F5*02            [12] 1447 	mov	(__mullong_PARM_2 + 2),a
      000175 F5*03            [12] 1448 	mov	(__mullong_PARM_2 + 3),a
      000177 8C 82            [24] 1449 	mov	dpl,r4
      000179 8D 83            [24] 1450 	mov	dph,r5
      00017B 8E F0            [24] 1451 	mov	b,r6
      00017D EF               [12] 1452 	mov	a,r7
      00017E 12r00r00         [24] 1453 	lcall	__mullong
      000181 AC 82            [24] 1454 	mov	r4,dpl
      000183 AD 83            [24] 1455 	mov	r5,dph
      000185 AE F0            [24] 1456 	mov	r6,b
      000187 FF               [12] 1457 	mov	r7,a
      000188 A8*08            [24] 1458 	mov	r0,_pw_neut
      00018A E5*09            [12] 1459 	mov	a,(_pw_neut + 1)
      00018C F9               [12] 1460 	mov	r1,a
      00018D 33               [12] 1461 	rlc	a
      00018E 95 E0            [12] 1462 	subb	a,acc
      000190 FA               [12] 1463 	mov	r2,a
      000191 FB               [12] 1464 	mov	r3,a
      000192 EC               [12] 1465 	mov	a,r4
      000193 28               [12] 1466 	add	a,r0
      000194 FC               [12] 1467 	mov	r4,a
      000195 ED               [12] 1468 	mov	a,r5
      000196 39               [12] 1469 	addc	a,r1
      000197 FD               [12] 1470 	mov	r5,a
      000198 EE               [12] 1471 	mov	a,r6
      000199 3A               [12] 1472 	addc	a,r2
      00019A FE               [12] 1473 	mov	r6,a
      00019B EF               [12] 1474 	mov	a,r7
      00019C 3B               [12] 1475 	addc	a,r3
      00019D FF               [12] 1476 	mov	r7,a
      00019E E5*0C            [12] 1477 	mov	a,_error
      0001A0 C3               [12] 1478 	clr	c
      0001A1 95*0A            [12] 1479 	subb	a,_previous_error
      0001A3 FA               [12] 1480 	mov	r2,a
      0001A4 E5*0D            [12] 1481 	mov	a,(_error + 1)
      0001A6 95*0B            [12] 1482 	subb	a,(_previous_error + 1)
      0001A8 FB               [12] 1483 	mov	r3,a
      0001A9 8A*00            [24] 1484 	mov	__mulint_PARM_2,r2
      0001AB 8B*01            [24] 1485 	mov	(__mulint_PARM_2 + 1),r3
      0001AD 85*06 82         [24] 1486 	mov	dpl,_kd
      0001B0 85*07 83         [24] 1487 	mov	dph,(_kd + 1)
      0001B3 C0 07            [24] 1488 	push	ar7
      0001B5 C0 06            [24] 1489 	push	ar6
      0001B7 C0 05            [24] 1490 	push	ar5
      0001B9 C0 04            [24] 1491 	push	ar4
      0001BB 12r00r00         [24] 1492 	lcall	__mulint
      0001BE AA 82            [24] 1493 	mov	r2,dpl
      0001C0 AB 83            [24] 1494 	mov	r3,dph
      0001C2 D0 04            [24] 1495 	pop	ar4
      0001C4 D0 05            [24] 1496 	pop	ar5
      0001C6 D0 06            [24] 1497 	pop	ar6
      0001C8 D0 07            [24] 1498 	pop	ar7
      0001CA 8A 00            [24] 1499 	mov	ar0,r2
      0001CC 8B 01            [24] 1500 	mov	ar1,r3
      0001CE E4               [12] 1501 	clr	a
      0001CF FA               [12] 1502 	mov	r2,a
      0001D0 FB               [12] 1503 	mov	r3,a
      0001D1 E8               [12] 1504 	mov	a,r0
      0001D2 2C               [12] 1505 	add	a,r4
      0001D3 F5*14            [12] 1506 	mov	_temp_motorpw_alg2,a
      0001D5 E9               [12] 1507 	mov	a,r1
      0001D6 3D               [12] 1508 	addc	a,r5
      0001D7 F5*15            [12] 1509 	mov	(_temp_motorpw_alg2 + 1),a
      0001D9 EA               [12] 1510 	mov	a,r2
      0001DA 3E               [12] 1511 	addc	a,r6
      0001DB F5*16            [12] 1512 	mov	(_temp_motorpw_alg2 + 2),a
      0001DD EB               [12] 1513 	mov	a,r3
      0001DE 3F               [12] 1514 	addc	a,r7
      0001DF F5*17            [12] 1515 	mov	(_temp_motorpw_alg2 + 3),a
                           0001E1  1516 	C$worksheet_11.c$48$1$27 ==.
                                   1517 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:48: printf("Algorithm 2, four byte calculation of motorpw is %ld \r\n",temp_motorpw_alg2);
      0001E1 C0*14            [24] 1518 	push	_temp_motorpw_alg2
      0001E3 C0*15            [24] 1519 	push	(_temp_motorpw_alg2 + 1)
      0001E5 C0*16            [24] 1520 	push	(_temp_motorpw_alg2 + 2)
      0001E7 C0*17            [24] 1521 	push	(_temp_motorpw_alg2 + 3)
      0001E9 74r65            [12] 1522 	mov	a,#___str_2
      0001EB C0 E0            [24] 1523 	push	acc
      0001ED 74s00            [12] 1524 	mov	a,#(___str_2 >> 8)
      0001EF C0 E0            [24] 1525 	push	acc
      0001F1 74 80            [12] 1526 	mov	a,#0x80
      0001F3 C0 E0            [24] 1527 	push	acc
      0001F5 12r00r00         [24] 1528 	lcall	_printf
      0001F8 E5 81            [12] 1529 	mov	a,sp
      0001FA 24 F9            [12] 1530 	add	a,#0xf9
      0001FC F5 81            [12] 1531 	mov	sp,a
                           0001FE  1532 	C$worksheet_11.c$50$1$27 ==.
                                   1533 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:50: temp_motorpw_alg3 = (signed long)( pw_neut + kp * (error) + kd * (error - previous_error));
      0001FE 85*0C*00         [24] 1534 	mov	__mulint_PARM_2,_error
      000201 85*0D*01         [24] 1535 	mov	(__mulint_PARM_2 + 1),(_error + 1)
      000204 85*04 82         [24] 1536 	mov	dpl,_kp
      000207 85*05 83         [24] 1537 	mov	dph,(_kp + 1)
      00020A 12r00r00         [24] 1538 	lcall	__mulint
      00020D AE 82            [24] 1539 	mov	r6,dpl
      00020F AF 83            [24] 1540 	mov	r7,dph
      000211 AC*08            [24] 1541 	mov	r4,_pw_neut
      000213 AD*09            [24] 1542 	mov	r5,(_pw_neut + 1)
      000215 EE               [12] 1543 	mov	a,r6
      000216 2C               [12] 1544 	add	a,r4
      000217 FE               [12] 1545 	mov	r6,a
      000218 EF               [12] 1546 	mov	a,r7
      000219 3D               [12] 1547 	addc	a,r5
      00021A FF               [12] 1548 	mov	r7,a
      00021B E5*0C            [12] 1549 	mov	a,_error
      00021D C3               [12] 1550 	clr	c
      00021E 95*0A            [12] 1551 	subb	a,_previous_error
      000220 FC               [12] 1552 	mov	r4,a
      000221 E5*0D            [12] 1553 	mov	a,(_error + 1)
      000223 95*0B            [12] 1554 	subb	a,(_previous_error + 1)
      000225 FD               [12] 1555 	mov	r5,a
      000226 8C*00            [24] 1556 	mov	__mulint_PARM_2,r4
      000228 8D*01            [24] 1557 	mov	(__mulint_PARM_2 + 1),r5
      00022A 85*06 82         [24] 1558 	mov	dpl,_kd
      00022D 85*07 83         [24] 1559 	mov	dph,(_kd + 1)
      000230 C0 07            [24] 1560 	push	ar7
      000232 C0 06            [24] 1561 	push	ar6
      000234 12r00r00         [24] 1562 	lcall	__mulint
      000237 AC 82            [24] 1563 	mov	r4,dpl
      000239 AD 83            [24] 1564 	mov	r5,dph
      00023B D0 06            [24] 1565 	pop	ar6
      00023D D0 07            [24] 1566 	pop	ar7
      00023F EC               [12] 1567 	mov	a,r4
      000240 2E               [12] 1568 	add	a,r6
      000241 FE               [12] 1569 	mov	r6,a
      000242 ED               [12] 1570 	mov	a,r5
      000243 3F               [12] 1571 	addc	a,r7
      000244 FF               [12] 1572 	mov	r7,a
      000245 8E*18            [24] 1573 	mov	_temp_motorpw_alg3,r6
      000247 8F*19            [24] 1574 	mov	(_temp_motorpw_alg3 + 1),r7
      000249 75*1A 00         [24] 1575 	mov	(_temp_motorpw_alg3 + 2),#0x00
      00024C 75*1B 00         [24] 1576 	mov	(_temp_motorpw_alg3 + 3),#0x00
                           00024F  1577 	C$worksheet_11.c$51$1$27 ==.
                                   1578 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:51: printf("Algorithm 3, four byte calculation of motorpw is %ld \r\n",temp_motorpw_alg3);
      00024F C0*18            [24] 1579 	push	_temp_motorpw_alg3
      000251 C0*19            [24] 1580 	push	(_temp_motorpw_alg3 + 1)
      000253 C0*1A            [24] 1581 	push	(_temp_motorpw_alg3 + 2)
      000255 C0*1B            [24] 1582 	push	(_temp_motorpw_alg3 + 3)
      000257 74r9D            [12] 1583 	mov	a,#___str_3
      000259 C0 E0            [24] 1584 	push	acc
      00025B 74s00            [12] 1585 	mov	a,#(___str_3 >> 8)
      00025D C0 E0            [24] 1586 	push	acc
      00025F 74 80            [12] 1587 	mov	a,#0x80
      000261 C0 E0            [24] 1588 	push	acc
      000263 12r00r00         [24] 1589 	lcall	_printf
      000266 E5 81            [12] 1590 	mov	a,sp
      000268 24 F9            [12] 1591 	add	a,#0xf9
      00026A F5 81            [12] 1592 	mov	sp,a
                           00026C  1593 	C$worksheet_11.c$53$1$27 ==.
                                   1594 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:53: temp_motorpw_alg4 = pw_neut+kp*(signed int)(error)+kd*(signed int)(error-previous_error);
      00026C 85*0C*00         [24] 1595 	mov	__mulint_PARM_2,_error
      00026F 85*0D*01         [24] 1596 	mov	(__mulint_PARM_2 + 1),(_error + 1)
      000272 85*04 82         [24] 1597 	mov	dpl,_kp
      000275 85*05 83         [24] 1598 	mov	dph,(_kp + 1)
      000278 12r00r00         [24] 1599 	lcall	__mulint
      00027B AE 82            [24] 1600 	mov	r6,dpl
      00027D AF 83            [24] 1601 	mov	r7,dph
      00027F AC*08            [24] 1602 	mov	r4,_pw_neut
      000281 AD*09            [24] 1603 	mov	r5,(_pw_neut + 1)
      000283 EE               [12] 1604 	mov	a,r6
      000284 2C               [12] 1605 	add	a,r4
      000285 FE               [12] 1606 	mov	r6,a
      000286 EF               [12] 1607 	mov	a,r7
      000287 3D               [12] 1608 	addc	a,r5
      000288 FF               [12] 1609 	mov	r7,a
      000289 E5*0C            [12] 1610 	mov	a,_error
      00028B C3               [12] 1611 	clr	c
      00028C 95*0A            [12] 1612 	subb	a,_previous_error
      00028E FC               [12] 1613 	mov	r4,a
      00028F E5*0D            [12] 1614 	mov	a,(_error + 1)
      000291 95*0B            [12] 1615 	subb	a,(_previous_error + 1)
      000293 FD               [12] 1616 	mov	r5,a
      000294 8C*00            [24] 1617 	mov	__mulint_PARM_2,r4
      000296 8D*01            [24] 1618 	mov	(__mulint_PARM_2 + 1),r5
      000298 85*06 82         [24] 1619 	mov	dpl,_kd
      00029B 85*07 83         [24] 1620 	mov	dph,(_kd + 1)
      00029E C0 07            [24] 1621 	push	ar7
      0002A0 C0 06            [24] 1622 	push	ar6
      0002A2 12r00r00         [24] 1623 	lcall	__mulint
      0002A5 AC 82            [24] 1624 	mov	r4,dpl
      0002A7 AD 83            [24] 1625 	mov	r5,dph
      0002A9 D0 06            [24] 1626 	pop	ar6
      0002AB D0 07            [24] 1627 	pop	ar7
      0002AD EC               [12] 1628 	mov	a,r4
      0002AE 2E               [12] 1629 	add	a,r6
      0002AF FE               [12] 1630 	mov	r6,a
      0002B0 ED               [12] 1631 	mov	a,r5
      0002B1 3F               [12] 1632 	addc	a,r7
      0002B2 FF               [12] 1633 	mov	r7,a
      0002B3 8E*1C            [24] 1634 	mov	_temp_motorpw_alg4,r6
      0002B5 8F*1D            [24] 1635 	mov	(_temp_motorpw_alg4 + 1),r7
      0002B7 75*1E 00         [24] 1636 	mov	(_temp_motorpw_alg4 + 2),#0x00
      0002BA 75*1F 00         [24] 1637 	mov	(_temp_motorpw_alg4 + 3),#0x00
                           0002BD  1638 	C$worksheet_11.c$54$1$27 ==.
                                   1639 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:54: printf("Algorithm 4, four byte calculation of motorpw is %ld \r\n",temp_motorpw_alg4);
      0002BD C0*1C            [24] 1640 	push	_temp_motorpw_alg4
      0002BF C0*1D            [24] 1641 	push	(_temp_motorpw_alg4 + 1)
      0002C1 C0*1E            [24] 1642 	push	(_temp_motorpw_alg4 + 2)
      0002C3 C0*1F            [24] 1643 	push	(_temp_motorpw_alg4 + 3)
      0002C5 74rD5            [12] 1644 	mov	a,#___str_4
      0002C7 C0 E0            [24] 1645 	push	acc
      0002C9 74s00            [12] 1646 	mov	a,#(___str_4 >> 8)
      0002CB C0 E0            [24] 1647 	push	acc
      0002CD 74 80            [12] 1648 	mov	a,#0x80
      0002CF C0 E0            [24] 1649 	push	acc
      0002D1 12r00r00         [24] 1650 	lcall	_printf
      0002D4 E5 81            [12] 1651 	mov	a,sp
      0002D6 24 F9            [12] 1652 	add	a,#0xf9
      0002D8 F5 81            [12] 1653 	mov	sp,a
                           0002DA  1654 	C$worksheet_11.c$56$1$27 ==.
                                   1655 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:56: temp_motorpw_alg5 = (signed long)pw_neut+(signed long)(kp*(error))+(signed long)(kd*(error-previous_error));
      0002DA AC*08            [24] 1656 	mov	r4,_pw_neut
      0002DC E5*09            [12] 1657 	mov	a,(_pw_neut + 1)
      0002DE FD               [12] 1658 	mov	r5,a
      0002DF 33               [12] 1659 	rlc	a
      0002E0 95 E0            [12] 1660 	subb	a,acc
      0002E2 FE               [12] 1661 	mov	r6,a
      0002E3 FF               [12] 1662 	mov	r7,a
      0002E4 85*0C*00         [24] 1663 	mov	__mulint_PARM_2,_error
      0002E7 85*0D*01         [24] 1664 	mov	(__mulint_PARM_2 + 1),(_error + 1)
      0002EA 85*04 82         [24] 1665 	mov	dpl,_kp
      0002ED 85*05 83         [24] 1666 	mov	dph,(_kp + 1)
      0002F0 C0 07            [24] 1667 	push	ar7
      0002F2 C0 06            [24] 1668 	push	ar6
      0002F4 C0 05            [24] 1669 	push	ar5
      0002F6 C0 04            [24] 1670 	push	ar4
      0002F8 12r00r00         [24] 1671 	lcall	__mulint
      0002FB AA 82            [24] 1672 	mov	r2,dpl
      0002FD AB 83            [24] 1673 	mov	r3,dph
      0002FF D0 04            [24] 1674 	pop	ar4
      000301 D0 05            [24] 1675 	pop	ar5
      000303 D0 06            [24] 1676 	pop	ar6
      000305 D0 07            [24] 1677 	pop	ar7
      000307 8A 00            [24] 1678 	mov	ar0,r2
      000309 8B 01            [24] 1679 	mov	ar1,r3
      00030B E4               [12] 1680 	clr	a
      00030C FA               [12] 1681 	mov	r2,a
      00030D FB               [12] 1682 	mov	r3,a
      00030E E8               [12] 1683 	mov	a,r0
      00030F 2C               [12] 1684 	add	a,r4
      000310 FC               [12] 1685 	mov	r4,a
      000311 E9               [12] 1686 	mov	a,r1
      000312 3D               [12] 1687 	addc	a,r5
      000313 FD               [12] 1688 	mov	r5,a
      000314 EA               [12] 1689 	mov	a,r2
      000315 3E               [12] 1690 	addc	a,r6
      000316 FE               [12] 1691 	mov	r6,a
      000317 EB               [12] 1692 	mov	a,r3
      000318 3F               [12] 1693 	addc	a,r7
      000319 FF               [12] 1694 	mov	r7,a
      00031A E5*0C            [12] 1695 	mov	a,_error
      00031C C3               [12] 1696 	clr	c
      00031D 95*0A            [12] 1697 	subb	a,_previous_error
      00031F FA               [12] 1698 	mov	r2,a
      000320 E5*0D            [12] 1699 	mov	a,(_error + 1)
      000322 95*0B            [12] 1700 	subb	a,(_previous_error + 1)
      000324 FB               [12] 1701 	mov	r3,a
      000325 8A*00            [24] 1702 	mov	__mulint_PARM_2,r2
      000327 8B*01            [24] 1703 	mov	(__mulint_PARM_2 + 1),r3
      000329 85*06 82         [24] 1704 	mov	dpl,_kd
      00032C 85*07 83         [24] 1705 	mov	dph,(_kd + 1)
      00032F C0 07            [24] 1706 	push	ar7
      000331 C0 06            [24] 1707 	push	ar6
      000333 C0 05            [24] 1708 	push	ar5
      000335 C0 04            [24] 1709 	push	ar4
      000337 12r00r00         [24] 1710 	lcall	__mulint
      00033A AA 82            [24] 1711 	mov	r2,dpl
      00033C AB 83            [24] 1712 	mov	r3,dph
      00033E D0 04            [24] 1713 	pop	ar4
      000340 D0 05            [24] 1714 	pop	ar5
      000342 D0 06            [24] 1715 	pop	ar6
      000344 D0 07            [24] 1716 	pop	ar7
      000346 8A 00            [24] 1717 	mov	ar0,r2
      000348 8B 01            [24] 1718 	mov	ar1,r3
      00034A E4               [12] 1719 	clr	a
      00034B FA               [12] 1720 	mov	r2,a
      00034C FB               [12] 1721 	mov	r3,a
      00034D E8               [12] 1722 	mov	a,r0
      00034E 2C               [12] 1723 	add	a,r4
      00034F F5*20            [12] 1724 	mov	_temp_motorpw_alg5,a
      000351 E9               [12] 1725 	mov	a,r1
      000352 3D               [12] 1726 	addc	a,r5
      000353 F5*21            [12] 1727 	mov	(_temp_motorpw_alg5 + 1),a
      000355 EA               [12] 1728 	mov	a,r2
      000356 3E               [12] 1729 	addc	a,r6
      000357 F5*22            [12] 1730 	mov	(_temp_motorpw_alg5 + 2),a
      000359 EB               [12] 1731 	mov	a,r3
      00035A 3F               [12] 1732 	addc	a,r7
      00035B F5*23            [12] 1733 	mov	(_temp_motorpw_alg5 + 3),a
                           00035D  1734 	C$worksheet_11.c$57$1$27 ==.
                                   1735 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:57: printf("Algorithm 5, four byte calculation of motorpw is %ld \r\n",temp_motorpw_alg5);
      00035D C0*20            [24] 1736 	push	_temp_motorpw_alg5
      00035F C0*21            [24] 1737 	push	(_temp_motorpw_alg5 + 1)
      000361 C0*22            [24] 1738 	push	(_temp_motorpw_alg5 + 2)
      000363 C0*23            [24] 1739 	push	(_temp_motorpw_alg5 + 3)
      000365 74r0D            [12] 1740 	mov	a,#___str_5
      000367 C0 E0            [24] 1741 	push	acc
      000369 74s01            [12] 1742 	mov	a,#(___str_5 >> 8)
      00036B C0 E0            [24] 1743 	push	acc
      00036D 74 80            [12] 1744 	mov	a,#0x80
      00036F C0 E0            [24] 1745 	push	acc
      000371 12r00r00         [24] 1746 	lcall	_printf
      000374 E5 81            [12] 1747 	mov	a,sp
      000376 24 F9            [12] 1748 	add	a,#0xf9
      000378 F5 81            [12] 1749 	mov	sp,a
                           00037A  1750 	C$worksheet_11.c$59$1$27 ==.
                                   1751 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:59: temp_motorpw_alg6 = (signed long)pw_neut+(signed long)kp*(signed long)error+(signed long)kd*(signed long)(error-previous_error);
      00037A AC*08            [24] 1752 	mov	r4,_pw_neut
      00037C E5*09            [12] 1753 	mov	a,(_pw_neut + 1)
      00037E FD               [12] 1754 	mov	r5,a
      00037F 33               [12] 1755 	rlc	a
      000380 95 E0            [12] 1756 	subb	a,acc
      000382 FE               [12] 1757 	mov	r6,a
      000383 FF               [12] 1758 	mov	r7,a
      000384 A8*04            [24] 1759 	mov	r0,_kp
      000386 A9*05            [24] 1760 	mov	r1,(_kp + 1)
      000388 7A 00            [12] 1761 	mov	r2,#0x00
      00038A 7B 00            [12] 1762 	mov	r3,#0x00
      00038C 85*0C*00         [24] 1763 	mov	__mullong_PARM_2,_error
      00038F E5*0D            [12] 1764 	mov	a,(_error + 1)
      000391 F5*01            [12] 1765 	mov	(__mullong_PARM_2 + 1),a
      000393 33               [12] 1766 	rlc	a
      000394 95 E0            [12] 1767 	subb	a,acc
      000396 F5*02            [12] 1768 	mov	(__mullong_PARM_2 + 2),a
      000398 F5*03            [12] 1769 	mov	(__mullong_PARM_2 + 3),a
      00039A 88 82            [24] 1770 	mov	dpl,r0
      00039C 89 83            [24] 1771 	mov	dph,r1
      00039E 8A F0            [24] 1772 	mov	b,r2
      0003A0 EB               [12] 1773 	mov	a,r3
      0003A1 C0 07            [24] 1774 	push	ar7
      0003A3 C0 06            [24] 1775 	push	ar6
      0003A5 C0 05            [24] 1776 	push	ar5
      0003A7 C0 04            [24] 1777 	push	ar4
      0003A9 12r00r00         [24] 1778 	lcall	__mullong
      0003AC A8 82            [24] 1779 	mov	r0,dpl
      0003AE A9 83            [24] 1780 	mov	r1,dph
      0003B0 AA F0            [24] 1781 	mov	r2,b
      0003B2 FB               [12] 1782 	mov	r3,a
      0003B3 D0 04            [24] 1783 	pop	ar4
      0003B5 D0 05            [24] 1784 	pop	ar5
      0003B7 D0 06            [24] 1785 	pop	ar6
      0003B9 D0 07            [24] 1786 	pop	ar7
      0003BB E8               [12] 1787 	mov	a,r0
      0003BC 2C               [12] 1788 	add	a,r4
      0003BD FC               [12] 1789 	mov	r4,a
      0003BE E9               [12] 1790 	mov	a,r1
      0003BF 3D               [12] 1791 	addc	a,r5
      0003C0 FD               [12] 1792 	mov	r5,a
      0003C1 EA               [12] 1793 	mov	a,r2
      0003C2 3E               [12] 1794 	addc	a,r6
      0003C3 FE               [12] 1795 	mov	r6,a
      0003C4 EB               [12] 1796 	mov	a,r3
      0003C5 3F               [12] 1797 	addc	a,r7
      0003C6 FF               [12] 1798 	mov	r7,a
      0003C7 85*06*28         [24] 1799 	mov	_main_sloc0_1_0,_kd
      0003CA 85*07*29         [24] 1800 	mov	(_main_sloc0_1_0 + 1),(_kd + 1)
      0003CD E4               [12] 1801 	clr	a
      0003CE F5*2A            [12] 1802 	mov	(_main_sloc0_1_0 + 2),a
      0003D0 F5*2B            [12] 1803 	mov	(_main_sloc0_1_0 + 3),a
      0003D2 E5*0C            [12] 1804 	mov	a,_error
      0003D4 C3               [12] 1805 	clr	c
      0003D5 95*0A            [12] 1806 	subb	a,_previous_error
      0003D7 FA               [12] 1807 	mov	r2,a
      0003D8 E5*0D            [12] 1808 	mov	a,(_error + 1)
      0003DA 95*0B            [12] 1809 	subb	a,(_previous_error + 1)
      0003DC 8A*00            [24] 1810 	mov	__mullong_PARM_2,r2
      0003DE F5*01            [12] 1811 	mov	(__mullong_PARM_2 + 1),a
      0003E0 33               [12] 1812 	rlc	a
      0003E1 95 E0            [12] 1813 	subb	a,acc
      0003E3 F5*02            [12] 1814 	mov	(__mullong_PARM_2 + 2),a
      0003E5 F5*03            [12] 1815 	mov	(__mullong_PARM_2 + 3),a
      0003E7 85*28 82         [24] 1816 	mov	dpl,_main_sloc0_1_0
      0003EA 85*29 83         [24] 1817 	mov	dph,(_main_sloc0_1_0 + 1)
      0003ED 85*2A F0         [24] 1818 	mov	b,(_main_sloc0_1_0 + 2)
      0003F0 E5*2B            [12] 1819 	mov	a,(_main_sloc0_1_0 + 3)
      0003F2 C0 07            [24] 1820 	push	ar7
      0003F4 C0 06            [24] 1821 	push	ar6
      0003F6 C0 05            [24] 1822 	push	ar5
      0003F8 C0 04            [24] 1823 	push	ar4
      0003FA 12r00r00         [24] 1824 	lcall	__mullong
      0003FD A8 82            [24] 1825 	mov	r0,dpl
      0003FF A9 83            [24] 1826 	mov	r1,dph
      000401 AA F0            [24] 1827 	mov	r2,b
      000403 FB               [12] 1828 	mov	r3,a
      000404 D0 04            [24] 1829 	pop	ar4
      000406 D0 05            [24] 1830 	pop	ar5
      000408 D0 06            [24] 1831 	pop	ar6
      00040A D0 07            [24] 1832 	pop	ar7
      00040C E8               [12] 1833 	mov	a,r0
      00040D 2C               [12] 1834 	add	a,r4
      00040E F5*24            [12] 1835 	mov	_temp_motorpw_alg6,a
      000410 E9               [12] 1836 	mov	a,r1
      000411 3D               [12] 1837 	addc	a,r5
      000412 F5*25            [12] 1838 	mov	(_temp_motorpw_alg6 + 1),a
      000414 EA               [12] 1839 	mov	a,r2
      000415 3E               [12] 1840 	addc	a,r6
      000416 F5*26            [12] 1841 	mov	(_temp_motorpw_alg6 + 2),a
      000418 EB               [12] 1842 	mov	a,r3
      000419 3F               [12] 1843 	addc	a,r7
      00041A F5*27            [12] 1844 	mov	(_temp_motorpw_alg6 + 3),a
                           00041C  1845 	C$worksheet_11.c$60$1$27 ==.
                                   1846 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:60: printf("Algorithm 6, four byte calculation of motorpw is %ld \r\n",temp_motorpw_alg6);
      00041C C0*24            [24] 1847 	push	_temp_motorpw_alg6
      00041E C0*25            [24] 1848 	push	(_temp_motorpw_alg6 + 1)
      000420 C0*26            [24] 1849 	push	(_temp_motorpw_alg6 + 2)
      000422 C0*27            [24] 1850 	push	(_temp_motorpw_alg6 + 3)
      000424 74r45            [12] 1851 	mov	a,#___str_6
      000426 C0 E0            [24] 1852 	push	acc
      000428 74s01            [12] 1853 	mov	a,#(___str_6 >> 8)
      00042A C0 E0            [24] 1854 	push	acc
      00042C 74 80            [12] 1855 	mov	a,#0x80
      00042E C0 E0            [24] 1856 	push	acc
      000430 12r00r00         [24] 1857 	lcall	_printf
      000433 E5 81            [12] 1858 	mov	a,sp
      000435 24 F9            [12] 1859 	add	a,#0xf9
      000437 F5 81            [12] 1860 	mov	sp,a
                           000439  1861 	C$worksheet_11.c$61$1$27 ==.
                                   1862 ;	C:\Users\Tim\Documents\LITEC\Lab6\worksheet_11.c:61: getchar();
      000439 12r00r54         [24] 1863 	lcall	_getchar
                           00043C  1864 	C$worksheet_11.c$62$1$27 ==.
                           00043C  1865 	XG$main$0$0 ==.
      00043C 22               [24] 1866 	ret
                                   1867 	.area CSEG    (CODE)
                                   1868 	.area CONST   (CODE)
                           000000  1869 Fworksheet_11$__str_0$0$0 == .
      000000                       1870 ___str_0:
      000000 54 68 65 20 74 77 6F  1871 	.ascii "The two byte calculation of motorpw is %d "
             20 62 79 74 65 20 63
             61 6C 63 75 6C 61 74
             69 6F 6E 20 6F 66 20
             6D 6F 74 6F 72 70 77
             20 69 73 20 25 64 20
      00002A 0D                    1872 	.db 0x0d
      00002B 0A                    1873 	.db 0x0a
      00002C 00                    1874 	.db 0x00
                           00002D  1875 Fworksheet_11$__str_1$0$0 == .
      00002D                       1876 ___str_1:
      00002D 41 6C 67 6F 72 69 74  1877 	.ascii "Algorithm 1, four byte calculation of motorpw is %ld "
             68 6D 20 31 2C 20 66
             6F 75 72 20 62 79 74
             65 20 63 61 6C 63 75
             6C 61 74 69 6F 6E 20
             6F 66 20 6D 6F 74 6F
             72 70 77 20 69 73 20
             25 6C 64 20
      000062 0D                    1878 	.db 0x0d
      000063 0A                    1879 	.db 0x0a
      000064 00                    1880 	.db 0x00
                           000065  1881 Fworksheet_11$__str_2$0$0 == .
      000065                       1882 ___str_2:
      000065 41 6C 67 6F 72 69 74  1883 	.ascii "Algorithm 2, four byte calculation of motorpw is %ld "
             68 6D 20 32 2C 20 66
             6F 75 72 20 62 79 74
             65 20 63 61 6C 63 75
             6C 61 74 69 6F 6E 20
             6F 66 20 6D 6F 74 6F
             72 70 77 20 69 73 20
             25 6C 64 20
      00009A 0D                    1884 	.db 0x0d
      00009B 0A                    1885 	.db 0x0a
      00009C 00                    1886 	.db 0x00
                           00009D  1887 Fworksheet_11$__str_3$0$0 == .
      00009D                       1888 ___str_3:
      00009D 41 6C 67 6F 72 69 74  1889 	.ascii "Algorithm 3, four byte calculation of motorpw is %ld "
             68 6D 20 33 2C 20 66
             6F 75 72 20 62 79 74
             65 20 63 61 6C 63 75
             6C 61 74 69 6F 6E 20
             6F 66 20 6D 6F 74 6F
             72 70 77 20 69 73 20
             25 6C 64 20
      0000D2 0D                    1890 	.db 0x0d
      0000D3 0A                    1891 	.db 0x0a
      0000D4 00                    1892 	.db 0x00
                           0000D5  1893 Fworksheet_11$__str_4$0$0 == .
      0000D5                       1894 ___str_4:
      0000D5 41 6C 67 6F 72 69 74  1895 	.ascii "Algorithm 4, four byte calculation of motorpw is %ld "
             68 6D 20 34 2C 20 66
             6F 75 72 20 62 79 74
             65 20 63 61 6C 63 75
             6C 61 74 69 6F 6E 20
             6F 66 20 6D 6F 74 6F
             72 70 77 20 69 73 20
             25 6C 64 20
      00010A 0D                    1896 	.db 0x0d
      00010B 0A                    1897 	.db 0x0a
      00010C 00                    1898 	.db 0x00
                           00010D  1899 Fworksheet_11$__str_5$0$0 == .
      00010D                       1900 ___str_5:
      00010D 41 6C 67 6F 72 69 74  1901 	.ascii "Algorithm 5, four byte calculation of motorpw is %ld "
             68 6D 20 35 2C 20 66
             6F 75 72 20 62 79 74
             65 20 63 61 6C 63 75
             6C 61 74 69 6F 6E 20
             6F 66 20 6D 6F 74 6F
             72 70 77 20 69 73 20
             25 6C 64 20
      000142 0D                    1902 	.db 0x0d
      000143 0A                    1903 	.db 0x0a
      000144 00                    1904 	.db 0x00
                           000145  1905 Fworksheet_11$__str_6$0$0 == .
      000145                       1906 ___str_6:
      000145 41 6C 67 6F 72 69 74  1907 	.ascii "Algorithm 6, four byte calculation of motorpw is %ld "
             68 6D 20 36 2C 20 66
             6F 75 72 20 62 79 74
             65 20 63 61 6C 63 75
             6C 61 74 69 6F 6E 20
             6F 66 20 6D 6F 74 6F
             72 70 77 20 69 73 20
             25 6C 64 20
      00017A 0D                    1908 	.db 0x0d
      00017B 0A                    1909 	.db 0x0a
      00017C 00                    1910 	.db 0x00
                                   1911 	.area XINIT   (CODE)
                                   1912 	.area CABS    (ABS,CODE)
