                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lab4k__1_
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_keypad
                                     13 	.globl _strlen
                                     14 	.globl _putchar
                                     15 	.globl _getchar
                                     16 	.globl _vsprintf
                                     17 	.globl _printf
                                     18 	.globl _getchar_nw
                                     19 	.globl _Sys_Init
                                     20 	.globl _UART0_Init
                                     21 	.globl _SYSCLK_Init
                                     22 	.globl _LED
                                     23 	.globl _mSS
                                     24 	.globl _BUS_SCL
                                     25 	.globl _BUS_TOE
                                     26 	.globl _BUS_FTE
                                     27 	.globl _BUS_AA
                                     28 	.globl _BUS_INT
                                     29 	.globl _BUS_STOP
                                     30 	.globl _BUS_START
                                     31 	.globl _BUS_EN
                                     32 	.globl _BUS_BUSY
                                     33 	.globl _SPIF
                                     34 	.globl _WCOL
                                     35 	.globl _MODF
                                     36 	.globl _RXOVRN
                                     37 	.globl _TXBSY
                                     38 	.globl _SLVSEL
                                     39 	.globl _MSTEN
                                     40 	.globl _SPIEN
                                     41 	.globl _AD0EN
                                     42 	.globl _ADCEN
                                     43 	.globl _AD0TM
                                     44 	.globl _ADCTM
                                     45 	.globl _AD0INT
                                     46 	.globl _ADCINT
                                     47 	.globl _AD0BUSY
                                     48 	.globl _ADBUSY
                                     49 	.globl _AD0CM1
                                     50 	.globl _ADSTM1
                                     51 	.globl _AD0CM0
                                     52 	.globl _ADSTM0
                                     53 	.globl _AD0WINT
                                     54 	.globl _ADWINT
                                     55 	.globl _AD0LJST
                                     56 	.globl _ADLJST
                                     57 	.globl _CF
                                     58 	.globl _CR
                                     59 	.globl _CCF4
                                     60 	.globl _CCF3
                                     61 	.globl _CCF2
                                     62 	.globl _CCF1
                                     63 	.globl _CCF0
                                     64 	.globl _CY
                                     65 	.globl _AC
                                     66 	.globl _F0
                                     67 	.globl _RS1
                                     68 	.globl _RS0
                                     69 	.globl _OV
                                     70 	.globl _F1
                                     71 	.globl _P
                                     72 	.globl _TF2
                                     73 	.globl _EXF2
                                     74 	.globl _RCLK
                                     75 	.globl _TCLK
                                     76 	.globl _EXEN2
                                     77 	.globl _TR2
                                     78 	.globl _CT2
                                     79 	.globl _CPRL2
                                     80 	.globl _BUSY
                                     81 	.globl _ENSMB
                                     82 	.globl _STA
                                     83 	.globl _STO
                                     84 	.globl _SI
                                     85 	.globl _AA
                                     86 	.globl _SMBFTE
                                     87 	.globl _SMBTOE
                                     88 	.globl _PT2
                                     89 	.globl _PS
                                     90 	.globl _PS0
                                     91 	.globl _PT1
                                     92 	.globl _PX1
                                     93 	.globl _PT0
                                     94 	.globl _PX0
                                     95 	.globl _P3_7
                                     96 	.globl _P3_6
                                     97 	.globl _P3_5
                                     98 	.globl _P3_4
                                     99 	.globl _P3_3
                                    100 	.globl _P3_2
                                    101 	.globl _P3_1
                                    102 	.globl _P3_0
                                    103 	.globl _EA
                                    104 	.globl _ET2
                                    105 	.globl _ES
                                    106 	.globl _ES0
                                    107 	.globl _ET1
                                    108 	.globl _EX1
                                    109 	.globl _ET0
                                    110 	.globl _EX0
                                    111 	.globl _P2_7
                                    112 	.globl _P2_6
                                    113 	.globl _P2_5
                                    114 	.globl _P2_4
                                    115 	.globl _P2_3
                                    116 	.globl _P2_2
                                    117 	.globl _P2_1
                                    118 	.globl _P2_0
                                    119 	.globl _S0MODE
                                    120 	.globl _SM00
                                    121 	.globl _SM0
                                    122 	.globl _SM10
                                    123 	.globl _SM1
                                    124 	.globl _MCE0
                                    125 	.globl _SM20
                                    126 	.globl _SM2
                                    127 	.globl _REN0
                                    128 	.globl _REN
                                    129 	.globl _TB80
                                    130 	.globl _TB8
                                    131 	.globl _RB80
                                    132 	.globl _RB8
                                    133 	.globl _TI0
                                    134 	.globl _TI
                                    135 	.globl _RI0
                                    136 	.globl _RI
                                    137 	.globl _P1_7
                                    138 	.globl _P1_6
                                    139 	.globl _P1_5
                                    140 	.globl _P1_4
                                    141 	.globl _P1_3
                                    142 	.globl _P1_2
                                    143 	.globl _P1_1
                                    144 	.globl _P1_0
                                    145 	.globl _TF1
                                    146 	.globl _TR1
                                    147 	.globl _TF0
                                    148 	.globl _TR0
                                    149 	.globl _IE1
                                    150 	.globl _IT1
                                    151 	.globl _IE0
                                    152 	.globl _IT0
                                    153 	.globl _P0_7
                                    154 	.globl _P0_6
                                    155 	.globl _P0_5
                                    156 	.globl _P0_4
                                    157 	.globl _P0_3
                                    158 	.globl _P0_2
                                    159 	.globl _P0_1
                                    160 	.globl _P0_0
                                    161 	.globl _PCA0CP4
                                    162 	.globl _PCA0CP3
                                    163 	.globl _PCA0CP2
                                    164 	.globl _PCA0CP1
                                    165 	.globl _PCA0CP0
                                    166 	.globl _PCA0
                                    167 	.globl _DAC1
                                    168 	.globl _DAC0
                                    169 	.globl _ADC0LT
                                    170 	.globl _ADC0GT
                                    171 	.globl _ADC0
                                    172 	.globl _RCAP4
                                    173 	.globl _TMR4
                                    174 	.globl _TMR3RL
                                    175 	.globl _TMR3
                                    176 	.globl _RCAP2
                                    177 	.globl _TMR2
                                    178 	.globl _TMR1
                                    179 	.globl _TMR0
                                    180 	.globl _WDTCN
                                    181 	.globl _PCA0CPH4
                                    182 	.globl _PCA0CPH3
                                    183 	.globl _PCA0CPH2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPH0
                                    186 	.globl _PCA0H
                                    187 	.globl _SPI0CN
                                    188 	.globl _EIP2
                                    189 	.globl _EIP1
                                    190 	.globl _TH4
                                    191 	.globl _TL4
                                    192 	.globl _SADDR1
                                    193 	.globl _SBUF1
                                    194 	.globl _SCON1
                                    195 	.globl _B
                                    196 	.globl _RSTSRC
                                    197 	.globl _PCA0CPL4
                                    198 	.globl _PCA0CPL3
                                    199 	.globl _PCA0CPL2
                                    200 	.globl _PCA0CPL1
                                    201 	.globl _PCA0CPL0
                                    202 	.globl _PCA0L
                                    203 	.globl _ADC0CN
                                    204 	.globl _EIE2
                                    205 	.globl _EIE1
                                    206 	.globl _RCAP4H
                                    207 	.globl _RCAP4L
                                    208 	.globl _XBR2
                                    209 	.globl _XBR1
                                    210 	.globl _XBR0
                                    211 	.globl _ACC
                                    212 	.globl _PCA0CPM4
                                    213 	.globl _PCA0CPM3
                                    214 	.globl _PCA0CPM2
                                    215 	.globl _PCA0CPM1
                                    216 	.globl _PCA0CPM0
                                    217 	.globl _PCA0MD
                                    218 	.globl _PCA0CN
                                    219 	.globl _DAC1CN
                                    220 	.globl _DAC1H
                                    221 	.globl _DAC1L
                                    222 	.globl _DAC0CN
                                    223 	.globl _DAC0H
                                    224 	.globl _DAC0L
                                    225 	.globl _REF0CN
                                    226 	.globl _PSW
                                    227 	.globl _SMB0CR
                                    228 	.globl _TH2
                                    229 	.globl _TL2
                                    230 	.globl _RCAP2H
                                    231 	.globl _RCAP2L
                                    232 	.globl _T4CON
                                    233 	.globl _T2CON
                                    234 	.globl _ADC0LTH
                                    235 	.globl _ADC0LTL
                                    236 	.globl _ADC0GTH
                                    237 	.globl _ADC0GTL
                                    238 	.globl _SMB0ADR
                                    239 	.globl _SMB0DAT
                                    240 	.globl _SMB0STA
                                    241 	.globl _SMB0CN
                                    242 	.globl _ADC0H
                                    243 	.globl _ADC0L
                                    244 	.globl _P1MDIN
                                    245 	.globl _ADC0CF
                                    246 	.globl _AMX0SL
                                    247 	.globl _AMX0CF
                                    248 	.globl _SADEN0
                                    249 	.globl _IP
                                    250 	.globl _FLACL
                                    251 	.globl _FLSCL
                                    252 	.globl _P74OUT
                                    253 	.globl _OSCICN
                                    254 	.globl _OSCXCN
                                    255 	.globl _P3
                                    256 	.globl __XPAGE
                                    257 	.globl _EMI0CN
                                    258 	.globl _SADEN1
                                    259 	.globl _P3IF
                                    260 	.globl _AMX1SL
                                    261 	.globl _ADC1CF
                                    262 	.globl _ADC1CN
                                    263 	.globl _SADDR0
                                    264 	.globl _IE
                                    265 	.globl _P3MDOUT
                                    266 	.globl _PRT3CF
                                    267 	.globl _P2MDOUT
                                    268 	.globl _PRT2CF
                                    269 	.globl _P1MDOUT
                                    270 	.globl _PRT1CF
                                    271 	.globl _P0MDOUT
                                    272 	.globl _PRT0CF
                                    273 	.globl _EMI0CF
                                    274 	.globl _EMI0TC
                                    275 	.globl _P2
                                    276 	.globl _CPT1CN
                                    277 	.globl _CPT0CN
                                    278 	.globl _SPI0CKR
                                    279 	.globl _ADC1
                                    280 	.globl _SPI0DAT
                                    281 	.globl _SPI0CFG
                                    282 	.globl _SBUF0
                                    283 	.globl _SBUF
                                    284 	.globl _SCON0
                                    285 	.globl _SCON
                                    286 	.globl _P7
                                    287 	.globl _TMR3H
                                    288 	.globl _TMR3L
                                    289 	.globl _TMR3RLH
                                    290 	.globl _TMR3RLL
                                    291 	.globl _TMR3CN
                                    292 	.globl _P1
                                    293 	.globl _PSCTL
                                    294 	.globl _CKCON
                                    295 	.globl _TH1
                                    296 	.globl _TH0
                                    297 	.globl _TL1
                                    298 	.globl _TL0
                                    299 	.globl _TMOD
                                    300 	.globl _TCON
                                    301 	.globl _PCON
                                    302 	.globl _P6
                                    303 	.globl _P5
                                    304 	.globl _P4
                                    305 	.globl _DPH
                                    306 	.globl _DPL
                                    307 	.globl _SP
                                    308 	.globl _P0
                                    309 	.globl _mPW_MAX
                                    310 	.globl _mPW_MIN
                                    311 	.globl _mPW_CENTER
                                    312 	.globl _sPW_MAX
                                    313 	.globl _sPW_MIN
                                    314 	.globl _sPW_CENTER
                                    315 	.globl _voltage
                                    316 	.globl _adc_value
                                    317 	.globl _error
                                    318 	.globl _desired_heading
                                    319 	.globl _new_heading
                                    320 	.globl _h_Counts
                                    321 	.globl _heading
                                    322 	.globl _c_Data
                                    323 	.globl _c_addr
                                    324 	.globl _new_range
                                    325 	.globl _r_Counts
                                    326 	.globl _r_addr
                                    327 	.globl _range
                                    328 	.globl _r_Data
                                    329 	.globl _dist
                                    330 	.globl _mPW
                                    331 	.globl _sPW
                                    332 	.globl _Counts
                                    333 	.globl _i2c_read_data_PARM_4
                                    334 	.globl _i2c_read_data_PARM_3
                                    335 	.globl _i2c_read_data_PARM_2
                                    336 	.globl _i2c_write_data_PARM_4
                                    337 	.globl _i2c_write_data_PARM_3
                                    338 	.globl _i2c_write_data_PARM_2
                                    339 	.globl _aligned_alloc_PARM_2
                                    340 	.globl _Data2
                                    341 	.globl _lcd_print
                                    342 	.globl _lcd_clear
                                    343 	.globl _kpd_input
                                    344 	.globl _delay_time
                                    345 	.globl _i2c_start
                                    346 	.globl _i2c_write
                                    347 	.globl _i2c_write_and_stop
                                    348 	.globl _i2c_read
                                    349 	.globl _i2c_read_and_stop
                                    350 	.globl _i2c_write_data
                                    351 	.globl _i2c_read_data
                                    352 	.globl _Accel_Init
                                    353 	.globl _Accel_Init_C
                                    354 	.globl _Port_Init
                                    355 	.globl _XBR0_Init
                                    356 	.globl _PCA_Init
                                    357 	.globl _SMB_Init
                                    358 	.globl _ADC_Init
                                    359 	.globl _read_ADC_value
                                    360 	.globl _read_battery_voltage
                                    361 	.globl _PCA_ISR
                                    362 	.globl _CarControl
                                    363 	.globl _Set_Pulsewidth
                                    364 	.globl _Set_Overide
                                    365 	.globl _Set_Speed
                                    366 	.globl _Set_Heading
                                    367 	.globl _ReadRanger
                                    368 	.globl _ReadCompass
                                    369 ;--------------------------------------------------------
                                    370 ; special function registers
                                    371 ;--------------------------------------------------------
                                    372 	.area RSEG    (ABS,DATA)
      000000                        373 	.org 0x0000
                           000080   374 G$P0$0$0 == 0x0080
                           000080   375 _P0	=	0x0080
                           000081   376 G$SP$0$0 == 0x0081
                           000081   377 _SP	=	0x0081
                           000082   378 G$DPL$0$0 == 0x0082
                           000082   379 _DPL	=	0x0082
                           000083   380 G$DPH$0$0 == 0x0083
                           000083   381 _DPH	=	0x0083
                           000084   382 G$P4$0$0 == 0x0084
                           000084   383 _P4	=	0x0084
                           000085   384 G$P5$0$0 == 0x0085
                           000085   385 _P5	=	0x0085
                           000086   386 G$P6$0$0 == 0x0086
                           000086   387 _P6	=	0x0086
                           000087   388 G$PCON$0$0 == 0x0087
                           000087   389 _PCON	=	0x0087
                           000088   390 G$TCON$0$0 == 0x0088
                           000088   391 _TCON	=	0x0088
                           000089   392 G$TMOD$0$0 == 0x0089
                           000089   393 _TMOD	=	0x0089
                           00008A   394 G$TL0$0$0 == 0x008a
                           00008A   395 _TL0	=	0x008a
                           00008B   396 G$TL1$0$0 == 0x008b
                           00008B   397 _TL1	=	0x008b
                           00008C   398 G$TH0$0$0 == 0x008c
                           00008C   399 _TH0	=	0x008c
                           00008D   400 G$TH1$0$0 == 0x008d
                           00008D   401 _TH1	=	0x008d
                           00008E   402 G$CKCON$0$0 == 0x008e
                           00008E   403 _CKCON	=	0x008e
                           00008F   404 G$PSCTL$0$0 == 0x008f
                           00008F   405 _PSCTL	=	0x008f
                           000090   406 G$P1$0$0 == 0x0090
                           000090   407 _P1	=	0x0090
                           000091   408 G$TMR3CN$0$0 == 0x0091
                           000091   409 _TMR3CN	=	0x0091
                           000092   410 G$TMR3RLL$0$0 == 0x0092
                           000092   411 _TMR3RLL	=	0x0092
                           000093   412 G$TMR3RLH$0$0 == 0x0093
                           000093   413 _TMR3RLH	=	0x0093
                           000094   414 G$TMR3L$0$0 == 0x0094
                           000094   415 _TMR3L	=	0x0094
                           000095   416 G$TMR3H$0$0 == 0x0095
                           000095   417 _TMR3H	=	0x0095
                           000096   418 G$P7$0$0 == 0x0096
                           000096   419 _P7	=	0x0096
                           000098   420 G$SCON$0$0 == 0x0098
                           000098   421 _SCON	=	0x0098
                           000098   422 G$SCON0$0$0 == 0x0098
                           000098   423 _SCON0	=	0x0098
                           000099   424 G$SBUF$0$0 == 0x0099
                           000099   425 _SBUF	=	0x0099
                           000099   426 G$SBUF0$0$0 == 0x0099
                           000099   427 _SBUF0	=	0x0099
                           00009A   428 G$SPI0CFG$0$0 == 0x009a
                           00009A   429 _SPI0CFG	=	0x009a
                           00009B   430 G$SPI0DAT$0$0 == 0x009b
                           00009B   431 _SPI0DAT	=	0x009b
                           00009C   432 G$ADC1$0$0 == 0x009c
                           00009C   433 _ADC1	=	0x009c
                           00009D   434 G$SPI0CKR$0$0 == 0x009d
                           00009D   435 _SPI0CKR	=	0x009d
                           00009E   436 G$CPT0CN$0$0 == 0x009e
                           00009E   437 _CPT0CN	=	0x009e
                           00009F   438 G$CPT1CN$0$0 == 0x009f
                           00009F   439 _CPT1CN	=	0x009f
                           0000A0   440 G$P2$0$0 == 0x00a0
                           0000A0   441 _P2	=	0x00a0
                           0000A1   442 G$EMI0TC$0$0 == 0x00a1
                           0000A1   443 _EMI0TC	=	0x00a1
                           0000A3   444 G$EMI0CF$0$0 == 0x00a3
                           0000A3   445 _EMI0CF	=	0x00a3
                           0000A4   446 G$PRT0CF$0$0 == 0x00a4
                           0000A4   447 _PRT0CF	=	0x00a4
                           0000A4   448 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   449 _P0MDOUT	=	0x00a4
                           0000A5   450 G$PRT1CF$0$0 == 0x00a5
                           0000A5   451 _PRT1CF	=	0x00a5
                           0000A5   452 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   453 _P1MDOUT	=	0x00a5
                           0000A6   454 G$PRT2CF$0$0 == 0x00a6
                           0000A6   455 _PRT2CF	=	0x00a6
                           0000A6   456 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   457 _P2MDOUT	=	0x00a6
                           0000A7   458 G$PRT3CF$0$0 == 0x00a7
                           0000A7   459 _PRT3CF	=	0x00a7
                           0000A7   460 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   461 _P3MDOUT	=	0x00a7
                           0000A8   462 G$IE$0$0 == 0x00a8
                           0000A8   463 _IE	=	0x00a8
                           0000A9   464 G$SADDR0$0$0 == 0x00a9
                           0000A9   465 _SADDR0	=	0x00a9
                           0000AA   466 G$ADC1CN$0$0 == 0x00aa
                           0000AA   467 _ADC1CN	=	0x00aa
                           0000AB   468 G$ADC1CF$0$0 == 0x00ab
                           0000AB   469 _ADC1CF	=	0x00ab
                           0000AC   470 G$AMX1SL$0$0 == 0x00ac
                           0000AC   471 _AMX1SL	=	0x00ac
                           0000AD   472 G$P3IF$0$0 == 0x00ad
                           0000AD   473 _P3IF	=	0x00ad
                           0000AE   474 G$SADEN1$0$0 == 0x00ae
                           0000AE   475 _SADEN1	=	0x00ae
                           0000AF   476 G$EMI0CN$0$0 == 0x00af
                           0000AF   477 _EMI0CN	=	0x00af
                           0000AF   478 G$_XPAGE$0$0 == 0x00af
                           0000AF   479 __XPAGE	=	0x00af
                           0000B0   480 G$P3$0$0 == 0x00b0
                           0000B0   481 _P3	=	0x00b0
                           0000B1   482 G$OSCXCN$0$0 == 0x00b1
                           0000B1   483 _OSCXCN	=	0x00b1
                           0000B2   484 G$OSCICN$0$0 == 0x00b2
                           0000B2   485 _OSCICN	=	0x00b2
                           0000B5   486 G$P74OUT$0$0 == 0x00b5
                           0000B5   487 _P74OUT	=	0x00b5
                           0000B6   488 G$FLSCL$0$0 == 0x00b6
                           0000B6   489 _FLSCL	=	0x00b6
                           0000B7   490 G$FLACL$0$0 == 0x00b7
                           0000B7   491 _FLACL	=	0x00b7
                           0000B8   492 G$IP$0$0 == 0x00b8
                           0000B8   493 _IP	=	0x00b8
                           0000B9   494 G$SADEN0$0$0 == 0x00b9
                           0000B9   495 _SADEN0	=	0x00b9
                           0000BA   496 G$AMX0CF$0$0 == 0x00ba
                           0000BA   497 _AMX0CF	=	0x00ba
                           0000BB   498 G$AMX0SL$0$0 == 0x00bb
                           0000BB   499 _AMX0SL	=	0x00bb
                           0000BC   500 G$ADC0CF$0$0 == 0x00bc
                           0000BC   501 _ADC0CF	=	0x00bc
                           0000BD   502 G$P1MDIN$0$0 == 0x00bd
                           0000BD   503 _P1MDIN	=	0x00bd
                           0000BE   504 G$ADC0L$0$0 == 0x00be
                           0000BE   505 _ADC0L	=	0x00be
                           0000BF   506 G$ADC0H$0$0 == 0x00bf
                           0000BF   507 _ADC0H	=	0x00bf
                           0000C0   508 G$SMB0CN$0$0 == 0x00c0
                           0000C0   509 _SMB0CN	=	0x00c0
                           0000C1   510 G$SMB0STA$0$0 == 0x00c1
                           0000C1   511 _SMB0STA	=	0x00c1
                           0000C2   512 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   513 _SMB0DAT	=	0x00c2
                           0000C3   514 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   515 _SMB0ADR	=	0x00c3
                           0000C4   516 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   517 _ADC0GTL	=	0x00c4
                           0000C5   518 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   519 _ADC0GTH	=	0x00c5
                           0000C6   520 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   521 _ADC0LTL	=	0x00c6
                           0000C7   522 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   523 _ADC0LTH	=	0x00c7
                           0000C8   524 G$T2CON$0$0 == 0x00c8
                           0000C8   525 _T2CON	=	0x00c8
                           0000C9   526 G$T4CON$0$0 == 0x00c9
                           0000C9   527 _T4CON	=	0x00c9
                           0000CA   528 G$RCAP2L$0$0 == 0x00ca
                           0000CA   529 _RCAP2L	=	0x00ca
                           0000CB   530 G$RCAP2H$0$0 == 0x00cb
                           0000CB   531 _RCAP2H	=	0x00cb
                           0000CC   532 G$TL2$0$0 == 0x00cc
                           0000CC   533 _TL2	=	0x00cc
                           0000CD   534 G$TH2$0$0 == 0x00cd
                           0000CD   535 _TH2	=	0x00cd
                           0000CF   536 G$SMB0CR$0$0 == 0x00cf
                           0000CF   537 _SMB0CR	=	0x00cf
                           0000D0   538 G$PSW$0$0 == 0x00d0
                           0000D0   539 _PSW	=	0x00d0
                           0000D1   540 G$REF0CN$0$0 == 0x00d1
                           0000D1   541 _REF0CN	=	0x00d1
                           0000D2   542 G$DAC0L$0$0 == 0x00d2
                           0000D2   543 _DAC0L	=	0x00d2
                           0000D3   544 G$DAC0H$0$0 == 0x00d3
                           0000D3   545 _DAC0H	=	0x00d3
                           0000D4   546 G$DAC0CN$0$0 == 0x00d4
                           0000D4   547 _DAC0CN	=	0x00d4
                           0000D5   548 G$DAC1L$0$0 == 0x00d5
                           0000D5   549 _DAC1L	=	0x00d5
                           0000D6   550 G$DAC1H$0$0 == 0x00d6
                           0000D6   551 _DAC1H	=	0x00d6
                           0000D7   552 G$DAC1CN$0$0 == 0x00d7
                           0000D7   553 _DAC1CN	=	0x00d7
                           0000D8   554 G$PCA0CN$0$0 == 0x00d8
                           0000D8   555 _PCA0CN	=	0x00d8
                           0000D9   556 G$PCA0MD$0$0 == 0x00d9
                           0000D9   557 _PCA0MD	=	0x00d9
                           0000DA   558 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   559 _PCA0CPM0	=	0x00da
                           0000DB   560 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   561 _PCA0CPM1	=	0x00db
                           0000DC   562 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   563 _PCA0CPM2	=	0x00dc
                           0000DD   564 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   565 _PCA0CPM3	=	0x00dd
                           0000DE   566 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   567 _PCA0CPM4	=	0x00de
                           0000E0   568 G$ACC$0$0 == 0x00e0
                           0000E0   569 _ACC	=	0x00e0
                           0000E1   570 G$XBR0$0$0 == 0x00e1
                           0000E1   571 _XBR0	=	0x00e1
                           0000E2   572 G$XBR1$0$0 == 0x00e2
                           0000E2   573 _XBR1	=	0x00e2
                           0000E3   574 G$XBR2$0$0 == 0x00e3
                           0000E3   575 _XBR2	=	0x00e3
                           0000E4   576 G$RCAP4L$0$0 == 0x00e4
                           0000E4   577 _RCAP4L	=	0x00e4
                           0000E5   578 G$RCAP4H$0$0 == 0x00e5
                           0000E5   579 _RCAP4H	=	0x00e5
                           0000E6   580 G$EIE1$0$0 == 0x00e6
                           0000E6   581 _EIE1	=	0x00e6
                           0000E7   582 G$EIE2$0$0 == 0x00e7
                           0000E7   583 _EIE2	=	0x00e7
                           0000E8   584 G$ADC0CN$0$0 == 0x00e8
                           0000E8   585 _ADC0CN	=	0x00e8
                           0000E9   586 G$PCA0L$0$0 == 0x00e9
                           0000E9   587 _PCA0L	=	0x00e9
                           0000EA   588 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   589 _PCA0CPL0	=	0x00ea
                           0000EB   590 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   591 _PCA0CPL1	=	0x00eb
                           0000EC   592 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   593 _PCA0CPL2	=	0x00ec
                           0000ED   594 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   595 _PCA0CPL3	=	0x00ed
                           0000EE   596 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   597 _PCA0CPL4	=	0x00ee
                           0000EF   598 G$RSTSRC$0$0 == 0x00ef
                           0000EF   599 _RSTSRC	=	0x00ef
                           0000F0   600 G$B$0$0 == 0x00f0
                           0000F0   601 _B	=	0x00f0
                           0000F1   602 G$SCON1$0$0 == 0x00f1
                           0000F1   603 _SCON1	=	0x00f1
                           0000F2   604 G$SBUF1$0$0 == 0x00f2
                           0000F2   605 _SBUF1	=	0x00f2
                           0000F3   606 G$SADDR1$0$0 == 0x00f3
                           0000F3   607 _SADDR1	=	0x00f3
                           0000F4   608 G$TL4$0$0 == 0x00f4
                           0000F4   609 _TL4	=	0x00f4
                           0000F5   610 G$TH4$0$0 == 0x00f5
                           0000F5   611 _TH4	=	0x00f5
                           0000F6   612 G$EIP1$0$0 == 0x00f6
                           0000F6   613 _EIP1	=	0x00f6
                           0000F7   614 G$EIP2$0$0 == 0x00f7
                           0000F7   615 _EIP2	=	0x00f7
                           0000F8   616 G$SPI0CN$0$0 == 0x00f8
                           0000F8   617 _SPI0CN	=	0x00f8
                           0000F9   618 G$PCA0H$0$0 == 0x00f9
                           0000F9   619 _PCA0H	=	0x00f9
                           0000FA   620 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   621 _PCA0CPH0	=	0x00fa
                           0000FB   622 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   623 _PCA0CPH1	=	0x00fb
                           0000FC   624 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   625 _PCA0CPH2	=	0x00fc
                           0000FD   626 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   627 _PCA0CPH3	=	0x00fd
                           0000FE   628 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   629 _PCA0CPH4	=	0x00fe
                           0000FF   630 G$WDTCN$0$0 == 0x00ff
                           0000FF   631 _WDTCN	=	0x00ff
                           008C8A   632 G$TMR0$0$0 == 0x8c8a
                           008C8A   633 _TMR0	=	0x8c8a
                           008D8B   634 G$TMR1$0$0 == 0x8d8b
                           008D8B   635 _TMR1	=	0x8d8b
                           00CDCC   636 G$TMR2$0$0 == 0xcdcc
                           00CDCC   637 _TMR2	=	0xcdcc
                           00CBCA   638 G$RCAP2$0$0 == 0xcbca
                           00CBCA   639 _RCAP2	=	0xcbca
                           009594   640 G$TMR3$0$0 == 0x9594
                           009594   641 _TMR3	=	0x9594
                           009392   642 G$TMR3RL$0$0 == 0x9392
                           009392   643 _TMR3RL	=	0x9392
                           00F5F4   644 G$TMR4$0$0 == 0xf5f4
                           00F5F4   645 _TMR4	=	0xf5f4
                           00E5E4   646 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   647 _RCAP4	=	0xe5e4
                           00BFBE   648 G$ADC0$0$0 == 0xbfbe
                           00BFBE   649 _ADC0	=	0xbfbe
                           00C5C4   650 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   651 _ADC0GT	=	0xc5c4
                           00C7C6   652 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   653 _ADC0LT	=	0xc7c6
                           00D3D2   654 G$DAC0$0$0 == 0xd3d2
                           00D3D2   655 _DAC0	=	0xd3d2
                           00D6D5   656 G$DAC1$0$0 == 0xd6d5
                           00D6D5   657 _DAC1	=	0xd6d5
                           00F9E9   658 G$PCA0$0$0 == 0xf9e9
                           00F9E9   659 _PCA0	=	0xf9e9
                           00FAEA   660 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   661 _PCA0CP0	=	0xfaea
                           00FBEB   662 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   663 _PCA0CP1	=	0xfbeb
                           00FCEC   664 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   665 _PCA0CP2	=	0xfcec
                           00FDED   666 G$PCA0CP3$0$0 == 0xfded
                           00FDED   667 _PCA0CP3	=	0xfded
                           00FEEE   668 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   669 _PCA0CP4	=	0xfeee
                                    670 ;--------------------------------------------------------
                                    671 ; special function bits
                                    672 ;--------------------------------------------------------
                                    673 	.area RSEG    (ABS,DATA)
      000000                        674 	.org 0x0000
                           000080   675 G$P0_0$0$0 == 0x0080
                           000080   676 _P0_0	=	0x0080
                           000081   677 G$P0_1$0$0 == 0x0081
                           000081   678 _P0_1	=	0x0081
                           000082   679 G$P0_2$0$0 == 0x0082
                           000082   680 _P0_2	=	0x0082
                           000083   681 G$P0_3$0$0 == 0x0083
                           000083   682 _P0_3	=	0x0083
                           000084   683 G$P0_4$0$0 == 0x0084
                           000084   684 _P0_4	=	0x0084
                           000085   685 G$P0_5$0$0 == 0x0085
                           000085   686 _P0_5	=	0x0085
                           000086   687 G$P0_6$0$0 == 0x0086
                           000086   688 _P0_6	=	0x0086
                           000087   689 G$P0_7$0$0 == 0x0087
                           000087   690 _P0_7	=	0x0087
                           000088   691 G$IT0$0$0 == 0x0088
                           000088   692 _IT0	=	0x0088
                           000089   693 G$IE0$0$0 == 0x0089
                           000089   694 _IE0	=	0x0089
                           00008A   695 G$IT1$0$0 == 0x008a
                           00008A   696 _IT1	=	0x008a
                           00008B   697 G$IE1$0$0 == 0x008b
                           00008B   698 _IE1	=	0x008b
                           00008C   699 G$TR0$0$0 == 0x008c
                           00008C   700 _TR0	=	0x008c
                           00008D   701 G$TF0$0$0 == 0x008d
                           00008D   702 _TF0	=	0x008d
                           00008E   703 G$TR1$0$0 == 0x008e
                           00008E   704 _TR1	=	0x008e
                           00008F   705 G$TF1$0$0 == 0x008f
                           00008F   706 _TF1	=	0x008f
                           000090   707 G$P1_0$0$0 == 0x0090
                           000090   708 _P1_0	=	0x0090
                           000091   709 G$P1_1$0$0 == 0x0091
                           000091   710 _P1_1	=	0x0091
                           000092   711 G$P1_2$0$0 == 0x0092
                           000092   712 _P1_2	=	0x0092
                           000093   713 G$P1_3$0$0 == 0x0093
                           000093   714 _P1_3	=	0x0093
                           000094   715 G$P1_4$0$0 == 0x0094
                           000094   716 _P1_4	=	0x0094
                           000095   717 G$P1_5$0$0 == 0x0095
                           000095   718 _P1_5	=	0x0095
                           000096   719 G$P1_6$0$0 == 0x0096
                           000096   720 _P1_6	=	0x0096
                           000097   721 G$P1_7$0$0 == 0x0097
                           000097   722 _P1_7	=	0x0097
                           000098   723 G$RI$0$0 == 0x0098
                           000098   724 _RI	=	0x0098
                           000098   725 G$RI0$0$0 == 0x0098
                           000098   726 _RI0	=	0x0098
                           000099   727 G$TI$0$0 == 0x0099
                           000099   728 _TI	=	0x0099
                           000099   729 G$TI0$0$0 == 0x0099
                           000099   730 _TI0	=	0x0099
                           00009A   731 G$RB8$0$0 == 0x009a
                           00009A   732 _RB8	=	0x009a
                           00009A   733 G$RB80$0$0 == 0x009a
                           00009A   734 _RB80	=	0x009a
                           00009B   735 G$TB8$0$0 == 0x009b
                           00009B   736 _TB8	=	0x009b
                           00009B   737 G$TB80$0$0 == 0x009b
                           00009B   738 _TB80	=	0x009b
                           00009C   739 G$REN$0$0 == 0x009c
                           00009C   740 _REN	=	0x009c
                           00009C   741 G$REN0$0$0 == 0x009c
                           00009C   742 _REN0	=	0x009c
                           00009D   743 G$SM2$0$0 == 0x009d
                           00009D   744 _SM2	=	0x009d
                           00009D   745 G$SM20$0$0 == 0x009d
                           00009D   746 _SM20	=	0x009d
                           00009D   747 G$MCE0$0$0 == 0x009d
                           00009D   748 _MCE0	=	0x009d
                           00009E   749 G$SM1$0$0 == 0x009e
                           00009E   750 _SM1	=	0x009e
                           00009E   751 G$SM10$0$0 == 0x009e
                           00009E   752 _SM10	=	0x009e
                           00009F   753 G$SM0$0$0 == 0x009f
                           00009F   754 _SM0	=	0x009f
                           00009F   755 G$SM00$0$0 == 0x009f
                           00009F   756 _SM00	=	0x009f
                           00009F   757 G$S0MODE$0$0 == 0x009f
                           00009F   758 _S0MODE	=	0x009f
                           0000A0   759 G$P2_0$0$0 == 0x00a0
                           0000A0   760 _P2_0	=	0x00a0
                           0000A1   761 G$P2_1$0$0 == 0x00a1
                           0000A1   762 _P2_1	=	0x00a1
                           0000A2   763 G$P2_2$0$0 == 0x00a2
                           0000A2   764 _P2_2	=	0x00a2
                           0000A3   765 G$P2_3$0$0 == 0x00a3
                           0000A3   766 _P2_3	=	0x00a3
                           0000A4   767 G$P2_4$0$0 == 0x00a4
                           0000A4   768 _P2_4	=	0x00a4
                           0000A5   769 G$P2_5$0$0 == 0x00a5
                           0000A5   770 _P2_5	=	0x00a5
                           0000A6   771 G$P2_6$0$0 == 0x00a6
                           0000A6   772 _P2_6	=	0x00a6
                           0000A7   773 G$P2_7$0$0 == 0x00a7
                           0000A7   774 _P2_7	=	0x00a7
                           0000A8   775 G$EX0$0$0 == 0x00a8
                           0000A8   776 _EX0	=	0x00a8
                           0000A9   777 G$ET0$0$0 == 0x00a9
                           0000A9   778 _ET0	=	0x00a9
                           0000AA   779 G$EX1$0$0 == 0x00aa
                           0000AA   780 _EX1	=	0x00aa
                           0000AB   781 G$ET1$0$0 == 0x00ab
                           0000AB   782 _ET1	=	0x00ab
                           0000AC   783 G$ES0$0$0 == 0x00ac
                           0000AC   784 _ES0	=	0x00ac
                           0000AC   785 G$ES$0$0 == 0x00ac
                           0000AC   786 _ES	=	0x00ac
                           0000AD   787 G$ET2$0$0 == 0x00ad
                           0000AD   788 _ET2	=	0x00ad
                           0000AF   789 G$EA$0$0 == 0x00af
                           0000AF   790 _EA	=	0x00af
                           0000B0   791 G$P3_0$0$0 == 0x00b0
                           0000B0   792 _P3_0	=	0x00b0
                           0000B1   793 G$P3_1$0$0 == 0x00b1
                           0000B1   794 _P3_1	=	0x00b1
                           0000B2   795 G$P3_2$0$0 == 0x00b2
                           0000B2   796 _P3_2	=	0x00b2
                           0000B3   797 G$P3_3$0$0 == 0x00b3
                           0000B3   798 _P3_3	=	0x00b3
                           0000B4   799 G$P3_4$0$0 == 0x00b4
                           0000B4   800 _P3_4	=	0x00b4
                           0000B5   801 G$P3_5$0$0 == 0x00b5
                           0000B5   802 _P3_5	=	0x00b5
                           0000B6   803 G$P3_6$0$0 == 0x00b6
                           0000B6   804 _P3_6	=	0x00b6
                           0000B7   805 G$P3_7$0$0 == 0x00b7
                           0000B7   806 _P3_7	=	0x00b7
                           0000B8   807 G$PX0$0$0 == 0x00b8
                           0000B8   808 _PX0	=	0x00b8
                           0000B9   809 G$PT0$0$0 == 0x00b9
                           0000B9   810 _PT0	=	0x00b9
                           0000BA   811 G$PX1$0$0 == 0x00ba
                           0000BA   812 _PX1	=	0x00ba
                           0000BB   813 G$PT1$0$0 == 0x00bb
                           0000BB   814 _PT1	=	0x00bb
                           0000BC   815 G$PS0$0$0 == 0x00bc
                           0000BC   816 _PS0	=	0x00bc
                           0000BC   817 G$PS$0$0 == 0x00bc
                           0000BC   818 _PS	=	0x00bc
                           0000BD   819 G$PT2$0$0 == 0x00bd
                           0000BD   820 _PT2	=	0x00bd
                           0000C0   821 G$SMBTOE$0$0 == 0x00c0
                           0000C0   822 _SMBTOE	=	0x00c0
                           0000C1   823 G$SMBFTE$0$0 == 0x00c1
                           0000C1   824 _SMBFTE	=	0x00c1
                           0000C2   825 G$AA$0$0 == 0x00c2
                           0000C2   826 _AA	=	0x00c2
                           0000C3   827 G$SI$0$0 == 0x00c3
                           0000C3   828 _SI	=	0x00c3
                           0000C4   829 G$STO$0$0 == 0x00c4
                           0000C4   830 _STO	=	0x00c4
                           0000C5   831 G$STA$0$0 == 0x00c5
                           0000C5   832 _STA	=	0x00c5
                           0000C6   833 G$ENSMB$0$0 == 0x00c6
                           0000C6   834 _ENSMB	=	0x00c6
                           0000C7   835 G$BUSY$0$0 == 0x00c7
                           0000C7   836 _BUSY	=	0x00c7
                           0000C8   837 G$CPRL2$0$0 == 0x00c8
                           0000C8   838 _CPRL2	=	0x00c8
                           0000C9   839 G$CT2$0$0 == 0x00c9
                           0000C9   840 _CT2	=	0x00c9
                           0000CA   841 G$TR2$0$0 == 0x00ca
                           0000CA   842 _TR2	=	0x00ca
                           0000CB   843 G$EXEN2$0$0 == 0x00cb
                           0000CB   844 _EXEN2	=	0x00cb
                           0000CC   845 G$TCLK$0$0 == 0x00cc
                           0000CC   846 _TCLK	=	0x00cc
                           0000CD   847 G$RCLK$0$0 == 0x00cd
                           0000CD   848 _RCLK	=	0x00cd
                           0000CE   849 G$EXF2$0$0 == 0x00ce
                           0000CE   850 _EXF2	=	0x00ce
                           0000CF   851 G$TF2$0$0 == 0x00cf
                           0000CF   852 _TF2	=	0x00cf
                           0000D0   853 G$P$0$0 == 0x00d0
                           0000D0   854 _P	=	0x00d0
                           0000D1   855 G$F1$0$0 == 0x00d1
                           0000D1   856 _F1	=	0x00d1
                           0000D2   857 G$OV$0$0 == 0x00d2
                           0000D2   858 _OV	=	0x00d2
                           0000D3   859 G$RS0$0$0 == 0x00d3
                           0000D3   860 _RS0	=	0x00d3
                           0000D4   861 G$RS1$0$0 == 0x00d4
                           0000D4   862 _RS1	=	0x00d4
                           0000D5   863 G$F0$0$0 == 0x00d5
                           0000D5   864 _F0	=	0x00d5
                           0000D6   865 G$AC$0$0 == 0x00d6
                           0000D6   866 _AC	=	0x00d6
                           0000D7   867 G$CY$0$0 == 0x00d7
                           0000D7   868 _CY	=	0x00d7
                           0000D8   869 G$CCF0$0$0 == 0x00d8
                           0000D8   870 _CCF0	=	0x00d8
                           0000D9   871 G$CCF1$0$0 == 0x00d9
                           0000D9   872 _CCF1	=	0x00d9
                           0000DA   873 G$CCF2$0$0 == 0x00da
                           0000DA   874 _CCF2	=	0x00da
                           0000DB   875 G$CCF3$0$0 == 0x00db
                           0000DB   876 _CCF3	=	0x00db
                           0000DC   877 G$CCF4$0$0 == 0x00dc
                           0000DC   878 _CCF4	=	0x00dc
                           0000DE   879 G$CR$0$0 == 0x00de
                           0000DE   880 _CR	=	0x00de
                           0000DF   881 G$CF$0$0 == 0x00df
                           0000DF   882 _CF	=	0x00df
                           0000E8   883 G$ADLJST$0$0 == 0x00e8
                           0000E8   884 _ADLJST	=	0x00e8
                           0000E8   885 G$AD0LJST$0$0 == 0x00e8
                           0000E8   886 _AD0LJST	=	0x00e8
                           0000E9   887 G$ADWINT$0$0 == 0x00e9
                           0000E9   888 _ADWINT	=	0x00e9
                           0000E9   889 G$AD0WINT$0$0 == 0x00e9
                           0000E9   890 _AD0WINT	=	0x00e9
                           0000EA   891 G$ADSTM0$0$0 == 0x00ea
                           0000EA   892 _ADSTM0	=	0x00ea
                           0000EA   893 G$AD0CM0$0$0 == 0x00ea
                           0000EA   894 _AD0CM0	=	0x00ea
                           0000EB   895 G$ADSTM1$0$0 == 0x00eb
                           0000EB   896 _ADSTM1	=	0x00eb
                           0000EB   897 G$AD0CM1$0$0 == 0x00eb
                           0000EB   898 _AD0CM1	=	0x00eb
                           0000EC   899 G$ADBUSY$0$0 == 0x00ec
                           0000EC   900 _ADBUSY	=	0x00ec
                           0000EC   901 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   902 _AD0BUSY	=	0x00ec
                           0000ED   903 G$ADCINT$0$0 == 0x00ed
                           0000ED   904 _ADCINT	=	0x00ed
                           0000ED   905 G$AD0INT$0$0 == 0x00ed
                           0000ED   906 _AD0INT	=	0x00ed
                           0000EE   907 G$ADCTM$0$0 == 0x00ee
                           0000EE   908 _ADCTM	=	0x00ee
                           0000EE   909 G$AD0TM$0$0 == 0x00ee
                           0000EE   910 _AD0TM	=	0x00ee
                           0000EF   911 G$ADCEN$0$0 == 0x00ef
                           0000EF   912 _ADCEN	=	0x00ef
                           0000EF   913 G$AD0EN$0$0 == 0x00ef
                           0000EF   914 _AD0EN	=	0x00ef
                           0000F8   915 G$SPIEN$0$0 == 0x00f8
                           0000F8   916 _SPIEN	=	0x00f8
                           0000F9   917 G$MSTEN$0$0 == 0x00f9
                           0000F9   918 _MSTEN	=	0x00f9
                           0000FA   919 G$SLVSEL$0$0 == 0x00fa
                           0000FA   920 _SLVSEL	=	0x00fa
                           0000FB   921 G$TXBSY$0$0 == 0x00fb
                           0000FB   922 _TXBSY	=	0x00fb
                           0000FC   923 G$RXOVRN$0$0 == 0x00fc
                           0000FC   924 _RXOVRN	=	0x00fc
                           0000FD   925 G$MODF$0$0 == 0x00fd
                           0000FD   926 _MODF	=	0x00fd
                           0000FE   927 G$WCOL$0$0 == 0x00fe
                           0000FE   928 _WCOL	=	0x00fe
                           0000FF   929 G$SPIF$0$0 == 0x00ff
                           0000FF   930 _SPIF	=	0x00ff
                           0000C7   931 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   932 _BUS_BUSY	=	0x00c7
                           0000C6   933 G$BUS_EN$0$0 == 0x00c6
                           0000C6   934 _BUS_EN	=	0x00c6
                           0000C5   935 G$BUS_START$0$0 == 0x00c5
                           0000C5   936 _BUS_START	=	0x00c5
                           0000C4   937 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   938 _BUS_STOP	=	0x00c4
                           0000C3   939 G$BUS_INT$0$0 == 0x00c3
                           0000C3   940 _BUS_INT	=	0x00c3
                           0000C2   941 G$BUS_AA$0$0 == 0x00c2
                           0000C2   942 _BUS_AA	=	0x00c2
                           0000C1   943 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   944 _BUS_FTE	=	0x00c1
                           0000C0   945 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   946 _BUS_TOE	=	0x00c0
                           000083   947 G$BUS_SCL$0$0 == 0x0083
                           000083   948 _BUS_SCL	=	0x0083
                           0000B7   949 G$mSS$0$0 == 0x00b7
                           0000B7   950 _mSS	=	0x00b7
                           000094   951 G$LED$0$0 == 0x0094
                           000094   952 _LED	=	0x0094
                                    953 ;--------------------------------------------------------
                                    954 ; overlayable register banks
                                    955 ;--------------------------------------------------------
                                    956 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        957 	.ds 8
                                    958 ;--------------------------------------------------------
                                    959 ; internal ram data
                                    960 ;--------------------------------------------------------
                                    961 	.area DSEG    (DATA)
                           000000   962 G$Data2$0$0==.
      000000                        963 _Data2::
      000000                        964 	.ds 3
                           000003   965 Llab4k__1_.aligned_alloc$size$1$39==.
      000003                        966 _aligned_alloc_PARM_2:
      000003                        967 	.ds 2
                           000005   968 Llab4k__1_.lcd_clear$NumBytes$1$85==.
      000005                        969 _lcd_clear_NumBytes_1_85:
      000005                        970 	.ds 1
                           000006   971 Llab4k__1_.lcd_clear$Cmd$1$85==.
      000006                        972 _lcd_clear_Cmd_1_85:
      000006                        973 	.ds 2
                           000008   974 Llab4k__1_.read_keypad$Data$1$86==.
      000008                        975 _read_keypad_Data_1_86:
      000008                        976 	.ds 2
                           00000A   977 Llab4k__1_.i2c_write_data$start_reg$1$105==.
      00000A                        978 _i2c_write_data_PARM_2:
      00000A                        979 	.ds 1
                           00000B   980 Llab4k__1_.i2c_write_data$buffer$1$105==.
      00000B                        981 _i2c_write_data_PARM_3:
      00000B                        982 	.ds 3
                           00000E   983 Llab4k__1_.i2c_write_data$num_bytes$1$105==.
      00000E                        984 _i2c_write_data_PARM_4:
      00000E                        985 	.ds 1
                           00000F   986 Llab4k__1_.i2c_read_data$start_reg$1$107==.
      00000F                        987 _i2c_read_data_PARM_2:
      00000F                        988 	.ds 1
                           000010   989 Llab4k__1_.i2c_read_data$buffer$1$107==.
      000010                        990 _i2c_read_data_PARM_3:
      000010                        991 	.ds 3
                           000013   992 Llab4k__1_.i2c_read_data$num_bytes$1$107==.
      000013                        993 _i2c_read_data_PARM_4:
      000013                        994 	.ds 1
                           000014   995 G$Counts$0$0==.
      000014                        996 _Counts::
      000014                        997 	.ds 2
                           000016   998 G$sPW$0$0==.
      000016                        999 _sPW::
      000016                       1000 	.ds 2
                           000018  1001 G$mPW$0$0==.
      000018                       1002 _mPW::
      000018                       1003 	.ds 2
                           00001A  1004 G$dist$0$0==.
      00001A                       1005 _dist::
      00001A                       1006 	.ds 1
                           00001B  1007 G$r_Data$0$0==.
      00001B                       1008 _r_Data::
      00001B                       1009 	.ds 2
                           00001D  1010 G$range$0$0==.
      00001D                       1011 _range::
      00001D                       1012 	.ds 2
                           00001F  1013 G$r_addr$0$0==.
      00001F                       1014 _r_addr::
      00001F                       1015 	.ds 1
                           000020  1016 G$r_Counts$0$0==.
      000020                       1017 _r_Counts::
      000020                       1018 	.ds 1
                           000021  1019 G$new_range$0$0==.
      000021                       1020 _new_range::
      000021                       1021 	.ds 1
                           000022  1022 G$c_addr$0$0==.
      000022                       1023 _c_addr::
      000022                       1024 	.ds 1
                           000023  1025 G$c_Data$0$0==.
      000023                       1026 _c_Data::
      000023                       1027 	.ds 2
                           000025  1028 G$heading$0$0==.
      000025                       1029 _heading::
      000025                       1030 	.ds 2
                           000027  1031 G$h_Counts$0$0==.
      000027                       1032 _h_Counts::
      000027                       1033 	.ds 1
                           000028  1034 G$new_heading$0$0==.
      000028                       1035 _new_heading::
      000028                       1036 	.ds 1
                           000029  1037 G$desired_heading$0$0==.
      000029                       1038 _desired_heading::
      000029                       1039 	.ds 2
                           00002B  1040 G$error$0$0==.
      00002B                       1041 _error::
      00002B                       1042 	.ds 2
                           00002D  1043 G$adc_value$0$0==.
      00002D                       1044 _adc_value::
      00002D                       1045 	.ds 1
                           00002E  1046 G$voltage$0$0==.
      00002E                       1047 _voltage::
      00002E                       1048 	.ds 2
                                   1049 ;--------------------------------------------------------
                                   1050 ; overlayable items in internal ram 
                                   1051 ;--------------------------------------------------------
                                   1052 	.area	OSEG    (OVR,DATA)
                                   1053 	.area	OSEG    (OVR,DATA)
                                   1054 	.area	OSEG    (OVR,DATA)
                                   1055 	.area	OSEG    (OVR,DATA)
                                   1056 	.area	OSEG    (OVR,DATA)
                                   1057 	.area	OSEG    (OVR,DATA)
                                   1058 	.area	OSEG    (OVR,DATA)
                                   1059 	.area	OSEG    (OVR,DATA)
                                   1060 ;--------------------------------------------------------
                                   1061 ; Stack segment in internal ram 
                                   1062 ;--------------------------------------------------------
                                   1063 	.area	SSEG
      000000                       1064 __start__stack:
      000000                       1065 	.ds	1
                                   1066 
                                   1067 ;--------------------------------------------------------
                                   1068 ; indirectly addressable internal ram data
                                   1069 ;--------------------------------------------------------
                                   1070 	.area ISEG    (DATA)
                                   1071 ;--------------------------------------------------------
                                   1072 ; absolute internal ram data
                                   1073 ;--------------------------------------------------------
                                   1074 	.area IABS    (ABS,DATA)
                                   1075 	.area IABS    (ABS,DATA)
                                   1076 ;--------------------------------------------------------
                                   1077 ; bit data
                                   1078 ;--------------------------------------------------------
                                   1079 	.area BSEG    (BIT)
                                   1080 ;--------------------------------------------------------
                                   1081 ; paged external ram data
                                   1082 ;--------------------------------------------------------
                                   1083 	.area PSEG    (PAG,XDATA)
                                   1084 ;--------------------------------------------------------
                                   1085 ; external ram data
                                   1086 ;--------------------------------------------------------
                                   1087 	.area XSEG    (XDATA)
                           000000  1088 Llab4k__1_.lcd_print$text$1$81==.
      000000                       1089 _lcd_print_text_1_81:
      000000                       1090 	.ds 80
                                   1091 ;--------------------------------------------------------
                                   1092 ; absolute external ram data
                                   1093 ;--------------------------------------------------------
                                   1094 	.area XABS    (ABS,XDATA)
                                   1095 ;--------------------------------------------------------
                                   1096 ; external initialized ram data
                                   1097 ;--------------------------------------------------------
                                   1098 	.area XISEG   (XDATA)
                           000000  1099 G$sPW_CENTER$0$0==.
      000000                       1100 _sPW_CENTER::
      000000                       1101 	.ds 2
                           000002  1102 G$sPW_MIN$0$0==.
      000002                       1103 _sPW_MIN::
      000002                       1104 	.ds 2
                           000004  1105 G$sPW_MAX$0$0==.
      000004                       1106 _sPW_MAX::
      000004                       1107 	.ds 2
                           000006  1108 G$mPW_CENTER$0$0==.
      000006                       1109 _mPW_CENTER::
      000006                       1110 	.ds 2
                           000008  1111 G$mPW_MIN$0$0==.
      000008                       1112 _mPW_MIN::
      000008                       1113 	.ds 2
                           00000A  1114 G$mPW_MAX$0$0==.
      00000A                       1115 _mPW_MAX::
      00000A                       1116 	.ds 2
                                   1117 	.area HOME    (CODE)
                                   1118 	.area GSINIT0 (CODE)
                                   1119 	.area GSINIT1 (CODE)
                                   1120 	.area GSINIT2 (CODE)
                                   1121 	.area GSINIT3 (CODE)
                                   1122 	.area GSINIT4 (CODE)
                                   1123 	.area GSINIT5 (CODE)
                                   1124 	.area GSINIT  (CODE)
                                   1125 	.area GSFINAL (CODE)
                                   1126 	.area CSEG    (CODE)
                                   1127 ;--------------------------------------------------------
                                   1128 ; interrupt vector 
                                   1129 ;--------------------------------------------------------
                                   1130 	.area HOME    (CODE)
      000000                       1131 __interrupt_vect:
      000000 02r00r00         [24] 1132 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1133 	reti
      000004                       1134 	.ds	7
      00000B 32               [24] 1135 	reti
      00000C                       1136 	.ds	7
      000013 32               [24] 1137 	reti
      000014                       1138 	.ds	7
      00001B 32               [24] 1139 	reti
      00001C                       1140 	.ds	7
      000023 32               [24] 1141 	reti
      000024                       1142 	.ds	7
      00002B 32               [24] 1143 	reti
      00002C                       1144 	.ds	7
      000033 32               [24] 1145 	reti
      000034                       1146 	.ds	7
      00003B 32               [24] 1147 	reti
      00003C                       1148 	.ds	7
      000043 32               [24] 1149 	reti
      000044                       1150 	.ds	7
      00004B 02r06rE3         [24] 1151 	ljmp	_PCA_ISR
                                   1152 ;--------------------------------------------------------
                                   1153 ; global & static initialisations
                                   1154 ;--------------------------------------------------------
                                   1155 	.area HOME    (CODE)
                                   1156 	.area GSINIT  (CODE)
                                   1157 	.area GSFINAL (CODE)
                                   1158 	.area GSINIT  (CODE)
                                   1159 	.globl __sdcc_gsinit_startup
                                   1160 	.globl __sdcc_program_startup
                                   1161 	.globl __start__stack
                                   1162 	.globl __mcs51_genXINIT
                                   1163 	.globl __mcs51_genXRAMCLEAR
                                   1164 	.globl __mcs51_genRAMCLEAR
q                                  1165 	C$lab4k_(1).c$32$1$177 ==.
                                   1166 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:32: unsigned int sPW = 0;
      000000 E4               [12] 1167 	clr	a
      000001 F5*16            [12] 1168 	mov	_sPW,a
      000003 F5*17            [12] 1169 	mov	(_sPW + 1),a
q                                  1170 	C$lab4k_(1).c$37$1$177 ==.
                                   1171 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:37: unsigned int mPW = 0;
      000005 F5*18            [12] 1172 	mov	_mPW,a
      000007 F5*19            [12] 1173 	mov	(_mPW + 1),a
q                                  1174 	C$lab4k_(1).c$46$1$177 ==.
                                   1175 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:46: unsigned int range = 0;
      000009 F5*1D            [12] 1176 	mov	_range,a
      00000B F5*1E            [12] 1177 	mov	(_range + 1),a
q                                  1178 	C$lab4k_(1).c$47$1$177 ==.
                                   1179 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:47: unsigned char r_addr = 0xE0; // the address of the ranger
      00000D 75*1F E0         [24] 1180 	mov	_r_addr,#0xe0
q                                  1181 	C$lab4k_(1).c$48$1$177 ==.
                                   1182 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:48: unsigned char r_Counts=0;
                                   1183 ;	1-genFromRTrack replaced	mov	_r_Counts,#0x00
      000010 F5*20            [12] 1184 	mov	_r_Counts,a
q                                  1185 	C$lab4k_(1).c$49$1$177 ==.
                                   1186 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:49: unsigned char new_range = 0;
                                   1187 ;	1-genFromRTrack replaced	mov	_new_range,#0x00
      000012 F5*21            [12] 1188 	mov	_new_range,a
q                                  1189 	C$lab4k_(1).c$51$1$177 ==.
                                   1190 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:51: unsigned char c_addr = 0xC0;
      000014 75*22 C0         [24] 1191 	mov	_c_addr,#0xc0
q                                  1192 	C$lab4k_(1).c$54$1$177 ==.
                                   1193 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:54: unsigned char h_Counts = 0;
                                   1194 ;	1-genFromRTrack replaced	mov	_h_Counts,#0x00
      000017 F5*27            [12] 1195 	mov	_h_Counts,a
q                                  1196 	C$lab4k_(1).c$55$1$177 ==.
                                   1197 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:55: unsigned char new_heading =0;
                                   1198 ;	1-genFromRTrack replaced	mov	_new_heading,#0x00
      000019 F5*28            [12] 1199 	mov	_new_heading,a
q                                  1200 	C$lab4k_(1).c$56$1$177 ==.
                                   1201 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:56: unsigned int desired_heading = 900;
      00001B 75*29 84         [24] 1202 	mov	_desired_heading,#0x84
      00001E 75*2A 03         [24] 1203 	mov	(_desired_heading + 1),#0x03
                                   1204 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1205 	ljmp	__sdcc_program_startup
                                   1206 ;--------------------------------------------------------
                                   1207 ; Home
                                   1208 ;--------------------------------------------------------
                                   1209 	.area HOME    (CODE)
                                   1210 	.area HOME    (CODE)
      00004E                       1211 __sdcc_program_startup:
      00004E 02r05r06         [24] 1212 	ljmp	_main
                                   1213 ;	return from main will return to caller
                                   1214 ;--------------------------------------------------------
                                   1215 ; code
                                   1216 ;--------------------------------------------------------
                                   1217 	.area CSEG    (CODE)
                                   1218 ;------------------------------------------------------------
                                   1219 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1220 ;------------------------------------------------------------
                                   1221 ;i                         Allocated to registers r6 r7 
                                   1222 ;------------------------------------------------------------
                           000000  1223 	G$SYSCLK_Init$0$0 ==.
                           000000  1224 	C$c8051_SDCC.h$62$0$0 ==.
                                   1225 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1226 ;	-----------------------------------------
                                   1227 ;	 function SYSCLK_Init
                                   1228 ;	-----------------------------------------
      000000                       1229 _SYSCLK_Init:
                           000007  1230 	ar7 = 0x07
                           000006  1231 	ar6 = 0x06
                           000005  1232 	ar5 = 0x05
                           000004  1233 	ar4 = 0x04
                           000003  1234 	ar3 = 0x03
                           000002  1235 	ar2 = 0x02
                           000001  1236 	ar1 = 0x01
                           000000  1237 	ar0 = 0x00
                           000000  1238 	C$c8051_SDCC.h$66$1$2 ==.
                                   1239 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1240 	mov	_OSCXCN,#0x67
                           000003  1241 	C$c8051_SDCC.h$69$1$2 ==.
                                   1242 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1243 	mov	r6,#0x00
      000005 7F 01            [12] 1244 	mov	r7,#0x01
      000007                       1245 00107$:
      000007 EE               [12] 1246 	mov	a,r6
      000008 24 FF            [12] 1247 	add	a,#0xff
      00000A FC               [12] 1248 	mov	r4,a
      00000B EF               [12] 1249 	mov	a,r7
      00000C 34 FF            [12] 1250 	addc	a,#0xff
      00000E FD               [12] 1251 	mov	r5,a
      00000F 8C 06            [24] 1252 	mov	ar6,r4
      000011 8D 07            [24] 1253 	mov	ar7,r5
      000013 EC               [12] 1254 	mov	a,r4
      000014 4D               [12] 1255 	orl	a,r5
      000015 70 F0            [24] 1256 	jnz	00107$
                           000017  1257 	C$c8051_SDCC.h$71$1$2 ==.
                                   1258 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1259 00102$:
      000017 E5 B1            [12] 1260 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1261 	jnb	acc.7,00102$
                           00001C  1262 	C$c8051_SDCC.h$73$1$2 ==.
                                   1263 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1264 	mov	_OSCICN,#0x88
                           00001F  1265 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1266 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1267 	ret
                                   1268 ;------------------------------------------------------------
                                   1269 ;Allocation info for local variables in function 'UART0_Init'
                                   1270 ;------------------------------------------------------------
                           000020  1271 	G$UART0_Init$0$0 ==.
                           000020  1272 	C$c8051_SDCC.h$84$1$2 ==.
                                   1273 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1274 ;	-----------------------------------------
                                   1275 ;	 function UART0_Init
                                   1276 ;	-----------------------------------------
      000020                       1277 _UART0_Init:
                           000020  1278 	C$c8051_SDCC.h$86$1$4 ==.
                                   1279 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1280 	mov	_SCON0,#0x50
                           000023  1281 	C$c8051_SDCC.h$87$1$4 ==.
                                   1282 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1283 	mov	_TMOD,#0x20
                           000026  1284 	C$c8051_SDCC.h$88$1$4 ==.
                                   1285 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1286 	mov	_TH1,#0xdc
                           000029  1287 	C$c8051_SDCC.h$89$1$4 ==.
                                   1288 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1289 	setb	_TR1
                           00002B  1290 	C$c8051_SDCC.h$90$1$4 ==.
                                   1291 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1292 	orl	_CKCON,#0x10
                           00002E  1293 	C$c8051_SDCC.h$91$1$4 ==.
                                   1294 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1295 	orl	_PCON,#0x80
                           000031  1296 	C$c8051_SDCC.h$93$1$4 ==.
                                   1297 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1298 	setb	_TI0
                           000033  1299 	C$c8051_SDCC.h$94$1$4 ==.
                                   1300 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1301 	orl	_P0MDOUT,#0x01
                           000036  1302 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1303 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1304 	ret
                                   1305 ;------------------------------------------------------------
                                   1306 ;Allocation info for local variables in function 'Sys_Init'
                                   1307 ;------------------------------------------------------------
                           000037  1308 	G$Sys_Init$0$0 ==.
                           000037  1309 	C$c8051_SDCC.h$103$1$4 ==.
                                   1310 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1311 ;	-----------------------------------------
                                   1312 ;	 function Sys_Init
                                   1313 ;	-----------------------------------------
      000037                       1314 _Sys_Init:
                           000037  1315 	C$c8051_SDCC.h$105$1$6 ==.
                                   1316 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1317 	mov	_WDTCN,#0xde
                           00003A  1318 	C$c8051_SDCC.h$106$1$6 ==.
                                   1319 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1320 	mov	_WDTCN,#0xad
                           00003D  1321 	C$c8051_SDCC.h$108$1$6 ==.
                                   1322 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1323 	lcall	_SYSCLK_Init
                           000040  1324 	C$c8051_SDCC.h$109$1$6 ==.
                                   1325 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1326 	lcall	_UART0_Init
                           000043  1327 	C$c8051_SDCC.h$111$1$6 ==.
                                   1328 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1329 	orl	_XBR0,#0x04
                           000046  1330 	C$c8051_SDCC.h$112$1$6 ==.
                                   1331 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1332 	orl	_XBR2,#0x40
                           000049  1333 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1334 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1335 	ret
                                   1336 ;------------------------------------------------------------
                                   1337 ;Allocation info for local variables in function 'putchar'
                                   1338 ;------------------------------------------------------------
                                   1339 ;c                         Allocated to registers r7 
                                   1340 ;------------------------------------------------------------
                           00004A  1341 	G$putchar$0$0 ==.
                           00004A  1342 	C$c8051_SDCC.h$129$1$6 ==.
                                   1343 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1344 ;	-----------------------------------------
                                   1345 ;	 function putchar
                                   1346 ;	-----------------------------------------
      00004A                       1347 _putchar:
      00004A AF 82            [24] 1348 	mov	r7,dpl
                           00004C  1349 	C$c8051_SDCC.h$132$1$8 ==.
                                   1350 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1351 00101$:
                           00004C  1352 	C$c8051_SDCC.h$133$1$8 ==.
                                   1353 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1354 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1355 	sjmp	00101$
      000051                       1356 00112$:
                           000051  1357 	C$c8051_SDCC.h$134$1$8 ==.
                                   1358 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1359 	mov	_SBUF0,r7
                           000053  1360 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1361 	XG$putchar$0$0 ==.
      000053 22               [24] 1362 	ret
                                   1363 ;------------------------------------------------------------
                                   1364 ;Allocation info for local variables in function 'getchar'
                                   1365 ;------------------------------------------------------------
                                   1366 ;c                         Allocated to registers r7 
                                   1367 ;------------------------------------------------------------
                           000054  1368 	G$getchar$0$0 ==.
                           000054  1369 	C$c8051_SDCC.h$154$1$8 ==.
                                   1370 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1371 ;	-----------------------------------------
                                   1372 ;	 function getchar
                                   1373 ;	-----------------------------------------
      000054                       1374 _getchar:
                           000054  1375 	C$c8051_SDCC.h$157$1$10 ==.
                                   1376 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1377 00101$:
                           000054  1378 	C$c8051_SDCC.h$158$1$10 ==.
                                   1379 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1380 	jbc	_RI0,00112$
      000057 80 FB            [24] 1381 	sjmp	00101$
      000059                       1382 00112$:
                           000059  1383 	C$c8051_SDCC.h$159$1$10 ==.
                                   1384 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1385 	mov	r7,_SBUF0
                           00005B  1386 	C$c8051_SDCC.h$160$1$10 ==.
                                   1387 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1388 	mov	dpl,r7
      00005D C0 07            [24] 1389 	push	ar7
      00005F 12r00r4A         [24] 1390 	lcall	_putchar
      000062 D0 07            [24] 1391 	pop	ar7
                           000064  1392 	C$c8051_SDCC.h$161$1$10 ==.
                                   1393 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1394 	mov	dpl,r7
                           000066  1395 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1396 	XG$getchar$0$0 ==.
      000066 22               [24] 1397 	ret
                                   1398 ;------------------------------------------------------------
                                   1399 ;Allocation info for local variables in function 'getchar_nw'
                                   1400 ;------------------------------------------------------------
                                   1401 ;c                         Allocated to registers 
                                   1402 ;------------------------------------------------------------
                           000067  1403 	G$getchar_nw$0$0 ==.
                           000067  1404 	C$c8051_SDCC.h$168$1$10 ==.
                                   1405 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1406 ;	-----------------------------------------
                                   1407 ;	 function getchar_nw
                                   1408 ;	-----------------------------------------
      000067                       1409 _getchar_nw:
                           000067  1410 	C$c8051_SDCC.h$171$1$12 ==.
                                   1411 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1412 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1413 	mov	dpl,#0xff
      00006D 80 0B            [24] 1414 	sjmp	00104$
      00006F                       1415 00102$:
                           00006F  1416 	C$c8051_SDCC.h$174$2$13 ==.
                                   1417 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1418 	clr	_RI0
                           000071  1419 	C$c8051_SDCC.h$175$2$13 ==.
                                   1420 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1421 	mov	dpl,_SBUF0
                           000074  1422 	C$c8051_SDCC.h$176$2$13 ==.
                                   1423 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1424 	lcall	_putchar
                           000077  1425 	C$c8051_SDCC.h$177$2$13 ==.
                                   1426 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1427 	mov	dpl,_SBUF0
      00007A                       1428 00104$:
                           00007A  1429 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1430 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1431 	ret
                                   1432 ;------------------------------------------------------------
                                   1433 ;Allocation info for local variables in function 'lcd_print'
                                   1434 ;------------------------------------------------------------
                                   1435 ;fmt                       Allocated to stack - _bp -5
                                   1436 ;len                       Allocated to registers r6 
                                   1437 ;i                         Allocated to registers 
                                   1438 ;ap                        Allocated to registers 
                                   1439 ;text                      Allocated with name '_lcd_print_text_1_81'
                                   1440 ;------------------------------------------------------------
                           00007B  1441 	G$lcd_print$0$0 ==.
                           00007B  1442 	C$i2c.h$84$1$12 ==.
                                   1443 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:84: void lcd_print(const char *fmt, ...)
                                   1444 ;	-----------------------------------------
                                   1445 ;	 function lcd_print
                                   1446 ;	-----------------------------------------
      00007B                       1447 _lcd_print:
      00007B C0*00            [24] 1448 	push	_bp
      00007D 85 81*00         [24] 1449 	mov	_bp,sp
                           000080  1450 	C$i2c.h$90$1$81 ==.
                                   1451 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: if ( strlen(fmt) <= 0 ) return;         //If there is no data to print, return
      000080 E5*00            [12] 1452 	mov	a,_bp
      000082 24 FB            [12] 1453 	add	a,#0xfb
      000084 F8               [12] 1454 	mov	r0,a
      000085 86 82            [24] 1455 	mov	dpl,@r0
      000087 08               [12] 1456 	inc	r0
      000088 86 83            [24] 1457 	mov	dph,@r0
      00008A 08               [12] 1458 	inc	r0
      00008B 86 F0            [24] 1459 	mov	b,@r0
      00008D 12r00r00         [24] 1460 	lcall	_strlen
      000090 E5 82            [12] 1461 	mov	a,dpl
      000092 85 83 F0         [24] 1462 	mov	b,dph
      000095 45 F0            [12] 1463 	orl	a,b
      000097 70 02            [24] 1464 	jnz	00102$
      000099 80 62            [24] 1465 	sjmp	00109$
      00009B                       1466 00102$:
                           00009B  1467 	C$i2c.h$92$2$82 ==.
                                   1468 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:92: va_start(ap, fmt);
      00009B E5*00            [12] 1469 	mov	a,_bp
      00009D 24 FB            [12] 1470 	add	a,#0xfb
      00009F FF               [12] 1471 	mov	r7,a
      0000A0 8F*00            [24] 1472 	mov	_vsprintf_PARM_3,r7
                           0000A2  1473 	C$i2c.h$93$1$81 ==.
                                   1474 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: vsprintf(text, fmt, ap);
      0000A2 E5*00            [12] 1475 	mov	a,_bp
      0000A4 24 FB            [12] 1476 	add	a,#0xfb
      0000A6 F8               [12] 1477 	mov	r0,a
      0000A7 86*00            [24] 1478 	mov	_vsprintf_PARM_2,@r0
      0000A9 08               [12] 1479 	inc	r0
      0000AA 86*01            [24] 1480 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000AC 08               [12] 1481 	inc	r0
      0000AD 86*02            [24] 1482 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AF 90r00r00         [24] 1483 	mov	dptr,#_lcd_print_text_1_81
      0000B2 75 F0 00         [24] 1484 	mov	b,#0x00
      0000B5 12r00r00         [24] 1485 	lcall	_vsprintf
                           0000B8  1486 	C$i2c.h$96$1$81 ==.
                                   1487 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: len = strlen(text);
      0000B8 90r00r00         [24] 1488 	mov	dptr,#_lcd_print_text_1_81
      0000BB 75 F0 00         [24] 1489 	mov	b,#0x00
      0000BE 12r00r00         [24] 1490 	lcall	_strlen
      0000C1 AE 82            [24] 1491 	mov	r6,dpl
                           0000C3  1492 	C$i2c.h$97$1$81 ==.
                                   1493 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000C3 7F 00            [12] 1494 	mov	r7,#0x00
      0000C5                       1495 00107$:
      0000C5 C3               [12] 1496 	clr	c
      0000C6 EF               [12] 1497 	mov	a,r7
      0000C7 9E               [12] 1498 	subb	a,r6
      0000C8 50 1F            [24] 1499 	jnc	00105$
                           0000CA  1500 	C$i2c.h$99$2$84 ==.
                                   1501 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000CA EF               [12] 1502 	mov	a,r7
      0000CB 24r00            [12] 1503 	add	a,#_lcd_print_text_1_81
      0000CD F5 82            [12] 1504 	mov	dpl,a
      0000CF E4               [12] 1505 	clr	a
      0000D0 34s00            [12] 1506 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000D2 F5 83            [12] 1507 	mov	dph,a
      0000D4 E0               [24] 1508 	movx	a,@dptr
      0000D5 FD               [12] 1509 	mov	r5,a
      0000D6 BD 0A 0D         [24] 1510 	cjne	r5,#0x0a,00108$
      0000D9 EF               [12] 1511 	mov	a,r7
      0000DA 24r00            [12] 1512 	add	a,#_lcd_print_text_1_81
      0000DC F5 82            [12] 1513 	mov	dpl,a
      0000DE E4               [12] 1514 	clr	a
      0000DF 34s00            [12] 1515 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000E1 F5 83            [12] 1516 	mov	dph,a
      0000E3 74 0D            [12] 1517 	mov	a,#0x0d
      0000E5 F0               [24] 1518 	movx	@dptr,a
      0000E6                       1519 00108$:
                           0000E6  1520 	C$i2c.h$97$1$81 ==.
                                   1521 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000E6 0F               [12] 1522 	inc	r7
      0000E7 80 DC            [24] 1523 	sjmp	00107$
      0000E9                       1524 00105$:
                           0000E9  1525 	C$i2c.h$102$1$81 ==.
                                   1526 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:102: i2c_write_data(0xC6, 0x00, text, len);
      0000E9 75*0Br00         [24] 1527 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_81
      0000EC 75*0Cs00         [24] 1528 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_81 >> 8)
      0000EF 75*0D 00         [24] 1529 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000F2 75*0A 00         [24] 1530 	mov	_i2c_write_data_PARM_2,#0x00
      0000F5 8E*0E            [24] 1531 	mov	_i2c_write_data_PARM_4,r6
      0000F7 75 82 C6         [24] 1532 	mov	dpl,#0xc6
      0000FA 12r03r8C         [24] 1533 	lcall	_i2c_write_data
      0000FD                       1534 00109$:
      0000FD D0*00            [24] 1535 	pop	_bp
                           0000FF  1536 	C$i2c.h$103$1$81 ==.
                           0000FF  1537 	XG$lcd_print$0$0 ==.
      0000FF 22               [24] 1538 	ret
                                   1539 ;------------------------------------------------------------
                                   1540 ;Allocation info for local variables in function 'lcd_clear'
                                   1541 ;------------------------------------------------------------
                                   1542 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_85'
                                   1543 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_85'
                                   1544 ;------------------------------------------------------------
                           000100  1545 	G$lcd_clear$0$0 ==.
                           000100  1546 	C$i2c.h$106$1$81 ==.
                                   1547 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:106: void lcd_clear()
                                   1548 ;	-----------------------------------------
                                   1549 ;	 function lcd_clear
                                   1550 ;	-----------------------------------------
      000100                       1551 _lcd_clear:
                           000100  1552 	C$i2c.h$108$1$81 ==.
                                   1553 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:108: unsigned char NumBytes=0, Cmd[2];
      000100 75*05 00         [24] 1554 	mov	_lcd_clear_NumBytes_1_85,#0x00
                           000103  1555 	C$i2c.h$110$1$85 ==.
                                   1556 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      000103                       1557 00101$:
      000103 74 C0            [12] 1558 	mov	a,#0x100 - 0x40
      000105 25*05            [12] 1559 	add	a,_lcd_clear_NumBytes_1_85
      000107 40 17            [24] 1560 	jc	00103$
      000109 75*10r05         [24] 1561 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_85
      00010C 75*11 00         [24] 1562 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00010F 75*12 40         [24] 1563 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000112 75*0F 00         [24] 1564 	mov	_i2c_read_data_PARM_2,#0x00
      000115 75*13 01         [24] 1565 	mov	_i2c_read_data_PARM_4,#0x01
      000118 75 82 C6         [24] 1566 	mov	dpl,#0xc6
      00011B 12r04r06         [24] 1567 	lcall	_i2c_read_data
      00011E 80 E3            [24] 1568 	sjmp	00101$
      000120                       1569 00103$:
                           000120  1570 	C$i2c.h$112$1$85 ==.
                                   1571 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:112: Cmd[0] = 12;
      000120 75*06 0C         [24] 1572 	mov	_lcd_clear_Cmd_1_85,#0x0c
                           000123  1573 	C$i2c.h$113$1$85 ==.
                                   1574 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:113: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000123 75*0Br06         [24] 1575 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_85
      000126 75*0C 00         [24] 1576 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000129 75*0D 40         [24] 1577 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00012C 75*0A 00         [24] 1578 	mov	_i2c_write_data_PARM_2,#0x00
      00012F 75*0E 01         [24] 1579 	mov	_i2c_write_data_PARM_4,#0x01
      000132 75 82 C6         [24] 1580 	mov	dpl,#0xc6
      000135 12r03r8C         [24] 1581 	lcall	_i2c_write_data
                           000138  1582 	C$i2c.h$114$1$85 ==.
                           000138  1583 	XG$lcd_clear$0$0 ==.
      000138 22               [24] 1584 	ret
                                   1585 ;------------------------------------------------------------
                                   1586 ;Allocation info for local variables in function 'read_keypad'
                                   1587 ;------------------------------------------------------------
                                   1588 ;i                         Allocated to registers r7 
                                   1589 ;Data                      Allocated with name '_read_keypad_Data_1_86'
                                   1590 ;------------------------------------------------------------
                           000139  1591 	G$read_keypad$0$0 ==.
                           000139  1592 	C$i2c.h$117$1$85 ==.
                                   1593 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:117: unsigned char read_keypad()
                                   1594 ;	-----------------------------------------
                                   1595 ;	 function read_keypad
                                   1596 ;	-----------------------------------------
      000139                       1597 _read_keypad:
                           000139  1598 	C$i2c.h$121$1$86 ==.
                                   1599 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000139 75*10r08         [24] 1600 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_86
      00013C 75*11 00         [24] 1601 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00013F 75*12 40         [24] 1602 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000142 75*0F 01         [24] 1603 	mov	_i2c_read_data_PARM_2,#0x01
      000145 75*13 02         [24] 1604 	mov	_i2c_read_data_PARM_4,#0x02
      000148 75 82 C6         [24] 1605 	mov	dpl,#0xc6
      00014B 12r04r06         [24] 1606 	lcall	_i2c_read_data
                           00014E  1607 	C$i2c.h$122$1$86 ==.
                                   1608 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:122: if(Data[0] == 0xFF) return 0;   //No response on bus, no display
      00014E 74 FF            [12] 1609 	mov	a,#0xff
      000150 B5*08 05         [24] 1610 	cjne	a,_read_keypad_Data_1_86,00102$
      000153 75 82 00         [24] 1611 	mov	dpl,#0x00
      000156 80 5F            [24] 1612 	sjmp	00116$
      000158                       1613 00102$:
                           000158  1614 	C$i2c.h$124$1$86 ==.
                                   1615 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000158 7F 00            [12] 1616 	mov	r7,#0x00
      00015A 8F 06            [24] 1617 	mov	ar6,r7
      00015C                       1618 00114$:
                           00015C  1619 	C$i2c.h$126$2$87 ==.
                                   1620 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:126: if(Data[0] & (0x01 << i))   //find the ASCII value of the keypad read, if it is the current loop value
      00015C 8E F0            [24] 1621 	mov	b,r6
      00015E 05 F0            [12] 1622 	inc	b
      000160 7C 01            [12] 1623 	mov	r4,#0x01
      000162 7D 00            [12] 1624 	mov	r5,#0x00
      000164 80 06            [24] 1625 	sjmp	00145$
      000166                       1626 00144$:
      000166 EC               [12] 1627 	mov	a,r4
      000167 2C               [12] 1628 	add	a,r4
      000168 FC               [12] 1629 	mov	r4,a
      000169 ED               [12] 1630 	mov	a,r5
      00016A 33               [12] 1631 	rlc	a
      00016B FD               [12] 1632 	mov	r5,a
      00016C                       1633 00145$:
      00016C D5 F0 F7         [24] 1634 	djnz	b,00144$
      00016F AA*08            [24] 1635 	mov	r2,_read_keypad_Data_1_86
      000171 7B 00            [12] 1636 	mov	r3,#0x00
      000173 EA               [12] 1637 	mov	a,r2
      000174 52 04            [12] 1638 	anl	ar4,a
      000176 EB               [12] 1639 	mov	a,r3
      000177 52 05            [12] 1640 	anl	ar5,a
      000179 EC               [12] 1641 	mov	a,r4
      00017A 4D               [12] 1642 	orl	a,r5
      00017B 60 07            [24] 1643 	jz	00115$
                           00017D  1644 	C$i2c.h$127$2$87 ==.
                                   1645 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: return i+49;
      00017D 74 31            [12] 1646 	mov	a,#0x31
      00017F 2F               [12] 1647 	add	a,r7
      000180 F5 82            [12] 1648 	mov	dpl,a
      000182 80 33            [24] 1649 	sjmp	00116$
      000184                       1650 00115$:
                           000184  1651 	C$i2c.h$124$1$86 ==.
                                   1652 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000184 0E               [12] 1653 	inc	r6
      000185 8E 07            [24] 1654 	mov	ar7,r6
      000187 BE 08 00         [24] 1655 	cjne	r6,#0x08,00147$
      00018A                       1656 00147$:
      00018A 40 D0            [24] 1657 	jc	00114$
                           00018C  1658 	C$i2c.h$130$1$86 ==.
                                   1659 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:130: if(Data[1] & 0x01) return '9';  //if the value is equal to 9 return 9.
      00018C E5*09            [12] 1660 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00018E 30 E0 05         [24] 1661 	jnb	acc.0,00107$
      000191 75 82 39         [24] 1662 	mov	dpl,#0x39
      000194 80 21            [24] 1663 	sjmp	00116$
      000196                       1664 00107$:
                           000196  1665 	C$i2c.h$132$1$86 ==.
                                   1666 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:132: if(Data[1] & 0x02) return '*';  //if the value is equal to the star.
      000196 E5*09            [12] 1667 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      000198 30 E1 05         [24] 1668 	jnb	acc.1,00109$
      00019B 75 82 2A         [24] 1669 	mov	dpl,#0x2a
      00019E 80 17            [24] 1670 	sjmp	00116$
      0001A0                       1671 00109$:
                           0001A0  1672 	C$i2c.h$134$1$86 ==.
                                   1673 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:134: if(Data[1] & 0x04) return '0';  //if the value is equal to the 0 key
      0001A0 E5*09            [12] 1674 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001A2 30 E2 05         [24] 1675 	jnb	acc.2,00111$
      0001A5 75 82 30         [24] 1676 	mov	dpl,#0x30
      0001A8 80 0D            [24] 1677 	sjmp	00116$
      0001AA                       1678 00111$:
                           0001AA  1679 	C$i2c.h$136$1$86 ==.
                                   1680 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:136: if(Data[1] & 0x08) return '#';  //if the value is equal to the pound key
      0001AA E5*09            [12] 1681 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001AC 30 E3 05         [24] 1682 	jnb	acc.3,00113$
      0001AF 75 82 23         [24] 1683 	mov	dpl,#0x23
      0001B2 80 03            [24] 1684 	sjmp	00116$
      0001B4                       1685 00113$:
                           0001B4  1686 	C$i2c.h$138$1$86 ==.
                                   1687 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:138: return 0xFF;                    //else return a numerical -1 (0xFF)
      0001B4 75 82 FF         [24] 1688 	mov	dpl,#0xff
      0001B7                       1689 00116$:
                           0001B7  1690 	C$i2c.h$139$1$86 ==.
                           0001B7  1691 	XG$read_keypad$0$0 ==.
      0001B7 22               [24] 1692 	ret
                                   1693 ;------------------------------------------------------------
                                   1694 ;Allocation info for local variables in function 'kpd_input'
                                   1695 ;------------------------------------------------------------
                                   1696 ;mode                      Allocated to registers r7 
                                   1697 ;sum                       Allocated to registers r5 r6 
                                   1698 ;key                       Allocated to registers r3 
                                   1699 ;i                         Allocated to registers 
                                   1700 ;------------------------------------------------------------
                           0001B8  1701 	G$kpd_input$0$0 ==.
                           0001B8  1702 	C$i2c.h$151$1$86 ==.
                                   1703 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:151: unsigned int kpd_input(char mode)
                                   1704 ;	-----------------------------------------
                                   1705 ;	 function kpd_input
                                   1706 ;	-----------------------------------------
      0001B8                       1707 _kpd_input:
      0001B8 AF 82            [24] 1708 	mov	r7,dpl
                           0001BA  1709 	C$i2c.h$156$1$89 ==.
                                   1710 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: sum = 0;
                           0001BA  1711 	C$i2c.h$159$1$89 ==.
                                   1712 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:159: if(mode==0)lcd_print("\nType digits; end w/#");
      0001BA E4               [12] 1713 	clr	a
      0001BB FD               [12] 1714 	mov	r5,a
      0001BC FE               [12] 1715 	mov	r6,a
      0001BD EF               [12] 1716 	mov	a,r7
      0001BE 70 1D            [24] 1717 	jnz	00102$
      0001C0 C0 06            [24] 1718 	push	ar6
      0001C2 C0 05            [24] 1719 	push	ar5
      0001C4 74r00            [12] 1720 	mov	a,#___str_0
      0001C6 C0 E0            [24] 1721 	push	acc
      0001C8 74s00            [12] 1722 	mov	a,#(___str_0 >> 8)
      0001CA C0 E0            [24] 1723 	push	acc
      0001CC 74 80            [12] 1724 	mov	a,#0x80
      0001CE C0 E0            [24] 1725 	push	acc
      0001D0 12r00r7B         [24] 1726 	lcall	_lcd_print
      0001D3 15 81            [12] 1727 	dec	sp
      0001D5 15 81            [12] 1728 	dec	sp
      0001D7 15 81            [12] 1729 	dec	sp
      0001D9 D0 05            [24] 1730 	pop	ar5
      0001DB D0 06            [24] 1731 	pop	ar6
      0001DD                       1732 00102$:
                           0001DD  1733 	C$i2c.h$161$1$89 ==.
                                   1734 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:161: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001DD C0 06            [24] 1735 	push	ar6
      0001DF C0 05            [24] 1736 	push	ar5
      0001E1 74 08            [12] 1737 	mov	a,#0x08
      0001E3 C0 E0            [24] 1738 	push	acc
      0001E5 E4               [12] 1739 	clr	a
      0001E6 C0 E0            [24] 1740 	push	acc
      0001E8 74 08            [12] 1741 	mov	a,#0x08
      0001EA C0 E0            [24] 1742 	push	acc
      0001EC E4               [12] 1743 	clr	a
      0001ED C0 E0            [24] 1744 	push	acc
      0001EF 74 08            [12] 1745 	mov	a,#0x08
      0001F1 C0 E0            [24] 1746 	push	acc
      0001F3 E4               [12] 1747 	clr	a
      0001F4 C0 E0            [24] 1748 	push	acc
      0001F6 74 08            [12] 1749 	mov	a,#0x08
      0001F8 C0 E0            [24] 1750 	push	acc
      0001FA E4               [12] 1751 	clr	a
      0001FB C0 E0            [24] 1752 	push	acc
      0001FD 74 08            [12] 1753 	mov	a,#0x08
      0001FF C0 E0            [24] 1754 	push	acc
      000201 E4               [12] 1755 	clr	a
      000202 C0 E0            [24] 1756 	push	acc
      000204 74r16            [12] 1757 	mov	a,#___str_1
      000206 C0 E0            [24] 1758 	push	acc
      000208 74s00            [12] 1759 	mov	a,#(___str_1 >> 8)
      00020A C0 E0            [24] 1760 	push	acc
      00020C 74 80            [12] 1761 	mov	a,#0x80
      00020E C0 E0            [24] 1762 	push	acc
      000210 12r00r7B         [24] 1763 	lcall	_lcd_print
      000213 E5 81            [12] 1764 	mov	a,sp
      000215 24 F3            [12] 1765 	add	a,#0xf3
      000217 F5 81            [12] 1766 	mov	sp,a
                           000219  1767 	C$i2c.h$163$1$89 ==.
                                   1768 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:163: delay_time(500000);             //Add 20ms delay before reading i2c in loop
      000219 90 A1 20         [24] 1769 	mov	dptr,#0xa120
      00021C 75 F0 07         [24] 1770 	mov	b,#0x07
      00021F E4               [12] 1771 	clr	a
      000220 12r03r27         [24] 1772 	lcall	_delay_time
      000223 D0 05            [24] 1773 	pop	ar5
      000225 D0 06            [24] 1774 	pop	ar6
                           000227  1775 	C$i2c.h$167$1$89 ==.
                                   1776 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000227 7F 00            [12] 1777 	mov	r7,#0x00
                           000229  1778 	C$i2c.h$169$3$92 ==.
                                   1779 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(((key=read_keypad()) == 0xFF) || (key == '*'))delay_time(10000);
      000229                       1780 00104$:
      000229 C0 07            [24] 1781 	push	ar7
      00022B C0 06            [24] 1782 	push	ar6
      00022D C0 05            [24] 1783 	push	ar5
      00022F 12r01r39         [24] 1784 	lcall	_read_keypad
      000232 AC 82            [24] 1785 	mov	r4,dpl
      000234 D0 05            [24] 1786 	pop	ar5
      000236 D0 06            [24] 1787 	pop	ar6
      000238 D0 07            [24] 1788 	pop	ar7
      00023A 8C 03            [24] 1789 	mov	ar3,r4
      00023C BC FF 02         [24] 1790 	cjne	r4,#0xff,00146$
      00023F 80 03            [24] 1791 	sjmp	00105$
      000241                       1792 00146$:
      000241 BB 2A 17         [24] 1793 	cjne	r3,#0x2a,00106$
      000244                       1794 00105$:
      000244 90 27 10         [24] 1795 	mov	dptr,#0x2710
      000247 E4               [12] 1796 	clr	a
      000248 F5 F0            [12] 1797 	mov	b,a
      00024A C0 07            [24] 1798 	push	ar7
      00024C C0 06            [24] 1799 	push	ar6
      00024E C0 05            [24] 1800 	push	ar5
      000250 12r03r27         [24] 1801 	lcall	_delay_time
      000253 D0 05            [24] 1802 	pop	ar5
      000255 D0 06            [24] 1803 	pop	ar6
      000257 D0 07            [24] 1804 	pop	ar7
      000259 80 CE            [24] 1805 	sjmp	00104$
      00025B                       1806 00106$:
                           00025B  1807 	C$i2c.h$170$2$90 ==.
                                   1808 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: if(key == '#')
      00025B BB 23 2A         [24] 1809 	cjne	r3,#0x23,00114$
                           00025E  1810 	C$i2c.h$172$3$91 ==.
                                   1811 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:172: while(read_keypad() == '#')delay_time(10000);
      00025E                       1812 00107$:
      00025E C0 06            [24] 1813 	push	ar6
      000260 C0 05            [24] 1814 	push	ar5
      000262 12r01r39         [24] 1815 	lcall	_read_keypad
      000265 AC 82            [24] 1816 	mov	r4,dpl
      000267 D0 05            [24] 1817 	pop	ar5
      000269 D0 06            [24] 1818 	pop	ar6
      00026B BC 23 13         [24] 1819 	cjne	r4,#0x23,00109$
      00026E 90 27 10         [24] 1820 	mov	dptr,#0x2710
      000271 E4               [12] 1821 	clr	a
      000272 F5 F0            [12] 1822 	mov	b,a
      000274 C0 06            [24] 1823 	push	ar6
      000276 C0 05            [24] 1824 	push	ar5
      000278 12r03r27         [24] 1825 	lcall	_delay_time
      00027B D0 05            [24] 1826 	pop	ar5
      00027D D0 06            [24] 1827 	pop	ar6
      00027F 80 DD            [24] 1828 	sjmp	00107$
      000281                       1829 00109$:
                           000281  1830 	C$i2c.h$173$3$91 ==.
                                   1831 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:173: return sum;
      000281 8D 82            [24] 1832 	mov	dpl,r5
      000283 8E 83            [24] 1833 	mov	dph,r6
      000285 02r03r26         [24] 1834 	ljmp	00119$
      000288                       1835 00114$:
                           000288  1836 	C$i2c.h$177$3$92 ==.
                                   1837 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:177: lcd_print("%c", key);
      000288 8B 02            [24] 1838 	mov	ar2,r3
      00028A 7C 00            [12] 1839 	mov	r4,#0x00
      00028C C0 07            [24] 1840 	push	ar7
      00028E C0 06            [24] 1841 	push	ar6
      000290 C0 05            [24] 1842 	push	ar5
      000292 C0 04            [24] 1843 	push	ar4
      000294 C0 03            [24] 1844 	push	ar3
      000296 C0 02            [24] 1845 	push	ar2
      000298 C0 02            [24] 1846 	push	ar2
      00029A C0 04            [24] 1847 	push	ar4
      00029C 74r26            [12] 1848 	mov	a,#___str_2
      00029E C0 E0            [24] 1849 	push	acc
      0002A0 74s00            [12] 1850 	mov	a,#(___str_2 >> 8)
      0002A2 C0 E0            [24] 1851 	push	acc
      0002A4 74 80            [12] 1852 	mov	a,#0x80
      0002A6 C0 E0            [24] 1853 	push	acc
      0002A8 12r00r7B         [24] 1854 	lcall	_lcd_print
      0002AB E5 81            [12] 1855 	mov	a,sp
      0002AD 24 FB            [12] 1856 	add	a,#0xfb
      0002AF F5 81            [12] 1857 	mov	sp,a
      0002B1 D0 02            [24] 1858 	pop	ar2
      0002B3 D0 03            [24] 1859 	pop	ar3
      0002B5 D0 04            [24] 1860 	pop	ar4
      0002B7 D0 05            [24] 1861 	pop	ar5
      0002B9 D0 06            [24] 1862 	pop	ar6
                           0002BB  1863 	C$i2c.h$178$1$89 ==.
                                   1864 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:178: sum = sum*10 + key - '0';
      0002BB 8D*00            [24] 1865 	mov	__mulint_PARM_2,r5
      0002BD 8E*01            [24] 1866 	mov	(__mulint_PARM_2 + 1),r6
      0002BF 90 00 0A         [24] 1867 	mov	dptr,#0x000a
      0002C2 C0 04            [24] 1868 	push	ar4
      0002C4 C0 03            [24] 1869 	push	ar3
      0002C6 C0 02            [24] 1870 	push	ar2
      0002C8 12r00r00         [24] 1871 	lcall	__mulint
      0002CB A8 82            [24] 1872 	mov	r0,dpl
      0002CD A9 83            [24] 1873 	mov	r1,dph
      0002CF D0 02            [24] 1874 	pop	ar2
      0002D1 D0 03            [24] 1875 	pop	ar3
      0002D3 D0 04            [24] 1876 	pop	ar4
      0002D5 D0 07            [24] 1877 	pop	ar7
      0002D7 EA               [12] 1878 	mov	a,r2
      0002D8 28               [12] 1879 	add	a,r0
      0002D9 F8               [12] 1880 	mov	r0,a
      0002DA EC               [12] 1881 	mov	a,r4
      0002DB 39               [12] 1882 	addc	a,r1
      0002DC F9               [12] 1883 	mov	r1,a
      0002DD E8               [12] 1884 	mov	a,r0
      0002DE 24 D0            [12] 1885 	add	a,#0xd0
      0002E0 FD               [12] 1886 	mov	r5,a
      0002E1 E9               [12] 1887 	mov	a,r1
      0002E2 34 FF            [12] 1888 	addc	a,#0xff
      0002E4 FE               [12] 1889 	mov	r6,a
                           0002E5  1890 	C$i2c.h$179$3$92 ==.
                                   1891 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E5                       1892 00110$:
      0002E5 C0 07            [24] 1893 	push	ar7
      0002E7 C0 06            [24] 1894 	push	ar6
      0002E9 C0 05            [24] 1895 	push	ar5
      0002EB C0 03            [24] 1896 	push	ar3
      0002ED 12r01r39         [24] 1897 	lcall	_read_keypad
      0002F0 AC 82            [24] 1898 	mov	r4,dpl
      0002F2 D0 03            [24] 1899 	pop	ar3
      0002F4 D0 05            [24] 1900 	pop	ar5
      0002F6 D0 06            [24] 1901 	pop	ar6
      0002F8 D0 07            [24] 1902 	pop	ar7
      0002FA EC               [12] 1903 	mov	a,r4
      0002FB B5 03 1B         [24] 1904 	cjne	a,ar3,00118$
      0002FE 90 27 10         [24] 1905 	mov	dptr,#0x2710
      000301 E4               [12] 1906 	clr	a
      000302 F5 F0            [12] 1907 	mov	b,a
      000304 C0 07            [24] 1908 	push	ar7
      000306 C0 06            [24] 1909 	push	ar6
      000308 C0 05            [24] 1910 	push	ar5
      00030A C0 03            [24] 1911 	push	ar3
      00030C 12r03r27         [24] 1912 	lcall	_delay_time
      00030F D0 03            [24] 1913 	pop	ar3
      000311 D0 05            [24] 1914 	pop	ar5
      000313 D0 06            [24] 1915 	pop	ar6
      000315 D0 07            [24] 1916 	pop	ar7
      000317 80 CC            [24] 1917 	sjmp	00110$
      000319                       1918 00118$:
                           000319  1919 	C$i2c.h$167$1$89 ==.
                                   1920 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000319 0F               [12] 1921 	inc	r7
      00031A BF 05 00         [24] 1922 	cjne	r7,#0x05,00155$
      00031D                       1923 00155$:
      00031D 50 03            [24] 1924 	jnc	00156$
      00031F 02r02r29         [24] 1925 	ljmp	00104$
      000322                       1926 00156$:
                           000322  1927 	C$i2c.h$182$1$89 ==.
                                   1928 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:182: return sum;
      000322 8D 82            [24] 1929 	mov	dpl,r5
      000324 8E 83            [24] 1930 	mov	dph,r6
      000326                       1931 00119$:
                           000326  1932 	C$i2c.h$183$1$89 ==.
                           000326  1933 	XG$kpd_input$0$0 ==.
      000326 22               [24] 1934 	ret
                                   1935 ;------------------------------------------------------------
                                   1936 ;Allocation info for local variables in function 'delay_time'
                                   1937 ;------------------------------------------------------------
                                   1938 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1939 ;index                     Allocated to registers 
                                   1940 ;------------------------------------------------------------
                           000327  1941 	G$delay_time$0$0 ==.
                           000327  1942 	C$i2c.h$192$1$89 ==.
                                   1943 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: void delay_time (unsigned long time_end)
                                   1944 ;	-----------------------------------------
                                   1945 ;	 function delay_time
                                   1946 ;	-----------------------------------------
      000327                       1947 _delay_time:
      000327 AC 82            [24] 1948 	mov	r4,dpl
      000329 AD 83            [24] 1949 	mov	r5,dph
      00032B AE F0            [24] 1950 	mov	r6,b
      00032D FF               [12] 1951 	mov	r7,a
                           00032E  1952 	C$i2c.h$196$1$94 ==.
                                   1953 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: for (index = 0; index < time_end; index++); //for loop delay
      00032E 78 00            [12] 1954 	mov	r0,#0x00
      000330 79 00            [12] 1955 	mov	r1,#0x00
      000332 7A 00            [12] 1956 	mov	r2,#0x00
      000334 7B 00            [12] 1957 	mov	r3,#0x00
      000336                       1958 00103$:
      000336 C3               [12] 1959 	clr	c
      000337 E8               [12] 1960 	mov	a,r0
      000338 9C               [12] 1961 	subb	a,r4
      000339 E9               [12] 1962 	mov	a,r1
      00033A 9D               [12] 1963 	subb	a,r5
      00033B EA               [12] 1964 	mov	a,r2
      00033C 9E               [12] 1965 	subb	a,r6
      00033D EB               [12] 1966 	mov	a,r3
      00033E 9F               [12] 1967 	subb	a,r7
      00033F 50 0F            [24] 1968 	jnc	00105$
      000341 08               [12] 1969 	inc	r0
      000342 B8 00 09         [24] 1970 	cjne	r0,#0x00,00115$
      000345 09               [12] 1971 	inc	r1
      000346 B9 00 05         [24] 1972 	cjne	r1,#0x00,00115$
      000349 0A               [12] 1973 	inc	r2
      00034A BA 00 E9         [24] 1974 	cjne	r2,#0x00,00103$
      00034D 0B               [12] 1975 	inc	r3
      00034E                       1976 00115$:
      00034E 80 E6            [24] 1977 	sjmp	00103$
      000350                       1978 00105$:
                           000350  1979 	C$i2c.h$197$1$94 ==.
                           000350  1980 	XG$delay_time$0$0 ==.
      000350 22               [24] 1981 	ret
                                   1982 ;------------------------------------------------------------
                                   1983 ;Allocation info for local variables in function 'i2c_start'
                                   1984 ;------------------------------------------------------------
                           000351  1985 	G$i2c_start$0$0 ==.
                           000351  1986 	C$i2c.h$200$1$94 ==.
                                   1987 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: void i2c_start(void)
                                   1988 ;	-----------------------------------------
                                   1989 ;	 function i2c_start
                                   1990 ;	-----------------------------------------
      000351                       1991 _i2c_start:
                           000351  1992 	C$i2c.h$202$1$96 ==.
                                   1993 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: while(BUSY);                //Wait until SMBus0 is free
      000351                       1994 00101$:
      000351 20 C7 FD         [24] 1995 	jb	_BUSY,00101$
                           000354  1996 	C$i2c.h$203$1$96 ==.
                                   1997 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:203: STA = 1;                    //Set Start Bit
      000354 D2 C5            [12] 1998 	setb	_STA
                           000356  1999 	C$i2c.h$204$1$96 ==.
                                   2000 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:204: while(!SI);                 //Wait until start sent
      000356                       2001 00104$:
      000356 30 C3 FD         [24] 2002 	jnb	_SI,00104$
                           000359  2003 	C$i2c.h$205$1$96 ==.
                                   2004 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:205: STA = 0;                    //Clear start bit
      000359 C2 C5            [12] 2005 	clr	_STA
                           00035B  2006 	C$i2c.h$206$1$96 ==.
                                   2007 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: SI = 0;                     //Clear SI
      00035B C2 C3            [12] 2008 	clr	_SI
                           00035D  2009 	C$i2c.h$207$1$96 ==.
                           00035D  2010 	XG$i2c_start$0$0 ==.
      00035D 22               [24] 2011 	ret
                                   2012 ;------------------------------------------------------------
                                   2013 ;Allocation info for local variables in function 'i2c_write'
                                   2014 ;------------------------------------------------------------
                                   2015 ;output_data               Allocated to registers 
                                   2016 ;------------------------------------------------------------
                           00035E  2017 	G$i2c_write$0$0 ==.
                           00035E  2018 	C$i2c.h$210$1$96 ==.
                                   2019 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: void i2c_write(unsigned char output_data)
                                   2020 ;	-----------------------------------------
                                   2021 ;	 function i2c_write
                                   2022 ;	-----------------------------------------
      00035E                       2023 _i2c_write:
      00035E 85 82 C2         [24] 2024 	mov	_SMB0DAT,dpl
                           000361  2025 	C$i2c.h$213$1$98 ==.
                                   2026 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:213: while(!SI);                 //Wait until send is complete
      000361                       2027 00101$:
                           000361  2028 	C$i2c.h$214$1$98 ==.
                                   2029 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: SI = 0;                     //Clear SI
      000361 10 C3 02         [24] 2030 	jbc	_SI,00112$
      000364 80 FB            [24] 2031 	sjmp	00101$
      000366                       2032 00112$:
                           000366  2033 	C$i2c.h$215$1$98 ==.
                           000366  2034 	XG$i2c_write$0$0 ==.
      000366 22               [24] 2035 	ret
                                   2036 ;------------------------------------------------------------
                                   2037 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2038 ;------------------------------------------------------------
                                   2039 ;output_data               Allocated to registers 
                                   2040 ;------------------------------------------------------------
                           000367  2041 	G$i2c_write_and_stop$0$0 ==.
                           000367  2042 	C$i2c.h$218$1$98 ==.
                                   2043 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: void i2c_write_and_stop(unsigned char output_data)
                                   2044 ;	-----------------------------------------
                                   2045 ;	 function i2c_write_and_stop
                                   2046 ;	-----------------------------------------
      000367                       2047 _i2c_write_and_stop:
      000367 85 82 C2         [24] 2048 	mov	_SMB0DAT,dpl
                           00036A  2049 	C$i2c.h$221$1$100 ==.
                                   2050 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:221: STO = 1;                    //Set stop bit
      00036A D2 C4            [12] 2051 	setb	_STO
                           00036C  2052 	C$i2c.h$222$1$100 ==.
                                   2053 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:222: while(!SI);                 //Wait until send is complete
      00036C                       2054 00101$:
                           00036C  2055 	C$i2c.h$223$1$100 ==.
                                   2056 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: SI = 0;                     //Clear SI
      00036C 10 C3 02         [24] 2057 	jbc	_SI,00112$
      00036F 80 FB            [24] 2058 	sjmp	00101$
      000371                       2059 00112$:
                           000371  2060 	C$i2c.h$224$1$100 ==.
                           000371  2061 	XG$i2c_write_and_stop$0$0 ==.
      000371 22               [24] 2062 	ret
                                   2063 ;------------------------------------------------------------
                                   2064 ;Allocation info for local variables in function 'i2c_read'
                                   2065 ;------------------------------------------------------------
                                   2066 ;input_data                Allocated to registers 
                                   2067 ;------------------------------------------------------------
                           000372  2068 	G$i2c_read$0$0 ==.
                           000372  2069 	C$i2c.h$227$1$100 ==.
                                   2070 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: unsigned char i2c_read(void)
                                   2071 ;	-----------------------------------------
                                   2072 ;	 function i2c_read
                                   2073 ;	-----------------------------------------
      000372                       2074 _i2c_read:
                           000372  2075 	C$i2c.h$231$1$102 ==.
                                   2076 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:231: while(!SI);                 //Wait until we have data to read
      000372                       2077 00101$:
      000372 30 C3 FD         [24] 2078 	jnb	_SI,00101$
                           000375  2079 	C$i2c.h$232$1$102 ==.
                                   2080 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:232: input_data = SMB0DAT;       //Read the data
      000375 85 C2 82         [24] 2081 	mov	dpl,_SMB0DAT
                           000378  2082 	C$i2c.h$233$1$102 ==.
                                   2083 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: SI = 0;                     //Clear SI
      000378 C2 C3            [12] 2084 	clr	_SI
                           00037A  2085 	C$i2c.h$234$1$102 ==.
                                   2086 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:234: return input_data;          //Return the read data
                           00037A  2087 	C$i2c.h$235$1$102 ==.
                           00037A  2088 	XG$i2c_read$0$0 ==.
      00037A 22               [24] 2089 	ret
                                   2090 ;------------------------------------------------------------
                                   2091 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2092 ;------------------------------------------------------------
                                   2093 ;input_data                Allocated to registers r7 
                                   2094 ;------------------------------------------------------------
                           00037B  2095 	G$i2c_read_and_stop$0$0 ==.
                           00037B  2096 	C$i2c.h$238$1$102 ==.
                                   2097 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: unsigned char i2c_read_and_stop(void)
                                   2098 ;	-----------------------------------------
                                   2099 ;	 function i2c_read_and_stop
                                   2100 ;	-----------------------------------------
      00037B                       2101 _i2c_read_and_stop:
                           00037B  2102 	C$i2c.h$242$1$104 ==.
                                   2103 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: while(!SI);                 //Wait until we have data to read
      00037B                       2104 00101$:
      00037B 30 C3 FD         [24] 2105 	jnb	_SI,00101$
                           00037E  2106 	C$i2c.h$243$1$104 ==.
                                   2107 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:243: input_data = SMB0DAT;       //Read the data
      00037E AF C2            [24] 2108 	mov	r7,_SMB0DAT
                           000380  2109 	C$i2c.h$244$1$104 ==.
                                   2110 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:244: SI = 0;                     //Clear SI
      000380 C2 C3            [12] 2111 	clr	_SI
                           000382  2112 	C$i2c.h$245$1$104 ==.
                                   2113 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:245: STO = 1;                    //Set stop bit
      000382 D2 C4            [12] 2114 	setb	_STO
                           000384  2115 	C$i2c.h$246$1$104 ==.
                                   2116 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: while(!SI);                 //Wait for stop
      000384                       2117 00104$:
                           000384  2118 	C$i2c.h$247$1$104 ==.
                                   2119 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:247: SI = 0;
      000384 10 C3 02         [24] 2120 	jbc	_SI,00122$
      000387 80 FB            [24] 2121 	sjmp	00104$
      000389                       2122 00122$:
                           000389  2123 	C$i2c.h$248$1$104 ==.
                                   2124 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:248: return input_data;          //Return the read data
      000389 8F 82            [24] 2125 	mov	dpl,r7
                           00038B  2126 	C$i2c.h$249$1$104 ==.
                           00038B  2127 	XG$i2c_read_and_stop$0$0 ==.
      00038B 22               [24] 2128 	ret
                                   2129 ;------------------------------------------------------------
                                   2130 ;Allocation info for local variables in function 'i2c_write_data'
                                   2131 ;------------------------------------------------------------
                                   2132 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2133 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2134 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2135 ;addr                      Allocated to registers r7 
                                   2136 ;i                         Allocated to registers 
                                   2137 ;------------------------------------------------------------
                           00038C  2138 	G$i2c_write_data$0$0 ==.
                           00038C  2139 	C$i2c.h$252$1$104 ==.
                                   2140 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2141 ;	-----------------------------------------
                                   2142 ;	 function i2c_write_data
                                   2143 ;	-----------------------------------------
      00038C                       2144 _i2c_write_data:
      00038C AF 82            [24] 2145 	mov	r7,dpl
                           00038E  2146 	C$i2c.h$256$1$106 ==.
                                   2147 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: EA = 0;                     //Don't allow interrupts during I2C work
      00038E C2 AF            [12] 2148 	clr	_EA
                           000390  2149 	C$i2c.h$257$1$106 ==.
                                   2150 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:257: i2c_start();                //Initiate I2C transfer
      000390 C0 07            [24] 2151 	push	ar7
      000392 12r03r51         [24] 2152 	lcall	_i2c_start
      000395 D0 07            [24] 2153 	pop	ar7
                           000397  2154 	C$i2c.h$258$1$106 ==.
                                   2155 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:258: i2c_write(addr & ~0x01);    //Write the desired address to the bus
      000397 74 FE            [12] 2156 	mov	a,#0xfe
      000399 5F               [12] 2157 	anl	a,r7
      00039A F5 82            [12] 2158 	mov	dpl,a
      00039C 12r03r5E         [24] 2159 	lcall	_i2c_write
                           00039F  2160 	C$i2c.h$259$1$106 ==.
                                   2161 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: i2c_write(start_reg);       //Write the start register to the bus
      00039F 85*0A 82         [24] 2162 	mov	dpl,_i2c_write_data_PARM_2
      0003A2 12r03r5E         [24] 2163 	lcall	_i2c_write
                           0003A5  2164 	C$i2c.h$260$1$106 ==.
                                   2165 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003A5 7F 00            [12] 2166 	mov	r7,#0x00
      0003A7                       2167 00103$:
      0003A7 AD*0E            [24] 2168 	mov	r5,_i2c_write_data_PARM_4
      0003A9 7E 00            [12] 2169 	mov	r6,#0x00
      0003AB 1D               [12] 2170 	dec	r5
      0003AC BD FF 01         [24] 2171 	cjne	r5,#0xff,00114$
      0003AF 1E               [12] 2172 	dec	r6
      0003B0                       2173 00114$:
      0003B0 8F 03            [24] 2174 	mov	ar3,r7
      0003B2 7C 00            [12] 2175 	mov	r4,#0x00
      0003B4 C3               [12] 2176 	clr	c
      0003B5 EB               [12] 2177 	mov	a,r3
      0003B6 9D               [12] 2178 	subb	a,r5
      0003B7 EC               [12] 2179 	mov	a,r4
      0003B8 64 80            [12] 2180 	xrl	a,#0x80
      0003BA 8E F0            [24] 2181 	mov	b,r6
      0003BC 63 F0 80         [24] 2182 	xrl	b,#0x80
      0003BF 95 F0            [12] 2183 	subb	a,b
      0003C1 50 1F            [24] 2184 	jnc	00101$
                           0003C3  2185 	C$i2c.h$261$1$106 ==.
                                   2186 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:261: i2c_write(buffer[i]);
      0003C3 EF               [12] 2187 	mov	a,r7
      0003C4 25*0B            [12] 2188 	add	a,_i2c_write_data_PARM_3
      0003C6 FC               [12] 2189 	mov	r4,a
      0003C7 E4               [12] 2190 	clr	a
      0003C8 35*0C            [12] 2191 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003CA FD               [12] 2192 	mov	r5,a
      0003CB AE*0D            [24] 2193 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003CD 8C 82            [24] 2194 	mov	dpl,r4
      0003CF 8D 83            [24] 2195 	mov	dph,r5
      0003D1 8E F0            [24] 2196 	mov	b,r6
      0003D3 12r00r00         [24] 2197 	lcall	__gptrget
      0003D6 F5 82            [12] 2198 	mov	dpl,a
      0003D8 C0 07            [24] 2199 	push	ar7
      0003DA 12r03r5E         [24] 2200 	lcall	_i2c_write
      0003DD D0 07            [24] 2201 	pop	ar7
                           0003DF  2202 	C$i2c.h$260$1$106 ==.
                                   2203 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003DF 0F               [12] 2204 	inc	r7
      0003E0 80 C5            [24] 2205 	sjmp	00103$
      0003E2                       2206 00101$:
                           0003E2  2207 	C$i2c.h$262$1$106 ==.
                                   2208 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003E2 AE*0E            [24] 2209 	mov	r6,_i2c_write_data_PARM_4
      0003E4 7F 00            [12] 2210 	mov	r7,#0x00
      0003E6 1E               [12] 2211 	dec	r6
      0003E7 BE FF 01         [24] 2212 	cjne	r6,#0xff,00116$
      0003EA 1F               [12] 2213 	dec	r7
      0003EB                       2214 00116$:
      0003EB EE               [12] 2215 	mov	a,r6
      0003EC 25*0B            [12] 2216 	add	a,_i2c_write_data_PARM_3
      0003EE FE               [12] 2217 	mov	r6,a
      0003EF EF               [12] 2218 	mov	a,r7
      0003F0 35*0C            [12] 2219 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003F2 FF               [12] 2220 	mov	r7,a
      0003F3 AD*0D            [24] 2221 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003F5 8E 82            [24] 2222 	mov	dpl,r6
      0003F7 8F 83            [24] 2223 	mov	dph,r7
      0003F9 8D F0            [24] 2224 	mov	b,r5
      0003FB 12r00r00         [24] 2225 	lcall	__gptrget
      0003FE F5 82            [12] 2226 	mov	dpl,a
      000400 12r03r67         [24] 2227 	lcall	_i2c_write_and_stop
                           000403  2228 	C$i2c.h$263$1$106 ==.
                                   2229 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: EA = 1;                     //Re-Enable interrupts
      000403 D2 AF            [12] 2230 	setb	_EA
                           000405  2231 	C$i2c.h$264$1$106 ==.
                           000405  2232 	XG$i2c_write_data$0$0 ==.
      000405 22               [24] 2233 	ret
                                   2234 ;------------------------------------------------------------
                                   2235 ;Allocation info for local variables in function 'i2c_read_data'
                                   2236 ;------------------------------------------------------------
                                   2237 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2238 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2239 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2240 ;addr                      Allocated to registers r7 
                                   2241 ;j                         Allocated to registers 
                                   2242 ;------------------------------------------------------------
                           000406  2243 	G$i2c_read_data$0$0 ==.
                           000406  2244 	C$i2c.h$267$1$106 ==.
                                   2245 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2246 ;	-----------------------------------------
                                   2247 ;	 function i2c_read_data
                                   2248 ;	-----------------------------------------
      000406                       2249 _i2c_read_data:
      000406 AF 82            [24] 2250 	mov	r7,dpl
                           000408  2251 	C$i2c.h$271$1$108 ==.
                                   2252 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:271: EA = 0;                     //Don't allow interrupts during I2C work
      000408 C2 AF            [12] 2253 	clr	_EA
                           00040A  2254 	C$i2c.h$272$1$108 ==.
                                   2255 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: i2c_start();                //Start I2C transfer
      00040A C0 07            [24] 2256 	push	ar7
      00040C 12r03r51         [24] 2257 	lcall	_i2c_start
      00040F D0 07            [24] 2258 	pop	ar7
                           000411  2259 	C$i2c.h$273$1$108 ==.
                                   2260 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: i2c_write(addr & ~0x01);    //Write address of device that will be written to, send 0
      000411 74 FE            [12] 2261 	mov	a,#0xfe
      000413 5F               [12] 2262 	anl	a,r7
      000414 F5 82            [12] 2263 	mov	dpl,a
      000416 C0 07            [24] 2264 	push	ar7
      000418 12r03r5E         [24] 2265 	lcall	_i2c_write
                           00041B  2266 	C$i2c.h$274$1$108 ==.
                                   2267 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:274: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      00041B 85*0F 82         [24] 2268 	mov	dpl,_i2c_read_data_PARM_2
      00041E 12r03r67         [24] 2269 	lcall	_i2c_write_and_stop
                           000421  2270 	C$i2c.h$275$1$108 ==.
                                   2271 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:275: i2c_start();                //Start I2C transfer
      000421 12r03r51         [24] 2272 	lcall	_i2c_start
      000424 D0 07            [24] 2273 	pop	ar7
                           000426  2274 	C$i2c.h$276$1$108 ==.
                                   2275 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:276: i2c_write(addr | 0x01);     //Write address again, this time indicating a read operation
      000426 74 01            [12] 2276 	mov	a,#0x01
      000428 4F               [12] 2277 	orl	a,r7
      000429 F5 82            [12] 2278 	mov	dpl,a
      00042B 12r03r5E         [24] 2279 	lcall	_i2c_write
                           00042E  2280 	C$i2c.h$277$1$108 ==.
                                   2281 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      00042E 7F 00            [12] 2282 	mov	r7,#0x00
      000430                       2283 00103$:
      000430 AD*13            [24] 2284 	mov	r5,_i2c_read_data_PARM_4
      000432 7E 00            [12] 2285 	mov	r6,#0x00
      000434 1D               [12] 2286 	dec	r5
      000435 BD FF 01         [24] 2287 	cjne	r5,#0xff,00114$
      000438 1E               [12] 2288 	dec	r6
      000439                       2289 00114$:
      000439 8F 03            [24] 2290 	mov	ar3,r7
      00043B 7C 00            [12] 2291 	mov	r4,#0x00
      00043D C3               [12] 2292 	clr	c
      00043E EB               [12] 2293 	mov	a,r3
      00043F 9D               [12] 2294 	subb	a,r5
      000440 EC               [12] 2295 	mov	a,r4
      000441 64 80            [12] 2296 	xrl	a,#0x80
      000443 8E F0            [24] 2297 	mov	b,r6
      000445 63 F0 80         [24] 2298 	xrl	b,#0x80
      000448 95 F0            [12] 2299 	subb	a,b
      00044A 50 2E            [24] 2300 	jnc	00101$
                           00044C  2301 	C$i2c.h$279$2$109 ==.
                                   2302 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:279: AA = 1;                 //Set acknowledge bit
      00044C D2 C2            [12] 2303 	setb	_AA
                           00044E  2304 	C$i2c.h$280$2$109 ==.
                                   2305 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:280: buffer[j] = i2c_read(); //Read data, save it in buffer
      00044E EF               [12] 2306 	mov	a,r7
      00044F 25*10            [12] 2307 	add	a,_i2c_read_data_PARM_3
      000451 FC               [12] 2308 	mov	r4,a
      000452 E4               [12] 2309 	clr	a
      000453 35*11            [12] 2310 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000455 FD               [12] 2311 	mov	r5,a
      000456 AE*12            [24] 2312 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      000458 C0 07            [24] 2313 	push	ar7
      00045A C0 06            [24] 2314 	push	ar6
      00045C C0 05            [24] 2315 	push	ar5
      00045E C0 04            [24] 2316 	push	ar4
      000460 12r03r72         [24] 2317 	lcall	_i2c_read
      000463 AB 82            [24] 2318 	mov	r3,dpl
      000465 D0 04            [24] 2319 	pop	ar4
      000467 D0 05            [24] 2320 	pop	ar5
      000469 D0 06            [24] 2321 	pop	ar6
      00046B D0 07            [24] 2322 	pop	ar7
      00046D 8C 82            [24] 2323 	mov	dpl,r4
      00046F 8D 83            [24] 2324 	mov	dph,r5
      000471 8E F0            [24] 2325 	mov	b,r6
      000473 EB               [12] 2326 	mov	a,r3
      000474 12r00r00         [24] 2327 	lcall	__gptrput
                           000477  2328 	C$i2c.h$277$1$108 ==.
                                   2329 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      000477 0F               [12] 2330 	inc	r7
      000478 80 B6            [24] 2331 	sjmp	00103$
      00047A                       2332 00101$:
                           00047A  2333 	C$i2c.h$282$1$108 ==.
                                   2334 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:282: AA = 0;
      00047A C2 C2            [12] 2335 	clr	_AA
                           00047C  2336 	C$i2c.h$283$1$108 ==.
                                   2337 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00047C AE*13            [24] 2338 	mov	r6,_i2c_read_data_PARM_4
      00047E 7F 00            [12] 2339 	mov	r7,#0x00
      000480 1E               [12] 2340 	dec	r6
      000481 BE FF 01         [24] 2341 	cjne	r6,#0xff,00116$
      000484 1F               [12] 2342 	dec	r7
      000485                       2343 00116$:
      000485 EE               [12] 2344 	mov	a,r6
      000486 25*10            [12] 2345 	add	a,_i2c_read_data_PARM_3
      000488 FE               [12] 2346 	mov	r6,a
      000489 EF               [12] 2347 	mov	a,r7
      00048A 35*11            [12] 2348 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00048C FF               [12] 2349 	mov	r7,a
      00048D AD*12            [24] 2350 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      00048F C0 07            [24] 2351 	push	ar7
      000491 C0 06            [24] 2352 	push	ar6
      000493 C0 05            [24] 2353 	push	ar5
      000495 12r03r7B         [24] 2354 	lcall	_i2c_read_and_stop
      000498 AC 82            [24] 2355 	mov	r4,dpl
      00049A D0 05            [24] 2356 	pop	ar5
      00049C D0 06            [24] 2357 	pop	ar6
      00049E D0 07            [24] 2358 	pop	ar7
      0004A0 8E 82            [24] 2359 	mov	dpl,r6
      0004A2 8F 83            [24] 2360 	mov	dph,r7
      0004A4 8D F0            [24] 2361 	mov	b,r5
      0004A6 EC               [12] 2362 	mov	a,r4
      0004A7 12r00r00         [24] 2363 	lcall	__gptrput
                           0004AA  2364 	C$i2c.h$284$1$108 ==.
                                   2365 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:284: EA = 1;                     //Re-Enable interrupts
      0004AA D2 AF            [12] 2366 	setb	_EA
                           0004AC  2367 	C$i2c.h$285$1$108 ==.
                           0004AC  2368 	XG$i2c_read_data$0$0 ==.
      0004AC 22               [24] 2369 	ret
                                   2370 ;------------------------------------------------------------
                                   2371 ;Allocation info for local variables in function 'Accel_Init'
                                   2372 ;------------------------------------------------------------
                           0004AD  2373 	G$Accel_Init$0$0 ==.
                           0004AD  2374 	C$i2c.h$294$1$108 ==.
                                   2375 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: void Accel_Init(void)
                                   2376 ;	-----------------------------------------
                                   2377 ;	 function Accel_Init
                                   2378 ;	-----------------------------------------
      0004AD                       2379 _Accel_Init:
                           0004AD  2380 	C$i2c.h$298$1$111 ==.
                                   2381 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:298: Data2[0]=0x23;  //normal power mode, 50Hz ODR, y & x axes enabled
      0004AD 75*00 23         [24] 2382 	mov	_Data2,#0x23
                           0004B0  2383 	C$i2c.h$300$1$111 ==.
                                   2384 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:300: Data2[1]=0x00;  //default - no filtering
      0004B0 75*01 00         [24] 2385 	mov	(_Data2 + 0x0001),#0x00
                           0004B3  2386 	C$i2c.h$301$1$111 ==.
                                   2387 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:301: Data2[1]=0x10;  //filtered data selected, HPF = 1.0->0.125Hz
      0004B3 75*01 10         [24] 2388 	mov	(_Data2 + 0x0001),#0x10
                           0004B6  2389 	C$i2c.h$302$1$111 ==.
                                   2390 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:302: Data2[2]=0x00;  //default - no interrupts enabled
      0004B6 75*02 00         [24] 2391 	mov	(_Data2 + 0x0002),#0x00
                           0004B9  2392 	C$i2c.h$304$1$111 ==.
                                   2393 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:304: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004B9 75*0Br00         [24] 2394 	mov	_i2c_write_data_PARM_3,#_Data2
      0004BC 75*0C 00         [24] 2395 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004BF 75*0D 40         [24] 2396 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C2 75*0A 20         [24] 2397 	mov	_i2c_write_data_PARM_2,#0x20
      0004C5 75*0E 01         [24] 2398 	mov	_i2c_write_data_PARM_4,#0x01
      0004C8 75 82 30         [24] 2399 	mov	dpl,#0x30
      0004CB 12r03r8C         [24] 2400 	lcall	_i2c_write_data
                           0004CE  2401 	C$i2c.h$310$1$111 ==.
                           0004CE  2402 	XG$Accel_Init$0$0 ==.
      0004CE 22               [24] 2403 	ret
                                   2404 ;------------------------------------------------------------
                                   2405 ;Allocation info for local variables in function 'Accel_Init_C'
                                   2406 ;------------------------------------------------------------
                           0004CF  2407 	G$Accel_Init_C$0$0 ==.
                           0004CF  2408 	C$i2c.h$313$1$111 ==.
                                   2409 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:313: void Accel_Init_C(void)
                                   2410 ;	-----------------------------------------
                                   2411 ;	 function Accel_Init_C
                                   2412 ;	-----------------------------------------
      0004CF                       2413 _Accel_Init_C:
                           0004CF  2414 	C$i2c.h$318$1$113 ==.
                                   2415 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:318: Data2[0]=0x04;  //set register address auto increment bit
      0004CF 75*00 04         [24] 2416 	mov	_Data2,#0x04
                           0004D2  2417 	C$i2c.h$319$1$113 ==.
                                   2418 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:319: i2c_write_data(addr_accelC, 0x23, Data2, 1);
      0004D2 75*0Br00         [24] 2419 	mov	_i2c_write_data_PARM_3,#_Data2
      0004D5 75*0C 00         [24] 2420 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004D8 75*0D 40         [24] 2421 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004DB 75*0A 23         [24] 2422 	mov	_i2c_write_data_PARM_2,#0x23
      0004DE 75*0E 01         [24] 2423 	mov	_i2c_write_data_PARM_4,#0x01
      0004E1 75 82 3A         [24] 2424 	mov	dpl,#0x3a
      0004E4 12r03r8C         [24] 2425 	lcall	_i2c_write_data
                           0004E7  2426 	C$i2c.h$321$1$113 ==.
                                   2427 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:321: Data2[0]=0x6B;  //R20 normal power mode, 800Hz ODR, y & x axes enabled
      0004E7 75*00 6B         [24] 2428 	mov	_Data2,#0x6b
                           0004EA  2429 	C$i2c.h$323$1$113 ==.
                                   2430 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:323: Data2[1]=0x00;  //R21 Default - no HP filtering
      0004EA 75*01 00         [24] 2431 	mov	(_Data2 + 0x0001),#0x00
                           0004ED  2432 	C$i2c.h$325$1$113 ==.
                                   2433 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:325: Data2[2]=0x00;  //R22 Default - no interrupts enabled
      0004ED 75*02 00         [24] 2434 	mov	(_Data2 + 0x0002),#0x00
                           0004F0  2435 	C$i2c.h$326$1$113 ==.
                                   2436 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:326: i2c_write_data(addr_accelC, 0x20, Data2, 1);
      0004F0 75*0Br00         [24] 2437 	mov	_i2c_write_data_PARM_3,#_Data2
      0004F3 75*0C 00         [24] 2438 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004F6 75*0D 40         [24] 2439 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004F9 75*0A 20         [24] 2440 	mov	_i2c_write_data_PARM_2,#0x20
      0004FC 75*0E 01         [24] 2441 	mov	_i2c_write_data_PARM_4,#0x01
      0004FF 75 82 3A         [24] 2442 	mov	dpl,#0x3a
      000502 12r03r8C         [24] 2443 	lcall	_i2c_write_data
                           000505  2444 	C$i2c.h$328$1$113 ==.
                           000505  2445 	XG$Accel_Init_C$0$0 ==.
      000505 22               [24] 2446 	ret
                                   2447 ;------------------------------------------------------------
                                   2448 ;Allocation info for local variables in function 'main'
                                   2449 ;------------------------------------------------------------
                           000506  2450 	G$main$0$0 ==.
q                                  2451 	C$lab4k_(1).c$72$1$113 ==.
                                   2452 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:72: void main(void)
                                   2453 ;	-----------------------------------------
                                   2454 ;	 function main
                                   2455 ;	-----------------------------------------
      000506                       2456 _main:
q                                  2457 	C$lab4k_(1).c$75$1$130 ==.
                                   2458 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:75: Sys_Init();
      000506 12r00r37         [24] 2459 	lcall	_Sys_Init
q                                  2460 	C$lab4k_(1).c$76$1$130 ==.
                                   2461 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:76: putchar(' '); //the quotes in this line may not format correctly
      000509 75 82 20         [24] 2462 	mov	dpl,#0x20
      00050C 12r00r4A         [24] 2463 	lcall	_putchar
q                                  2464 	C$lab4k_(1).c$77$1$130 ==.
                                   2465 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:77: Port_Init();
      00050F 12r05rD2         [24] 2466 	lcall	_Port_Init
q                                  2467 	C$lab4k_(1).c$78$1$130 ==.
                                   2468 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:78: XBR0_Init();//!!!!!!!!!!!!!!Done set the crossbar to accomodate untrasonic ranger
      000512 12r05rE5         [24] 2469 	lcall	_XBR0_Init
q                                  2470 	C$lab4k_(1).c$79$1$130 ==.
                                   2471 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:79: PCA_Init();
      000515 12r05rE9         [24] 2472 	lcall	_PCA_Init
q                                  2473 	C$lab4k_(1).c$80$1$130 ==.
                                   2474 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:80: SMB_Init();
      000518 12r05rFE         [24] 2475 	lcall	_SMB_Init
q                                  2476 	C$lab4k_(1).c$81$1$130 ==.
                                   2477 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:81: ADC_Init();
      00051B 12r06r04         [24] 2478 	lcall	_ADC_Init
q                                  2479 	C$lab4k_(1).c$84$1$130 ==.
                                   2480 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:84: printf("Embedded Control Pulsewidth Calibration\r\n");
      00051E 74r29            [12] 2481 	mov	a,#___str_3
      000520 C0 E0            [24] 2482 	push	acc
      000522 74s00            [12] 2483 	mov	a,#(___str_3 >> 8)
      000524 C0 E0            [24] 2484 	push	acc
      000526 74 80            [12] 2485 	mov	a,#0x80
      000528 C0 E0            [24] 2486 	push	acc
      00052A 12r00r00         [24] 2487 	lcall	_printf
      00052D 15 81            [12] 2488 	dec	sp
      00052F 15 81            [12] 2489 	dec	sp
      000531 15 81            [12] 2490 	dec	sp
q                                  2491 	C$lab4k_(1).c$89$1$130 ==.
                                   2492 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:89: sPW = sPW_CENTER;
      000533 90r00r00         [24] 2493 	mov	dptr,#_sPW_CENTER
      000536 E0               [24] 2494 	movx	a,@dptr
      000537 F5*16            [12] 2495 	mov	_sPW,a
      000539 A3               [24] 2496 	inc	dptr
      00053A E0               [24] 2497 	movx	a,@dptr
      00053B F5*17            [12] 2498 	mov	(_sPW + 1),a
q                                  2499 	C$lab4k_(1).c$90$1$130 ==.
                                   2500 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:90: PCA0CP0 = 65535 - sPW;
      00053D AC*16            [24] 2501 	mov	r4,_sPW
      00053F AD*17            [24] 2502 	mov	r5,(_sPW + 1)
      000541 E4               [12] 2503 	clr	a
      000542 FE               [12] 2504 	mov	r6,a
      000543 FF               [12] 2505 	mov	r7,a
      000544 74 FF            [12] 2506 	mov	a,#0xff
      000546 C3               [12] 2507 	clr	c
      000547 9C               [12] 2508 	subb	a,r4
      000548 FC               [12] 2509 	mov	r4,a
      000549 74 FF            [12] 2510 	mov	a,#0xff
      00054B 9D               [12] 2511 	subb	a,r5
      00054C FD               [12] 2512 	mov	r5,a
      00054D E4               [12] 2513 	clr	a
      00054E 9E               [12] 2514 	subb	a,r6
      00054F E4               [12] 2515 	clr	a
      000550 9F               [12] 2516 	subb	a,r7
      000551 8C EA            [24] 2517 	mov	((_PCA0CP0 >> 0) & 0xFF),r4
      000553 8D FA            [24] 2518 	mov	((_PCA0CP0 >> 8) & 0xFF),r5
q                                  2519 	C$lab4k_(1).c$91$1$130 ==.
                                   2520 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:91: mPW = mPW_CENTER;
      000555 90r00r06         [24] 2521 	mov	dptr,#_mPW_CENTER
      000558 E0               [24] 2522 	movx	a,@dptr
      000559 F5*18            [12] 2523 	mov	_mPW,a
      00055B A3               [24] 2524 	inc	dptr
      00055C E0               [24] 2525 	movx	a,@dptr
      00055D F5*19            [12] 2526 	mov	(_mPW + 1),a
q                                  2527 	C$lab4k_(1).c$92$1$130 ==.
                                   2528 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:92: PCA0CP2 = 65535 - mPW;
      00055F AC*18            [24] 2529 	mov	r4,_mPW
      000561 AD*19            [24] 2530 	mov	r5,(_mPW + 1)
      000563 E4               [12] 2531 	clr	a
      000564 FE               [12] 2532 	mov	r6,a
      000565 FF               [12] 2533 	mov	r7,a
      000566 74 FF            [12] 2534 	mov	a,#0xff
      000568 C3               [12] 2535 	clr	c
      000569 9C               [12] 2536 	subb	a,r4
      00056A FC               [12] 2537 	mov	r4,a
      00056B 74 FF            [12] 2538 	mov	a,#0xff
      00056D 9D               [12] 2539 	subb	a,r5
      00056E FD               [12] 2540 	mov	r5,a
      00056F E4               [12] 2541 	clr	a
      000570 9E               [12] 2542 	subb	a,r6
      000571 E4               [12] 2543 	clr	a
      000572 9F               [12] 2544 	subb	a,r7
      000573 8C EC            [24] 2545 	mov	((_PCA0CP2 >> 0) & 0xFF),r4
      000575 8D FC            [24] 2546 	mov	((_PCA0CP2 >> 8) & 0xFF),r5
q                                  2547 	C$lab4k_(1).c$93$1$130 ==.
                                   2548 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:93: lcd_clear();
      000577 12r01r00         [24] 2549 	lcall	_lcd_clear
q                                  2550 	C$lab4k_(1).c$94$1$130 ==.
                                   2551 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:94: lcd_print("Calibration:\nHello world!\n");
      00057A 74r53            [12] 2552 	mov	a,#___str_4
      00057C C0 E0            [24] 2553 	push	acc
      00057E 74s00            [12] 2554 	mov	a,#(___str_4 >> 8)
      000580 C0 E0            [24] 2555 	push	acc
      000582 74 80            [12] 2556 	mov	a,#0x80
      000584 C0 E0            [24] 2557 	push	acc
      000586 12r00r7B         [24] 2558 	lcall	_lcd_print
      000589 15 81            [12] 2559 	dec	sp
      00058B 15 81            [12] 2560 	dec	sp
      00058D 15 81            [12] 2561 	dec	sp
q                                  2562 	C$lab4k_(1).c$95$1$130 ==.
                                   2563 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:95: while(Counts < 50);//wait for 1 sec
      00058F                       2564 00101$:
      00058F C3               [12] 2565 	clr	c
      000590 E5*14            [12] 2566 	mov	a,_Counts
      000592 94 32            [12] 2567 	subb	a,#0x32
      000594 E5*15            [12] 2568 	mov	a,(_Counts + 1)
      000596 94 00            [12] 2569 	subb	a,#0x00
      000598 40 F5            [24] 2570 	jc	00101$
q                                  2571 	C$lab4k_(1).c$97$1$130 ==.
                                   2572 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:97: printf("Steering Calibration finished. %u \r\n",sPW);
      00059A C0*16            [24] 2573 	push	_sPW
      00059C C0*17            [24] 2574 	push	(_sPW + 1)
      00059E 74r6E            [12] 2575 	mov	a,#___str_5
      0005A0 C0 E0            [24] 2576 	push	acc
      0005A2 74s00            [12] 2577 	mov	a,#(___str_5 >> 8)
      0005A4 C0 E0            [24] 2578 	push	acc
      0005A6 74 80            [12] 2579 	mov	a,#0x80
      0005A8 C0 E0            [24] 2580 	push	acc
      0005AA 12r00r00         [24] 2581 	lcall	_printf
      0005AD E5 81            [12] 2582 	mov	a,sp
      0005AF 24 FB            [12] 2583 	add	a,#0xfb
      0005B1 F5 81            [12] 2584 	mov	sp,a
q                                  2585 	C$lab4k_(1).c$98$1$130 ==.
                                   2586 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:98: printf("Motor Calibration finished. %u \r\n",mPW);
      0005B3 C0*18            [24] 2587 	push	_mPW
      0005B5 C0*19            [24] 2588 	push	(_mPW + 1)
      0005B7 74r93            [12] 2589 	mov	a,#___str_6
      0005B9 C0 E0            [24] 2590 	push	acc
      0005BB 74s00            [12] 2591 	mov	a,#(___str_6 >> 8)
      0005BD C0 E0            [24] 2592 	push	acc
      0005BF 74 80            [12] 2593 	mov	a,#0x80
      0005C1 C0 E0            [24] 2594 	push	acc
      0005C3 12r00r00         [24] 2595 	lcall	_printf
      0005C6 E5 81            [12] 2596 	mov	a,sp
      0005C8 24 FB            [12] 2597 	add	a,#0xfb
      0005CA F5 81            [12] 2598 	mov	sp,a
q                                  2599 	C$lab4k_(1).c$102$1$130 ==.
                                   2600 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:102: while(1)
      0005CC                       2601 00105$:
q                                  2602 	C$lab4k_(1).c$104$2$131 ==.
                                   2603 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:104: CarControl();
      0005CC 12r07r1E         [24] 2604 	lcall	_CarControl
      0005CF 80 FB            [24] 2605 	sjmp	00105$
q                                  2606 	C$lab4k_(1).c$106$1$130 ==.
                           0005D1  2607 	XG$main$0$0 ==.
      0005D1 22               [24] 2608 	ret
                                   2609 ;------------------------------------------------------------
                                   2610 ;Allocation info for local variables in function 'Port_Init'
                                   2611 ;------------------------------------------------------------
                           0005D2  2612 	G$Port_Init$0$0 ==.
q                                  2613 	C$lab4k_(1).c$114$1$130 ==.
                                   2614 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:114: void Port_Init()
                                   2615 ;	-----------------------------------------
                                   2616 ;	 function Port_Init
                                   2617 ;	-----------------------------------------
      0005D2                       2618 _Port_Init:
q                                  2619 	C$lab4k_(1).c$116$1$132 ==.
                                   2620 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:116: P1MDOUT |= 0x0C;  //set output pin for CEX0 or CEX2 in push-pull mode on p1.0-steering, p1.2-motor
      0005D2 43 A5 0C         [24] 2621 	orl	_P1MDOUT,#0x0c
q                                  2622 	C$lab4k_(1).c$117$1$132 ==.
                                   2623 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:117: P3MDOUT &= ~0x80; //set input pin open-drain for slide switch on p3.5, p3.6, p3.7
      0005D5 53 A7 7F         [24] 2624 	anl	_P3MDOUT,#0x7f
q                                  2625 	C$lab4k_(1).c$118$1$132 ==.
                                   2626 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:118: P3 |= 0x80; //set input pin in high-impedience
      0005D8 43 B0 80         [24] 2627 	orl	_P3,#0x80
q                                  2628 	C$lab4k_(1).c$119$1$132 ==.
                                   2629 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:119: P1MDIN &= ~0x80;
      0005DB 53 BD 7F         [24] 2630 	anl	_P1MDIN,#0x7f
q                                  2631 	C$lab4k_(1).c$120$1$132 ==.
                                   2632 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:120: P1 |= 0x80;
      0005DE 43 90 80         [24] 2633 	orl	_P1,#0x80
q                                  2634 	C$lab4k_(1).c$121$1$132 ==.
                                   2635 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:121: P1MDOUT &= ~0x80;
      0005E1 53 A5 7F         [24] 2636 	anl	_P1MDOUT,#0x7f
q                                  2637 	C$lab4k_(1).c$122$1$132 ==.
                           0005E4  2638 	XG$Port_Init$0$0 ==.
      0005E4 22               [24] 2639 	ret
                                   2640 ;------------------------------------------------------------
                                   2641 ;Allocation info for local variables in function 'XBR0_Init'
                                   2642 ;------------------------------------------------------------
                           0005E5  2643 	G$XBR0_Init$0$0 ==.
q                                  2644 	C$lab4k_(1).c$130$1$132 ==.
                                   2645 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:130: void XBR0_Init()
                                   2646 ;	-----------------------------------------
                                   2647 ;	 function XBR0_Init
                                   2648 ;	-----------------------------------------
      0005E5                       2649 _XBR0_Init:
q                                  2650 	C$lab4k_(1).c$132$1$133 ==.
                                   2651 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:132: XBR0 = 0x27;  //configure crossbar as directed in the laboratory
      0005E5 75 E1 27         [24] 2652 	mov	_XBR0,#0x27
q                                  2653 	C$lab4k_(1).c$134$1$133 ==.
                           0005E8  2654 	XG$XBR0_Init$0$0 ==.
      0005E8 22               [24] 2655 	ret
                                   2656 ;------------------------------------------------------------
                                   2657 ;Allocation info for local variables in function 'PCA_Init'
                                   2658 ;------------------------------------------------------------
                           0005E9  2659 	G$PCA_Init$0$0 ==.
q                                  2660 	C$lab4k_(1).c$142$1$133 ==.
                                   2661 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:142: void PCA_Init(void)
                                   2662 ;	-----------------------------------------
                                   2663 ;	 function PCA_Init
                                   2664 ;	-----------------------------------------
      0005E9                       2665 _PCA_Init:
q                                  2666 	C$lab4k_(1).c$146$1$135 ==.
                                   2667 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:146: PCA0CN = 0x40;
      0005E9 75 D8 40         [24] 2668 	mov	_PCA0CN,#0x40
q                                  2669 	C$lab4k_(1).c$147$1$135 ==.
                                   2670 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:147: PCA0MD = 0x81;
      0005EC 75 D9 81         [24] 2671 	mov	_PCA0MD,#0x81
q                                  2672 	C$lab4k_(1).c$148$1$135 ==.
                                   2673 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:148: EIE1 |= 0x08;
      0005EF 43 E6 08         [24] 2674 	orl	_EIE1,#0x08
q                                  2675 	C$lab4k_(1).c$149$1$135 ==.
                                   2676 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:149: EA = 1;
      0005F2 D2 AF            [12] 2677 	setb	_EA
q                                  2678 	C$lab4k_(1).c$151$1$135 ==.
                                   2679 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:151: PCA0CPM0 = PCA0CPM2 = PCA0CPM3 = 0xC2;
      0005F4 75 DD C2         [24] 2680 	mov	_PCA0CPM3,#0xc2
      0005F7 75 DC C2         [24] 2681 	mov	_PCA0CPM2,#0xc2
      0005FA 75 DA C2         [24] 2682 	mov	_PCA0CPM0,#0xc2
q                                  2683 	C$lab4k_(1).c$152$1$135 ==.
                           0005FD  2684 	XG$PCA_Init$0$0 ==.
      0005FD 22               [24] 2685 	ret
                                   2686 ;------------------------------------------------------------
                                   2687 ;Allocation info for local variables in function 'SMB_Init'
                                   2688 ;------------------------------------------------------------
                           0005FE  2689 	G$SMB_Init$0$0 ==.
q                                  2690 	C$lab4k_(1).c$156$1$135 ==.
                                   2691 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:156: void SMB_Init(void)
                                   2692 ;	-----------------------------------------
                                   2693 ;	 function SMB_Init
                                   2694 ;	-----------------------------------------
      0005FE                       2695 _SMB_Init:
q                                  2696 	C$lab4k_(1).c$158$1$137 ==.
                                   2697 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:158: SMB0CR = 0x93;
      0005FE 75 CF 93         [24] 2698 	mov	_SMB0CR,#0x93
q                                  2699 	C$lab4k_(1).c$159$1$137 ==.
                                   2700 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:159: ENSMB = 1; 
      000601 D2 C6            [12] 2701 	setb	_ENSMB
q                                  2702 	C$lab4k_(1).c$160$1$137 ==.
                           000603  2703 	XG$SMB_Init$0$0 ==.
      000603 22               [24] 2704 	ret
                                   2705 ;------------------------------------------------------------
                                   2706 ;Allocation info for local variables in function 'ADC_Init'
                                   2707 ;------------------------------------------------------------
                           000604  2708 	G$ADC_Init$0$0 ==.
q                                  2709 	C$lab4k_(1).c$164$1$137 ==.
                                   2710 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:164: void ADC_Init(void)
                                   2711 ;	-----------------------------------------
                                   2712 ;	 function ADC_Init
                                   2713 ;	-----------------------------------------
      000604                       2714 _ADC_Init:
q                                  2715 	C$lab4k_(1).c$166$1$139 ==.
                                   2716 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:166: REF0CN = 0x03;  /* Set Vref to use internal reference voltage (2.4V) */
      000604 75 D1 03         [24] 2717 	mov	_REF0CN,#0x03
q                                  2718 	C$lab4k_(1).c$167$1$139 ==.
                                   2719 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:167: ADC1CN = 0x80;  /* Enable A/D converter (ADC1) */
      000607 75 AA 80         [24] 2720 	mov	_ADC1CN,#0x80
q                                  2721 	C$lab4k_(1).c$168$1$139 ==.
                                   2722 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:168: ADC1CF |= 0x01; /* Set A/D converter gain to 1 */
      00060A 43 AB 01         [24] 2723 	orl	_ADC1CF,#0x01
q                                  2724 	C$lab4k_(1).c$169$1$139 ==.
                           00060D  2725 	XG$ADC_Init$0$0 ==.
      00060D 22               [24] 2726 	ret
                                   2727 ;------------------------------------------------------------
                                   2728 ;Allocation info for local variables in function 'read_ADC_value'
                                   2729 ;------------------------------------------------------------
                                   2730 ;n                         Allocated to registers 
                                   2731 ;------------------------------------------------------------
                           00060E  2732 	G$read_ADC_value$0$0 ==.
q                                  2733 	C$lab4k_(1).c$171$1$139 ==.
                                   2734 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:171: unsigned char read_ADC_value(unsigned char n)
                                   2735 ;	-----------------------------------------
                                   2736 ;	 function read_ADC_value
                                   2737 ;	-----------------------------------------
      00060E                       2738 _read_ADC_value:
      00060E 85 82 AC         [24] 2739 	mov	_AMX1SL,dpl
q                                  2740 	C$lab4k_(1).c$174$1$141 ==.
                                   2741 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:174: ADC1CN = ADC1CN & ~0x20; /* Clear the “Conversion Completed?flag */
      000611 53 AA DF         [24] 2742 	anl	_ADC1CN,#0xdf
q                                  2743 	C$lab4k_(1).c$175$1$141 ==.
                                   2744 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:175: ADC1CN = ADC1CN | 0x10; /* Initiate A/D conversion */
      000614 43 AA 10         [24] 2745 	orl	_ADC1CN,#0x10
q                                  2746 	C$lab4k_(1).c$176$1$141 ==.
                                   2747 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:176: while ((ADC1CN & 0x20) == 0x00); /* Wait for conversion to complete */
      000617                       2748 00101$:
      000617 E5 AA            [12] 2749 	mov	a,_ADC1CN
      000619 30 E5 FB         [24] 2750 	jnb	acc.5,00101$
q                                  2751 	C$lab4k_(1).c$177$1$141 ==.
                                   2752 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:177: return ADC1; /* Return digital value in ADC1 register */
      00061C 85 9C 82         [24] 2753 	mov	dpl,_ADC1
q                                  2754 	C$lab4k_(1).c$178$1$141 ==.
                           00061F  2755 	XG$read_ADC_value$0$0 ==.
      00061F 22               [24] 2756 	ret
                                   2757 ;------------------------------------------------------------
                                   2758 ;Allocation info for local variables in function 'read_battery_voltage'
                                   2759 ;------------------------------------------------------------
                                   2760 ;ADC                       Allocated to registers 
                                   2761 ;------------------------------------------------------------
                           000620  2762 	G$read_battery_voltage$0$0 ==.
q                                  2763 	C$lab4k_(1).c$180$1$141 ==.
                                   2764 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:180: unsigned int read_battery_voltage(unsigned char ADC) {
                                   2765 ;	-----------------------------------------
                                   2766 ;	 function read_battery_voltage
                                   2767 ;	-----------------------------------------
      000620                       2768 _read_battery_voltage:
q                                  2769 	C$lab4k_(1).c$181$1$143 ==.
                                   2770 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:181: voltage = ADC * 2.4 / 256 * 118 / 18 * 1000;
      000620 12r00r00         [24] 2771 	lcall	___uchar2fs
      000623 AC 82            [24] 2772 	mov	r4,dpl
      000625 AD 83            [24] 2773 	mov	r5,dph
      000627 AE F0            [24] 2774 	mov	r6,b
      000629 FF               [12] 2775 	mov	r7,a
      00062A C0 04            [24] 2776 	push	ar4
      00062C C0 05            [24] 2777 	push	ar5
      00062E C0 06            [24] 2778 	push	ar6
      000630 C0 07            [24] 2779 	push	ar7
      000632 90 99 9A         [24] 2780 	mov	dptr,#0x999a
      000635 75 F0 19         [24] 2781 	mov	b,#0x19
      000638 74 40            [12] 2782 	mov	a,#0x40
      00063A 12r00r00         [24] 2783 	lcall	___fsmul
      00063D AC 82            [24] 2784 	mov	r4,dpl
      00063F AD 83            [24] 2785 	mov	r5,dph
      000641 AE F0            [24] 2786 	mov	r6,b
      000643 FF               [12] 2787 	mov	r7,a
      000644 E5 81            [12] 2788 	mov	a,sp
      000646 24 FC            [12] 2789 	add	a,#0xfc
      000648 F5 81            [12] 2790 	mov	sp,a
      00064A E4               [12] 2791 	clr	a
      00064B C0 E0            [24] 2792 	push	acc
      00064D C0 E0            [24] 2793 	push	acc
      00064F 74 80            [12] 2794 	mov	a,#0x80
      000651 C0 E0            [24] 2795 	push	acc
      000653 74 43            [12] 2796 	mov	a,#0x43
      000655 C0 E0            [24] 2797 	push	acc
      000657 8C 82            [24] 2798 	mov	dpl,r4
      000659 8D 83            [24] 2799 	mov	dph,r5
      00065B 8E F0            [24] 2800 	mov	b,r6
      00065D EF               [12] 2801 	mov	a,r7
      00065E 12r00r00         [24] 2802 	lcall	___fsdiv
      000661 AC 82            [24] 2803 	mov	r4,dpl
      000663 AD 83            [24] 2804 	mov	r5,dph
      000665 AE F0            [24] 2805 	mov	r6,b
      000667 FF               [12] 2806 	mov	r7,a
      000668 E5 81            [12] 2807 	mov	a,sp
      00066A 24 FC            [12] 2808 	add	a,#0xfc
      00066C F5 81            [12] 2809 	mov	sp,a
      00066E C0 04            [24] 2810 	push	ar4
      000670 C0 05            [24] 2811 	push	ar5
      000672 C0 06            [24] 2812 	push	ar6
      000674 C0 07            [24] 2813 	push	ar7
      000676 90 00 00         [24] 2814 	mov	dptr,#0x0000
      000679 75 F0 EC         [24] 2815 	mov	b,#0xec
      00067C 74 42            [12] 2816 	mov	a,#0x42
      00067E 12r00r00         [24] 2817 	lcall	___fsmul
      000681 AC 82            [24] 2818 	mov	r4,dpl
      000683 AD 83            [24] 2819 	mov	r5,dph
      000685 AE F0            [24] 2820 	mov	r6,b
      000687 FF               [12] 2821 	mov	r7,a
      000688 E5 81            [12] 2822 	mov	a,sp
      00068A 24 FC            [12] 2823 	add	a,#0xfc
      00068C F5 81            [12] 2824 	mov	sp,a
      00068E E4               [12] 2825 	clr	a
      00068F C0 E0            [24] 2826 	push	acc
      000691 C0 E0            [24] 2827 	push	acc
      000693 74 90            [12] 2828 	mov	a,#0x90
      000695 C0 E0            [24] 2829 	push	acc
      000697 74 41            [12] 2830 	mov	a,#0x41
      000699 C0 E0            [24] 2831 	push	acc
      00069B 8C 82            [24] 2832 	mov	dpl,r4
      00069D 8D 83            [24] 2833 	mov	dph,r5
      00069F 8E F0            [24] 2834 	mov	b,r6
      0006A1 EF               [12] 2835 	mov	a,r7
      0006A2 12r00r00         [24] 2836 	lcall	___fsdiv
      0006A5 AC 82            [24] 2837 	mov	r4,dpl
      0006A7 AD 83            [24] 2838 	mov	r5,dph
      0006A9 AE F0            [24] 2839 	mov	r6,b
      0006AB FF               [12] 2840 	mov	r7,a
      0006AC E5 81            [12] 2841 	mov	a,sp
      0006AE 24 FC            [12] 2842 	add	a,#0xfc
      0006B0 F5 81            [12] 2843 	mov	sp,a
      0006B2 C0 04            [24] 2844 	push	ar4
      0006B4 C0 05            [24] 2845 	push	ar5
      0006B6 C0 06            [24] 2846 	push	ar6
      0006B8 C0 07            [24] 2847 	push	ar7
      0006BA 90 00 00         [24] 2848 	mov	dptr,#0x0000
      0006BD 75 F0 7A         [24] 2849 	mov	b,#0x7a
      0006C0 74 44            [12] 2850 	mov	a,#0x44
      0006C2 12r00r00         [24] 2851 	lcall	___fsmul
      0006C5 AC 82            [24] 2852 	mov	r4,dpl
      0006C7 AD 83            [24] 2853 	mov	r5,dph
      0006C9 AE F0            [24] 2854 	mov	r6,b
      0006CB FF               [12] 2855 	mov	r7,a
      0006CC E5 81            [12] 2856 	mov	a,sp
      0006CE 24 FC            [12] 2857 	add	a,#0xfc
      0006D0 F5 81            [12] 2858 	mov	sp,a
      0006D2 8C 82            [24] 2859 	mov	dpl,r4
      0006D4 8D 83            [24] 2860 	mov	dph,r5
      0006D6 8E F0            [24] 2861 	mov	b,r6
      0006D8 EF               [12] 2862 	mov	a,r7
      0006D9 12r00r00         [24] 2863 	lcall	___fs2uint
q                                  2864 	C$lab4k_(1).c$182$1$143 ==.
                                   2865 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:182: return voltage;
      0006DC 85 82*2E         [24] 2866 	mov	_voltage,dpl
      0006DF 85 83*2F         [24] 2867 	mov  (_voltage + 1),dph
q                                  2868 	C$lab4k_(1).c$183$1$143 ==.
                           0006E2  2869 	XG$read_battery_voltage$0$0 ==.
      0006E2 22               [24] 2870 	ret
                                   2871 ;------------------------------------------------------------
                                   2872 ;Allocation info for local variables in function 'PCA_ISR'
                                   2873 ;------------------------------------------------------------
                           0006E3  2874 	G$PCA_ISR$0$0 ==.
q                                  2875 	C$lab4k_(1).c$190$1$143 ==.
                                   2876 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:190: void PCA_ISR ( void ) __interrupt 9
                                   2877 ;	-----------------------------------------
                                   2878 ;	 function PCA_ISR
                                   2879 ;	-----------------------------------------
      0006E3                       2880 _PCA_ISR:
      0006E3 C0 E0            [24] 2881 	push	acc
      0006E5 C0 D0            [24] 2882 	push	psw
q                                  2883 	C$lab4k_(1).c$192$1$145 ==.
                                   2884 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:192: Counts ++;
      0006E7 05*14            [12] 2885 	inc	_Counts
      0006E9 E4               [12] 2886 	clr	a
      0006EA B5*14 02         [24] 2887 	cjne	a,_Counts,00118$
      0006ED 05*15            [12] 2888 	inc	(_Counts + 1)
      0006EF                       2889 00118$:
q                                  2890 	C$lab4k_(1).c$193$1$145 ==.
                                   2891 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:193: if(CF)
      0006EF 30 DF 24         [24] 2892 	jnb	_CF,00106$
q                                  2893 	C$lab4k_(1).c$195$2$146 ==.
                                   2894 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:195: r_Counts++;
      0006F2 05*20            [12] 2895 	inc	_r_Counts
q                                  2896 	C$lab4k_(1).c$196$2$146 ==.
                                   2897 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:196: h_Counts++;
      0006F4 05*27            [12] 2898 	inc	_h_Counts
q                                  2899 	C$lab4k_(1).c$199$2$146 ==.
                                   2900 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:199: PCA0 = 65535 - 36864;
      0006F6 75 E9 FF         [24] 2901 	mov	((_PCA0 >> 0) & 0xFF),#0xff
      0006F9 75 F9 6F         [24] 2902 	mov	((_PCA0 >> 8) & 0xFF),#0x6f
q                                  2903 	C$lab4k_(1).c$201$2$146 ==.
                                   2904 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:201: CF=0;//CF 
      0006FC C2 DF            [12] 2905 	clr	_CF
q                                  2906 	C$lab4k_(1).c$203$2$146 ==.
                                   2907 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:203: if(r_Counts>=4)//4 overflows, 80 ms
      0006FE 74 FC            [12] 2908 	mov	a,#0x100 - 0x04
      000700 25*20            [12] 2909 	add	a,_r_Counts
      000702 50 06            [24] 2910 	jnc	00102$
q                                  2911 	C$lab4k_(1).c$205$3$147 ==.
                                   2912 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:205: new_range = 1;
      000704 75*21 01         [24] 2913 	mov	_new_range,#0x01
q                                  2914 	C$lab4k_(1).c$206$3$147 ==.
                                   2915 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:206: r_Counts = 0;
      000707 75*20 00         [24] 2916 	mov	_r_Counts,#0x00
      00070A                       2917 00102$:
q                                  2918 	C$lab4k_(1).c$209$2$146 ==.
                                   2919 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:209: if(h_Counts>=2)//40ms
      00070A 74 FE            [12] 2920 	mov	a,#0x100 - 0x02
      00070C 25*27            [12] 2921 	add	a,_h_Counts
      00070E 50 06            [24] 2922 	jnc	00106$
q                                  2923 	C$lab4k_(1).c$211$3$148 ==.
                                   2924 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:211: new_heading = 1;
      000710 75*28 01         [24] 2925 	mov	_new_heading,#0x01
q                                  2926 	C$lab4k_(1).c$212$3$148 ==.
                                   2927 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:212: h_Counts = 0;
      000713 75*27 00         [24] 2928 	mov	_h_Counts,#0x00
      000716                       2929 00106$:
q                                  2930 	C$lab4k_(1).c$216$1$145 ==.
                                   2931 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:216: PCA0CN &= 0x40;	
      000716 53 D8 40         [24] 2932 	anl	_PCA0CN,#0x40
      000719 D0 D0            [24] 2933 	pop	psw
      00071B D0 E0            [24] 2934 	pop	acc
q                                  2935 	C$lab4k_(1).c$217$1$145 ==.
                           00071D  2936 	XG$PCA_ISR$0$0 ==.
      00071D 32               [24] 2937 	reti
                                   2938 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2939 ;	eliminated unneeded push/pop dpl
                                   2940 ;	eliminated unneeded push/pop dph
                                   2941 ;	eliminated unneeded push/pop b
                                   2942 ;------------------------------------------------------------
                                   2943 ;Allocation info for local variables in function 'CarControl'
                                   2944 ;------------------------------------------------------------
                           00071E  2945 	G$CarControl$0$0 ==.
q                                  2946 	C$lab4k_(1).c$219$1$145 ==.
                                   2947 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:219: void CarControl()
                                   2948 ;	-----------------------------------------
                                   2949 ;	 function CarControl
                                   2950 ;	-----------------------------------------
      00071E                       2951 _CarControl:
q                                  2952 	C$lab4k_(1).c$221$3$151 ==.
                                   2953 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:221: while(!mSS)
      00071E                       2954 00112$:
      00071E 30 B7 03         [24] 2955 	jnb	_mSS,00186$
      000721 02r08r27         [24] 2956 	ljmp	00151$
      000724                       2957 00186$:
q                                  2958 	C$lab4k_(1).c$223$2$150 ==.
                                   2959 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:223: adc_value = read_ADC_value(7);
      000724 75 82 07         [24] 2960 	mov	dpl,#0x07
      000727 12r06r0E         [24] 2961 	lcall	_read_ADC_value
q                                  2962 	C$lab4k_(1).c$224$2$150 ==.
                                   2963 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:224: voltage = read_battery_voltage(adc_value);
      00072A 85 82*2D         [24] 2964 	mov  _adc_value,dpl
      00072D 12r06r20         [24] 2965 	lcall	_read_battery_voltage
      000730 85 82*2E         [24] 2966 	mov	_voltage,dpl
      000733 85 83*2F         [24] 2967 	mov	(_voltage + 1),dph
q                                  2968 	C$lab4k_(1).c$225$2$150 ==.
                                   2969 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:225: printf("$$$$$$$$$$Battery voltage: %u $$$$$$$$$$$$$$$\r\n", voltage);
      000736 C0*2E            [24] 2970 	push	_voltage
      000738 C0*2F            [24] 2971 	push	(_voltage + 1)
      00073A 74rB5            [12] 2972 	mov	a,#___str_7
      00073C C0 E0            [24] 2973 	push	acc
      00073E 74s00            [12] 2974 	mov	a,#(___str_7 >> 8)
      000740 C0 E0            [24] 2975 	push	acc
      000742 74 80            [12] 2976 	mov	a,#0x80
      000744 C0 E0            [24] 2977 	push	acc
      000746 12r00r00         [24] 2978 	lcall	_printf
      000749 E5 81            [12] 2979 	mov	a,sp
      00074B 24 FB            [12] 2980 	add	a,#0xfb
      00074D F5 81            [12] 2981 	mov	sp,a
q                                  2982 	C$lab4k_(1).c$227$2$150 ==.
                                   2983 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:227: Set_Pulsewidth();
      00074F 12r09r3A         [24] 2984 	lcall	_Set_Pulsewidth
q                                  2985 	C$lab4k_(1).c$228$2$150 ==.
                                   2986 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:228: if(new_range)
      000752 E5*21            [12] 2987 	mov	a,_new_range
      000754 60 62            [24] 2988 	jz	00106$
q                                  2989 	C$lab4k_(1).c$230$3$151 ==.
                                   2990 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:230: dist = ReadRanger();
      000756 12r0Fr23         [24] 2991 	lcall	_ReadRanger
      000759 AE 82            [24] 2992 	mov	r6,dpl
      00075B 8E*1A            [24] 2993 	mov	_dist,r6
q                                  2994 	C$lab4k_(1).c$231$3$151 ==.
                                   2995 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:231: r_Data[0] = 0x51;//reading in cm
      00075D 75*1B 51         [24] 2996 	mov	_r_Data,#0x51
q                                  2997 	C$lab4k_(1).c$232$3$151 ==.
                                   2998 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:232: i2c_write_data(r_addr,0,r_Data,1);
      000760 75*0Br1B         [24] 2999 	mov	_i2c_write_data_PARM_3,#_r_Data
      000763 75*0C 00         [24] 3000 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000766 75*0D 40         [24] 3001 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000769 75*0A 00         [24] 3002 	mov	_i2c_write_data_PARM_2,#0x00
      00076C 75*0E 01         [24] 3003 	mov	_i2c_write_data_PARM_4,#0x01
      00076F 85*1F 82         [24] 3004 	mov	dpl,_r_addr
      000772 12r03r8C         [24] 3005 	lcall	_i2c_write_data
q                                  3006 	C$lab4k_(1).c$233$3$151 ==.
                                   3007 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:233: new_range = 0;
      000775 75*21 00         [24] 3008 	mov	_new_range,#0x00
q                                  3009 	C$lab4k_(1).c$234$3$151 ==.
                                   3010 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:234: printf("distance is %u \r\n",dist);
      000778 AE*1A            [24] 3011 	mov	r6,_dist
      00077A 7F 00            [12] 3012 	mov	r7,#0x00
      00077C C0 06            [24] 3013 	push	ar6
      00077E C0 07            [24] 3014 	push	ar7
      000780 74rE5            [12] 3015 	mov	a,#___str_8
      000782 C0 E0            [24] 3016 	push	acc
      000784 74s00            [12] 3017 	mov	a,#(___str_8 >> 8)
      000786 C0 E0            [24] 3018 	push	acc
      000788 74 80            [12] 3019 	mov	a,#0x80
      00078A C0 E0            [24] 3020 	push	acc
      00078C 12r00r00         [24] 3021 	lcall	_printf
      00078F E5 81            [12] 3022 	mov	a,sp
      000791 24 FB            [12] 3023 	add	a,#0xfb
      000793 F5 81            [12] 3024 	mov	sp,a
q                                  3025 	C$lab4k_(1).c$235$3$151 ==.
                                   3026 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:235: if(dist <= 80)
      000795 E5*1A            [12] 3027 	mov	a,_dist
      000797 24 AF            [12] 3028 	add	a,#0xff - 0x50
      000799 40 02            [24] 3029 	jc	00102$
q                                  3030 	C$lab4k_(1).c$237$4$152 ==.
                                   3031 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:237: LED = 0;
      00079B C2 94            [12] 3032 	clr	_LED
      00079D                       3033 00102$:
q                                  3034 	C$lab4k_(1).c$239$3$151 ==.
                                   3035 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:239: if(mSS)
      00079D 30 B7 18         [24] 3036 	jnb	_mSS,00106$
q                                  3037 	C$lab4k_(1).c$241$4$153 ==.
                                   3038 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:241: mPW = mPW_CENTER;
      0007A0 90r00r06         [24] 3039 	mov	dptr,#_mPW_CENTER
      0007A3 E0               [24] 3040 	movx	a,@dptr
      0007A4 F5*18            [12] 3041 	mov	_mPW,a
      0007A6 A3               [24] 3042 	inc	dptr
      0007A7 E0               [24] 3043 	movx	a,@dptr
      0007A8 F5*19            [12] 3044 	mov	(_mPW + 1),a
q                                  3045 	C$lab4k_(1).c$242$4$153 ==.
                                   3046 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:242: sPW = sPW_CENTER;
      0007AA 90r00r00         [24] 3047 	mov	dptr,#_sPW_CENTER
      0007AD E0               [24] 3048 	movx	a,@dptr
      0007AE F5*16            [12] 3049 	mov	_sPW,a
      0007B0 A3               [24] 3050 	inc	dptr
      0007B1 E0               [24] 3051 	movx	a,@dptr
      0007B2 F5*17            [12] 3052 	mov	(_sPW + 1),a
q                                  3053 	C$lab4k_(1).c$243$4$153 ==.
                                   3054 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:243: LED = 1;
      0007B4 D2 94            [12] 3055 	setb	_LED
q                                  3056 	C$lab4k_(1).c$244$4$153 ==.
                                   3057 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:244: break;
      0007B6 80 6F            [24] 3058 	sjmp	00151$
      0007B8                       3059 00106$:
q                                  3060 	C$lab4k_(1).c$248$2$150 ==.
                                   3061 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:248: if(new_heading && dist > 80) 
      0007B8 E5*28            [12] 3062 	mov	a,_new_heading
      0007BA 60 48            [24] 3063 	jz	00110$
      0007BC E5*1A            [12] 3064 	mov	a,_dist
      0007BE 24 AF            [12] 3065 	add	a,#0xff - 0x50
      0007C0 50 42            [24] 3066 	jnc	00110$
q                                  3067 	C$lab4k_(1).c$250$3$154 ==.
                                   3068 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:250: LED = 1;
      0007C2 D2 94            [12] 3069 	setb	_LED
q                                  3070 	C$lab4k_(1).c$251$3$154 ==.
                                   3071 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:251: heading = ReadCompass();
      0007C4 12r0Fr4F         [24] 3072 	lcall	_ReadCompass
      0007C7 85 82*25         [24] 3073 	mov	_heading,dpl
      0007CA 85 83*26         [24] 3074 	mov	(_heading + 1),dph
q                                  3075 	C$lab4k_(1).c$252$3$154 ==.
                                   3076 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:252: printf("heading towards %u \n",heading);
      0007CD C0*25            [24] 3077 	push	_heading
      0007CF C0*26            [24] 3078 	push	(_heading + 1)
      0007D1 74rF7            [12] 3079 	mov	a,#___str_9
      0007D3 C0 E0            [24] 3080 	push	acc
      0007D5 74s00            [12] 3081 	mov	a,#(___str_9 >> 8)
      0007D7 C0 E0            [24] 3082 	push	acc
      0007D9 74 80            [12] 3083 	mov	a,#0x80
      0007DB C0 E0            [24] 3084 	push	acc
      0007DD 12r00r00         [24] 3085 	lcall	_printf
      0007E0 E5 81            [12] 3086 	mov	a,sp
      0007E2 24 FB            [12] 3087 	add	a,#0xfb
      0007E4 F5 81            [12] 3088 	mov	sp,a
q                                  3089 	C$lab4k_(1).c$253$3$154 ==.
                                   3090 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:253: new_heading = 0;
      0007E6 75*28 00         [24] 3091 	mov	_new_heading,#0x00
q                                  3092 	C$lab4k_(1).c$254$3$154 ==.
                                   3093 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:254: if(mSS)
      0007E9 30 B7 18         [24] 3094 	jnb	_mSS,00110$
q                                  3095 	C$lab4k_(1).c$256$4$155 ==.
                                   3096 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:256: sPW = sPW_CENTER;
      0007EC 90r00r00         [24] 3097 	mov	dptr,#_sPW_CENTER
      0007EF E0               [24] 3098 	movx	a,@dptr
      0007F0 F5*16            [12] 3099 	mov	_sPW,a
      0007F2 A3               [24] 3100 	inc	dptr
      0007F3 E0               [24] 3101 	movx	a,@dptr
      0007F4 F5*17            [12] 3102 	mov	(_sPW + 1),a
q                                  3103 	C$lab4k_(1).c$257$4$155 ==.
                                   3104 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:257: mPW = mPW_CENTER;
      0007F6 90r00r06         [24] 3105 	mov	dptr,#_mPW_CENTER
      0007F9 E0               [24] 3106 	movx	a,@dptr
      0007FA F5*18            [12] 3107 	mov	_mPW,a
      0007FC A3               [24] 3108 	inc	dptr
      0007FD E0               [24] 3109 	movx	a,@dptr
      0007FE F5*19            [12] 3110 	mov	(_mPW + 1),a
q                                  3111 	C$lab4k_(1).c$258$4$155 ==.
                                   3112 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:258: LED = 1;
      000800 D2 94            [12] 3113 	setb	_LED
q                                  3114 	C$lab4k_(1).c$259$4$155 ==.
                                   3115 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:259: break;
      000802 80 23            [24] 3116 	sjmp	00151$
      000804                       3117 00110$:
q                                  3118 	C$lab4k_(1).c$263$2$150 ==.
                                   3119 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:263: lcd_clear();
      000804 12r01r00         [24] 3120 	lcall	_lcd_clear
q                                  3121 	C$lab4k_(1).c$264$2$150 ==.
                                   3122 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:264: lcd_print("\n\rHeading %u,\n\r Reading %u", heading, range);  
      000807 C0*1D            [24] 3123 	push	_range
      000809 C0*1E            [24] 3124 	push	(_range + 1)
      00080B C0*25            [24] 3125 	push	_heading
      00080D C0*26            [24] 3126 	push	(_heading + 1)
      00080F 74r0C            [12] 3127 	mov	a,#___str_10
      000811 C0 E0            [24] 3128 	push	acc
      000813 74s01            [12] 3129 	mov	a,#(___str_10 >> 8)
      000815 C0 E0            [24] 3130 	push	acc
      000817 74 80            [12] 3131 	mov	a,#0x80
      000819 C0 E0            [24] 3132 	push	acc
      00081B 12r00r7B         [24] 3133 	lcall	_lcd_print
      00081E E5 81            [12] 3134 	mov	a,sp
      000820 24 F9            [12] 3135 	add	a,#0xf9
      000822 F5 81            [12] 3136 	mov	sp,a
      000824 02r07r1E         [24] 3137 	ljmp	00112$
q                                  3138 	C$lab4k_(1).c$270$1$149 ==.
                                   3139 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:270: do
      000827                       3140 00151$:
      000827                       3141 00130$:
q                                  3142 	C$lab4k_(1).c$272$2$156 ==.
                                   3143 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:272: adc_value = read_ADC_value(7);
      000827 75 82 07         [24] 3144 	mov	dpl,#0x07
      00082A 12r06r0E         [24] 3145 	lcall	_read_ADC_value
q                                  3146 	C$lab4k_(1).c$273$2$156 ==.
                                   3147 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:273: voltage = read_battery_voltage(adc_value);
      00082D 85 82*2D         [24] 3148 	mov  _adc_value,dpl
      000830 12r06r20         [24] 3149 	lcall	_read_battery_voltage
      000833 85 82*2E         [24] 3150 	mov	_voltage,dpl
      000836 85 83*2F         [24] 3151 	mov	(_voltage + 1),dph
q                                  3152 	C$lab4k_(1).c$274$2$156 ==.
                                   3153 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:274: printf("$$$$$$$$$$Battery voltage: %u $$$$$$$$$$$$$$$\r\n", voltage);
      000839 C0*2E            [24] 3154 	push	_voltage
      00083B C0*2F            [24] 3155 	push	(_voltage + 1)
      00083D 74rB5            [12] 3156 	mov	a,#___str_7
      00083F C0 E0            [24] 3157 	push	acc
      000841 74s00            [12] 3158 	mov	a,#(___str_7 >> 8)
      000843 C0 E0            [24] 3159 	push	acc
      000845 74 80            [12] 3160 	mov	a,#0x80
      000847 C0 E0            [24] 3161 	push	acc
      000849 12r00r00         [24] 3162 	lcall	_printf
      00084C E5 81            [12] 3163 	mov	a,sp
      00084E 24 FB            [12] 3164 	add	a,#0xfb
      000850 F5 81            [12] 3165 	mov	sp,a
q                                  3166 	C$lab4k_(1).c$276$2$156 ==.
                                   3167 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:276: if(new_range && mSS)
      000852 E5*21            [12] 3168 	mov	a,_new_range
      000854 60 4F            [24] 3169 	jz	00120$
      000856 30 B7 4C         [24] 3170 	jnb	_mSS,00120$
q                                  3171 	C$lab4k_(1).c$278$3$157 ==.
                                   3172 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:278: dist = ReadRanger();
      000859 12r0Fr23         [24] 3173 	lcall	_ReadRanger
      00085C AE 82            [24] 3174 	mov	r6,dpl
      00085E 8E*1A            [24] 3175 	mov	_dist,r6
q                                  3176 	C$lab4k_(1).c$279$3$157 ==.
                                   3177 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:279: r_Data[0] = 0x51;//reading in cm
      000860 75*1B 51         [24] 3178 	mov	_r_Data,#0x51
q                                  3179 	C$lab4k_(1).c$280$3$157 ==.
                                   3180 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:280: i2c_write_data(r_addr,0,r_Data,1);
      000863 75*0Br1B         [24] 3181 	mov	_i2c_write_data_PARM_3,#_r_Data
      000866 75*0C 00         [24] 3182 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000869 75*0D 40         [24] 3183 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00086C 75*0A 00         [24] 3184 	mov	_i2c_write_data_PARM_2,#0x00
      00086F 75*0E 01         [24] 3185 	mov	_i2c_write_data_PARM_4,#0x01
      000872 85*1F 82         [24] 3186 	mov	dpl,_r_addr
      000875 12r03r8C         [24] 3187 	lcall	_i2c_write_data
q                                  3188 	C$lab4k_(1).c$281$3$157 ==.
                                   3189 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:281: new_range = 0;
      000878 75*21 00         [24] 3190 	mov	_new_range,#0x00
q                                  3191 	C$lab4k_(1).c$282$3$157 ==.
                                   3192 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:282: printf("distance is %u \r\n",dist);
      00087B AE*1A            [24] 3193 	mov	r6,_dist
      00087D 7F 00            [12] 3194 	mov	r7,#0x00
      00087F C0 06            [24] 3195 	push	ar6
      000881 C0 07            [24] 3196 	push	ar7
      000883 74rE5            [12] 3197 	mov	a,#___str_8
      000885 C0 E0            [24] 3198 	push	acc
      000887 74s00            [12] 3199 	mov	a,#(___str_8 >> 8)
      000889 C0 E0            [24] 3200 	push	acc
      00088B 74 80            [12] 3201 	mov	a,#0x80
      00088D C0 E0            [24] 3202 	push	acc
      00088F 12r00r00         [24] 3203 	lcall	_printf
      000892 E5 81            [12] 3204 	mov	a,sp
      000894 24 FB            [12] 3205 	add	a,#0xfb
      000896 F5 81            [12] 3206 	mov	sp,a
q                                  3207 	C$lab4k_(1).c$283$3$157 ==.
                                   3208 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:283: if(dist <= 80)
      000898 E5*1A            [12] 3209 	mov	a,_dist
      00089A 24 AF            [12] 3210 	add	a,#0xff - 0x50
      00089C 40 20            [24] 3211 	jc	00121$
q                                  3212 	C$lab4k_(1).c$285$4$158 ==.
                                   3213 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:285: LED = 0;
      00089E C2 94            [12] 3214 	clr	_LED
q                                  3215 	C$lab4k_(1).c$286$4$158 ==.
                                   3216 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:286: Set_Overide();//overide heading
      0008A0 12r0Ar36         [24] 3217 	lcall	_Set_Overide
      0008A3 80 19            [24] 3218 	sjmp	00121$
      0008A5                       3219 00120$:
q                                  3220 	C$lab4k_(1).c$289$2$156 ==.
                                   3221 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:289: else if(!mSS)
      0008A5 20 B7 16         [24] 3222 	jb	_mSS,00121$
q                                  3223 	C$lab4k_(1).c$291$3$159 ==.
                                   3224 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:291: sPW = sPW_CENTER;
      0008A8 90r00r00         [24] 3225 	mov	dptr,#_sPW_CENTER
      0008AB E0               [24] 3226 	movx	a,@dptr
      0008AC F5*16            [12] 3227 	mov	_sPW,a
      0008AE A3               [24] 3228 	inc	dptr
      0008AF E0               [24] 3229 	movx	a,@dptr
      0008B0 F5*17            [12] 3230 	mov	(_sPW + 1),a
q                                  3231 	C$lab4k_(1).c$292$3$159 ==.
                                   3232 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:292: mPW = mPW_CENTER;
      0008B2 90r00r06         [24] 3233 	mov	dptr,#_mPW_CENTER
      0008B5 E0               [24] 3234 	movx	a,@dptr
      0008B6 F5*18            [12] 3235 	mov	_mPW,a
      0008B8 A3               [24] 3236 	inc	dptr
      0008B9 E0               [24] 3237 	movx	a,@dptr
      0008BA F5*19            [12] 3238 	mov	(_mPW + 1),a
q                                  3239 	C$lab4k_(1).c$293$3$159 ==.
                                   3240 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:293: LED = 1;
      0008BC D2 94            [12] 3241 	setb	_LED
      0008BE                       3242 00121$:
q                                  3243 	C$lab4k_(1).c$296$2$156 ==.
                                   3244 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:296: if(dist > 80 && new_heading && mSS) 
      0008BE E5*1A            [12] 3245 	mov	a,_dist
      0008C0 24 AF            [12] 3246 	add	a,#0xff - 0x50
      0008C2 50 33            [24] 3247 	jnc	00126$
      0008C4 E5*28            [12] 3248 	mov	a,_new_heading
      0008C6 60 2F            [24] 3249 	jz	00126$
      0008C8 30 B7 2C         [24] 3250 	jnb	_mSS,00126$
q                                  3251 	C$lab4k_(1).c$298$3$160 ==.
                                   3252 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:298: LED = 1;
      0008CB D2 94            [12] 3253 	setb	_LED
q                                  3254 	C$lab4k_(1).c$299$3$160 ==.
                                   3255 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:299: heading = ReadCompass();
      0008CD 12r0Fr4F         [24] 3256 	lcall	_ReadCompass
      0008D0 85 82*25         [24] 3257 	mov	_heading,dpl
      0008D3 85 83*26         [24] 3258 	mov	(_heading + 1),dph
q                                  3259 	C$lab4k_(1).c$300$3$160 ==.
                                   3260 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:300: printf("heading towards %u \n",heading);
      0008D6 C0*25            [24] 3261 	push	_heading
      0008D8 C0*26            [24] 3262 	push	(_heading + 1)
      0008DA 74rF7            [12] 3263 	mov	a,#___str_9
      0008DC C0 E0            [24] 3264 	push	acc
      0008DE 74s00            [12] 3265 	mov	a,#(___str_9 >> 8)
      0008E0 C0 E0            [24] 3266 	push	acc
      0008E2 74 80            [12] 3267 	mov	a,#0x80
      0008E4 C0 E0            [24] 3268 	push	acc
      0008E6 12r00r00         [24] 3269 	lcall	_printf
      0008E9 E5 81            [12] 3270 	mov	a,sp
      0008EB 24 FB            [12] 3271 	add	a,#0xfb
      0008ED F5 81            [12] 3272 	mov	sp,a
q                                  3273 	C$lab4k_(1).c$301$3$160 ==.
                                   3274 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:301: new_heading = 0;
      0008EF 75*28 00         [24] 3275 	mov	_new_heading,#0x00
q                                  3276 	C$lab4k_(1).c$302$3$160 ==.
                                   3277 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:302: Set_Heading();
      0008F2 12r0Cr8D         [24] 3278 	lcall	_Set_Heading
      0008F5 80 19            [24] 3279 	sjmp	00127$
      0008F7                       3280 00126$:
q                                  3281 	C$lab4k_(1).c$304$2$156 ==.
                                   3282 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:304: else if(!mSS)
      0008F7 20 B7 16         [24] 3283 	jb	_mSS,00127$
q                                  3284 	C$lab4k_(1).c$306$3$161 ==.
                                   3285 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:306: sPW = sPW_CENTER;
      0008FA 90r00r00         [24] 3286 	mov	dptr,#_sPW_CENTER
      0008FD E0               [24] 3287 	movx	a,@dptr
      0008FE F5*16            [12] 3288 	mov	_sPW,a
      000900 A3               [24] 3289 	inc	dptr
      000901 E0               [24] 3290 	movx	a,@dptr
      000902 F5*17            [12] 3291 	mov	(_sPW + 1),a
q                                  3292 	C$lab4k_(1).c$307$3$161 ==.
                                   3293 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:307: mPW = mPW_CENTER;
      000904 90r00r06         [24] 3294 	mov	dptr,#_mPW_CENTER
      000907 E0               [24] 3295 	movx	a,@dptr
      000908 F5*18            [12] 3296 	mov	_mPW,a
      00090A A3               [24] 3297 	inc	dptr
      00090B E0               [24] 3298 	movx	a,@dptr
      00090C F5*19            [12] 3299 	mov	(_mPW + 1),a
q                                  3300 	C$lab4k_(1).c$308$3$161 ==.
                                   3301 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:308: LED = 1;
      00090E D2 94            [12] 3302 	setb	_LED
      000910                       3303 00127$:
q                                  3304 	C$lab4k_(1).c$312$2$156 ==.
                                   3305 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:312: lcd_clear();
      000910 12r01r00         [24] 3306 	lcall	_lcd_clear
q                                  3307 	C$lab4k_(1).c$313$2$156 ==.
                                   3308 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:313: lcd_print("\n\rHeading %u,\n\r Reading %u", heading, range);  
      000913 C0*1D            [24] 3309 	push	_range
      000915 C0*1E            [24] 3310 	push	(_range + 1)
      000917 C0*25            [24] 3311 	push	_heading
      000919 C0*26            [24] 3312 	push	(_heading + 1)
      00091B 74r0C            [12] 3313 	mov	a,#___str_10
      00091D C0 E0            [24] 3314 	push	acc
      00091F 74s01            [12] 3315 	mov	a,#(___str_10 >> 8)
      000921 C0 E0            [24] 3316 	push	acc
      000923 74 80            [12] 3317 	mov	a,#0x80
      000925 C0 E0            [24] 3318 	push	acc
      000927 12r00r7B         [24] 3319 	lcall	_lcd_print
      00092A E5 81            [12] 3320 	mov	a,sp
      00092C 24 F9            [12] 3321 	add	a,#0xf9
      00092E F5 81            [12] 3322 	mov	sp,a
q                                  3323 	C$lab4k_(1).c$316$2$156 ==.
                                   3324 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:316: Set_Speed();
      000930 12r0BrFD         [24] 3325 	lcall	_Set_Speed
q                                  3326 	C$lab4k_(1).c$319$1$149 ==.
                                   3327 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:319: while(mSS);
      000933 30 B7 03         [24] 3328 	jnb	_mSS,00201$
      000936 02r08r27         [24] 3329 	ljmp	00130$
      000939                       3330 00201$:
q                                  3331 	C$lab4k_(1).c$321$1$149 ==.
                           000939  3332 	XG$CarControl$0$0 ==.
      000939 22               [24] 3333 	ret
                                   3334 ;------------------------------------------------------------
                                   3335 ;Allocation info for local variables in function 'Set_Pulsewidth'
                                   3336 ;------------------------------------------------------------
                                   3337 ;input                     Allocated to registers r7 
                                   3338 ;------------------------------------------------------------
                           00093A  3339 	G$Set_Pulsewidth$0$0 ==.
q                                  3340 	C$lab4k_(1).c$323$1$149 ==.
                                   3341 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:323: void Set_Pulsewidth()
                                   3342 ;	-----------------------------------------
                                   3343 ;	 function Set_Pulsewidth
                                   3344 ;	-----------------------------------------
      00093A                       3345 _Set_Pulsewidth:
q                                  3346 	C$lab4k_(1).c$327$1$162 ==.
                                   3347 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:327: input = getchar();
      00093A 12r00r54         [24] 3348 	lcall	_getchar
      00093D AF 82            [24] 3349 	mov	r7,dpl
q                                  3350 	C$lab4k_(1).c$328$1$162 ==.
                                   3351 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:328: if(input == 'w')  // single character input to increase the pulsewidth
      00093F BF 77 28         [24] 3352 	cjne	r7,#0x77,00108$
q                                  3353 	C$lab4k_(1).c$330$2$163 ==.
                                   3354 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:330: mPW += 50;
      000942 74 32            [12] 3355 	mov	a,#0x32
      000944 25*18            [12] 3356 	add	a,_mPW
      000946 F5*18            [12] 3357 	mov	_mPW,a
      000948 E4               [12] 3358 	clr	a
      000949 35*19            [12] 3359 	addc	a,(_mPW + 1)
      00094B F5*19            [12] 3360 	mov	(_mPW + 1),a
q                                  3361 	C$lab4k_(1).c$331$2$163 ==.
                                   3362 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:331: if(mPW > mPW_MAX)  // check if greater than pulsewidth maximum
      00094D 90r00r0A         [24] 3363 	mov	dptr,#_mPW_MAX
      000950 E0               [24] 3364 	movx	a,@dptr
      000951 FD               [12] 3365 	mov	r5,a
      000952 A3               [24] 3366 	inc	dptr
      000953 E0               [24] 3367 	movx	a,@dptr
      000954 FE               [12] 3368 	mov	r6,a
      000955 C3               [12] 3369 	clr	c
      000956 ED               [12] 3370 	mov	a,r5
      000957 95*18            [12] 3371 	subb	a,_mPW
      000959 EE               [12] 3372 	mov	a,r6
      00095A 95*19            [12] 3373 	subb	a,(_mPW + 1)
      00095C 50 36            [24] 3374 	jnc	00109$
q                                  3375 	C$lab4k_(1).c$332$2$163 ==.
                                   3376 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:332: mPW = mPW_MAX;    // set PW to the maximum value
      00095E 90r00r0A         [24] 3377 	mov	dptr,#_mPW_MAX
      000961 E0               [24] 3378 	movx	a,@dptr
      000962 F5*18            [12] 3379 	mov	_mPW,a
      000964 A3               [24] 3380 	inc	dptr
      000965 E0               [24] 3381 	movx	a,@dptr
      000966 F5*19            [12] 3382 	mov	(_mPW + 1),a
      000968 80 2A            [24] 3383 	sjmp	00109$
      00096A                       3384 00108$:
q                                  3385 	C$lab4k_(1).c$334$1$162 ==.
                                   3386 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:334: else if(input == 's')  // single character input to decrease the pulsewidth
      00096A BF 73 27         [24] 3387 	cjne	r7,#0x73,00109$
q                                  3388 	C$lab4k_(1).c$336$2$164 ==.
                                   3389 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:336: mPW -= 50;
      00096D E5*18            [12] 3390 	mov	a,_mPW
      00096F 24 CE            [12] 3391 	add	a,#0xce
      000971 F5*18            [12] 3392 	mov	_mPW,a
      000973 E5*19            [12] 3393 	mov	a,(_mPW + 1)
      000975 34 FF            [12] 3394 	addc	a,#0xff
      000977 F5*19            [12] 3395 	mov	(_mPW + 1),a
q                                  3396 	C$lab4k_(1).c$337$2$164 ==.
                                   3397 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:337: if(mPW < mPW_MIN)  // check if less than pulsewidth minimum
      000979 90r00r08         [24] 3398 	mov	dptr,#_mPW_MIN
      00097C E0               [24] 3399 	movx	a,@dptr
      00097D FD               [12] 3400 	mov	r5,a
      00097E A3               [24] 3401 	inc	dptr
      00097F E0               [24] 3402 	movx	a,@dptr
      000980 FE               [12] 3403 	mov	r6,a
      000981 C3               [12] 3404 	clr	c
      000982 E5*18            [12] 3405 	mov	a,_mPW
      000984 9D               [12] 3406 	subb	a,r5
      000985 E5*19            [12] 3407 	mov	a,(_mPW + 1)
      000987 9E               [12] 3408 	subb	a,r6
      000988 50 0A            [24] 3409 	jnc	00109$
q                                  3410 	C$lab4k_(1).c$338$2$164 ==.
                                   3411 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:338: mPW = mPW_MIN;     // set PW to the minimum value
      00098A 90r00r08         [24] 3412 	mov	dptr,#_mPW_MIN
      00098D E0               [24] 3413 	movx	a,@dptr
      00098E F5*18            [12] 3414 	mov	_mPW,a
      000990 A3               [24] 3415 	inc	dptr
      000991 E0               [24] 3416 	movx	a,@dptr
      000992 F5*19            [12] 3417 	mov	(_mPW + 1),a
      000994                       3418 00109$:
q                                  3419 	C$lab4k_(1).c$340$1$162 ==.
                                   3420 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:340: if(input == 'd')
      000994 BF 64 28         [24] 3421 	cjne	r7,#0x64,00117$
q                                  3422 	C$lab4k_(1).c$342$2$165 ==.
                                   3423 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:342: sPW += 20;
      000997 74 14            [12] 3424 	mov	a,#0x14
      000999 25*16            [12] 3425 	add	a,_sPW
      00099B F5*16            [12] 3426 	mov	_sPW,a
      00099D E4               [12] 3427 	clr	a
      00099E 35*17            [12] 3428 	addc	a,(_sPW + 1)
      0009A0 F5*17            [12] 3429 	mov	(_sPW + 1),a
q                                  3430 	C$lab4k_(1).c$343$2$165 ==.
                                   3431 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:343: if(sPW > sPW_MAX)  // check if greater than pulsewidth maximum
      0009A2 90r00r04         [24] 3432 	mov	dptr,#_sPW_MAX
      0009A5 E0               [24] 3433 	movx	a,@dptr
      0009A6 FD               [12] 3434 	mov	r5,a
      0009A7 A3               [24] 3435 	inc	dptr
      0009A8 E0               [24] 3436 	movx	a,@dptr
      0009A9 FE               [12] 3437 	mov	r6,a
      0009AA C3               [12] 3438 	clr	c
      0009AB ED               [12] 3439 	mov	a,r5
      0009AC 95*16            [12] 3440 	subb	a,_sPW
      0009AE EE               [12] 3441 	mov	a,r6
      0009AF 95*17            [12] 3442 	subb	a,(_sPW + 1)
      0009B1 50 36            [24] 3443 	jnc	00118$
q                                  3444 	C$lab4k_(1).c$344$2$165 ==.
                                   3445 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:344: sPW = sPW_MAX;    // set PW to the maximum value
      0009B3 90r00r04         [24] 3446 	mov	dptr,#_sPW_MAX
      0009B6 E0               [24] 3447 	movx	a,@dptr
      0009B7 F5*16            [12] 3448 	mov	_sPW,a
      0009B9 A3               [24] 3449 	inc	dptr
      0009BA E0               [24] 3450 	movx	a,@dptr
      0009BB F5*17            [12] 3451 	mov	(_sPW + 1),a
      0009BD 80 2A            [24] 3452 	sjmp	00118$
      0009BF                       3453 00117$:
q                                  3454 	C$lab4k_(1).c$346$1$162 ==.
                                   3455 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:346: else if(input == 'a')  // single character input to decrease the pulsewidth
      0009BF BF 61 27         [24] 3456 	cjne	r7,#0x61,00118$
q                                  3457 	C$lab4k_(1).c$348$2$166 ==.
                                   3458 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:348: sPW -= 20;
      0009C2 E5*16            [12] 3459 	mov	a,_sPW
      0009C4 24 EC            [12] 3460 	add	a,#0xec
      0009C6 F5*16            [12] 3461 	mov	_sPW,a
      0009C8 E5*17            [12] 3462 	mov	a,(_sPW + 1)
      0009CA 34 FF            [12] 3463 	addc	a,#0xff
      0009CC F5*17            [12] 3464 	mov	(_sPW + 1),a
q                                  3465 	C$lab4k_(1).c$349$2$166 ==.
                                   3466 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:349: if(sPW < sPW_MIN)  // check if less than pulsewidth minimum
      0009CE 90r00r02         [24] 3467 	mov	dptr,#_sPW_MIN
      0009D1 E0               [24] 3468 	movx	a,@dptr
      0009D2 FE               [12] 3469 	mov	r6,a
      0009D3 A3               [24] 3470 	inc	dptr
      0009D4 E0               [24] 3471 	movx	a,@dptr
      0009D5 FF               [12] 3472 	mov	r7,a
      0009D6 C3               [12] 3473 	clr	c
      0009D7 E5*16            [12] 3474 	mov	a,_sPW
      0009D9 9E               [12] 3475 	subb	a,r6
      0009DA E5*17            [12] 3476 	mov	a,(_sPW + 1)
      0009DC 9F               [12] 3477 	subb	a,r7
      0009DD 50 0A            [24] 3478 	jnc	00118$
q                                  3479 	C$lab4k_(1).c$350$2$166 ==.
                                   3480 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:350: sPW = sPW_MIN;     // set PW to the minimum value
      0009DF 90r00r02         [24] 3481 	mov	dptr,#_sPW_MIN
      0009E2 E0               [24] 3482 	movx	a,@dptr
      0009E3 F5*16            [12] 3483 	mov	_sPW,a
      0009E5 A3               [24] 3484 	inc	dptr
      0009E6 E0               [24] 3485 	movx	a,@dptr
      0009E7 F5*17            [12] 3486 	mov	(_sPW + 1),a
      0009E9                       3487 00118$:
q                                  3488 	C$lab4k_(1).c$352$1$162 ==.
                                   3489 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:352: printf("motor PW: %u\n", mPW);
      0009E9 C0*18            [24] 3490 	push	_mPW
      0009EB C0*19            [24] 3491 	push	(_mPW + 1)
      0009ED 74r27            [12] 3492 	mov	a,#___str_11
      0009EF C0 E0            [24] 3493 	push	acc
      0009F1 74s01            [12] 3494 	mov	a,#(___str_11 >> 8)
      0009F3 C0 E0            [24] 3495 	push	acc
      0009F5 74 80            [12] 3496 	mov	a,#0x80
      0009F7 C0 E0            [24] 3497 	push	acc
      0009F9 12r00r00         [24] 3498 	lcall	_printf
      0009FC E5 81            [12] 3499 	mov	a,sp
      0009FE 24 FB            [12] 3500 	add	a,#0xfb
      000A00 F5 81            [12] 3501 	mov	sp,a
q                                  3502 	C$lab4k_(1).c$353$1$162 ==.
                                   3503 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:353: PCA0CP2 = 0xFFFF - mPW;
      000A02 74 FF            [12] 3504 	mov	a,#0xff
      000A04 C3               [12] 3505 	clr	c
      000A05 95*18            [12] 3506 	subb	a,_mPW
      000A07 F5 EC            [12] 3507 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      000A09 74 FF            [12] 3508 	mov	a,#0xff
      000A0B 95*19            [12] 3509 	subb	a,(_mPW + 1)
      000A0D F5 FC            [12] 3510 	mov	((_PCA0CP2 >> 8) & 0xFF),a
q                                  3511 	C$lab4k_(1).c$354$1$162 ==.
                                   3512 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:354: printf("stering PW: %u\n", sPW);
      000A0F C0*16            [24] 3513 	push	_sPW
      000A11 C0*17            [24] 3514 	push	(_sPW + 1)
      000A13 74r35            [12] 3515 	mov	a,#___str_12
      000A15 C0 E0            [24] 3516 	push	acc
      000A17 74s01            [12] 3517 	mov	a,#(___str_12 >> 8)
      000A19 C0 E0            [24] 3518 	push	acc
      000A1B 74 80            [12] 3519 	mov	a,#0x80
      000A1D C0 E0            [24] 3520 	push	acc
      000A1F 12r00r00         [24] 3521 	lcall	_printf
      000A22 E5 81            [12] 3522 	mov	a,sp
      000A24 24 FB            [12] 3523 	add	a,#0xfb
      000A26 F5 81            [12] 3524 	mov	sp,a
q                                  3525 	C$lab4k_(1).c$355$1$162 ==.
                                   3526 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:355: PCA0CP0 = 0xFFFF - sPW;
      000A28 74 FF            [12] 3527 	mov	a,#0xff
      000A2A C3               [12] 3528 	clr	c
      000A2B 95*16            [12] 3529 	subb	a,_sPW
      000A2D F5 EA            [12] 3530 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000A2F 74 FF            [12] 3531 	mov	a,#0xff
      000A31 95*17            [12] 3532 	subb	a,(_sPW + 1)
      000A33 F5 FA            [12] 3533 	mov	((_PCA0CP0 >> 8) & 0xFF),a
q                                  3534 	C$lab4k_(1).c$357$1$162 ==.
                           000A35  3535 	XG$Set_Pulsewidth$0$0 ==.
      000A35 22               [24] 3536 	ret
                                   3537 ;------------------------------------------------------------
                                   3538 ;Allocation info for local variables in function 'Set_Overide'
                                   3539 ;------------------------------------------------------------
                           000A36  3540 	G$Set_Overide$0$0 ==.
q                                  3541 	C$lab4k_(1).c$359$1$162 ==.
                                   3542 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:359: void Set_Overide()
                                   3543 ;	-----------------------------------------
                                   3544 ;	 function Set_Overide
                                   3545 ;	-----------------------------------------
      000A36                       3546 _Set_Overide:
q                                  3547 	C$lab4k_(1).c$361$1$167 ==.
                                   3548 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:361: if(dist < 10)
      000A36 74 F6            [12] 3549 	mov	a,#0x100 - 0x0a
      000A38 25*1A            [12] 3550 	add	a,_dist
      000A3A 40 0D            [24] 3551 	jc	00116$
q                                  3552 	C$lab4k_(1).c$362$1$167 ==.
                                   3553 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:362: sPW = sPW_MIN;
      000A3C 90r00r02         [24] 3554 	mov	dptr,#_sPW_MIN
      000A3F E0               [24] 3555 	movx	a,@dptr
      000A40 F5*16            [12] 3556 	mov	_sPW,a
      000A42 A3               [24] 3557 	inc	dptr
      000A43 E0               [24] 3558 	movx	a,@dptr
      000A44 F5*17            [12] 3559 	mov	(_sPW + 1),a
      000A46 02r0BrC5         [24] 3560 	ljmp	00117$
      000A49                       3561 00116$:
q                                  3562 	C$lab4k_(1).c$363$1$167 ==.
                                   3563 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:363: else if(dist > 80)
      000A49 E5*1A            [12] 3564 	mov	a,_dist
      000A4B 24 AF            [12] 3565 	add	a,#0xff - 0x50
      000A4D 50 0D            [24] 3566 	jnc	00113$
q                                  3567 	C$lab4k_(1).c$364$1$167 ==.
                                   3568 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:364: sPW = sPW_MAX;
      000A4F 90r00r04         [24] 3569 	mov	dptr,#_sPW_MAX
      000A52 E0               [24] 3570 	movx	a,@dptr
      000A53 F5*16            [12] 3571 	mov	_sPW,a
      000A55 A3               [24] 3572 	inc	dptr
      000A56 E0               [24] 3573 	movx	a,@dptr
      000A57 F5*17            [12] 3574 	mov	(_sPW + 1),a
      000A59 02r0BrC5         [24] 3575 	ljmp	00117$
      000A5C                       3576 00113$:
q                                  3577 	C$lab4k_(1).c$367$2$168 ==.
                                   3578 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:367: if(dist < 45)
      000A5C 74 D3            [12] 3579 	mov	a,#0x100 - 0x2d
      000A5E 25*1A            [12] 3580 	add	a,_dist
      000A60 50 03            [24] 3581 	jnc	00140$
      000A62 02r0ArF5         [24] 3582 	ljmp	00110$
      000A65                       3583 00140$:
q                                  3584 	C$lab4k_(1).c$368$2$168 ==.
                                   3585 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:368: sPW = sPW_CENTER - 18.57*(45 - dist);
      000A65 AE*1A            [24] 3586 	mov	r6,_dist
      000A67 7F 00            [12] 3587 	mov	r7,#0x00
      000A69 74 2D            [12] 3588 	mov	a,#0x2d
      000A6B C3               [12] 3589 	clr	c
      000A6C 9E               [12] 3590 	subb	a,r6
      000A6D F5 82            [12] 3591 	mov	dpl,a
      000A6F E4               [12] 3592 	clr	a
      000A70 9F               [12] 3593 	subb	a,r7
      000A71 F5 83            [12] 3594 	mov	dph,a
      000A73 12r00r00         [24] 3595 	lcall	___sint2fs
      000A76 AC 82            [24] 3596 	mov	r4,dpl
      000A78 AD 83            [24] 3597 	mov	r5,dph
      000A7A AE F0            [24] 3598 	mov	r6,b
      000A7C FF               [12] 3599 	mov	r7,a
      000A7D C0 04            [24] 3600 	push	ar4
      000A7F C0 05            [24] 3601 	push	ar5
      000A81 C0 06            [24] 3602 	push	ar6
      000A83 C0 07            [24] 3603 	push	ar7
      000A85 90 8F 5C         [24] 3604 	mov	dptr,#0x8f5c
      000A88 75 F0 94         [24] 3605 	mov	b,#0x94
      000A8B 74 41            [12] 3606 	mov	a,#0x41
      000A8D 12r00r00         [24] 3607 	lcall	___fsmul
      000A90 AC 82            [24] 3608 	mov	r4,dpl
      000A92 AD 83            [24] 3609 	mov	r5,dph
      000A94 AE F0            [24] 3610 	mov	r6,b
      000A96 FF               [12] 3611 	mov	r7,a
      000A97 E5 81            [12] 3612 	mov	a,sp
      000A99 24 FC            [12] 3613 	add	a,#0xfc
      000A9B F5 81            [12] 3614 	mov	sp,a
      000A9D 90r00r00         [24] 3615 	mov	dptr,#_sPW_CENTER
      000AA0 E0               [24] 3616 	movx	a,@dptr
      000AA1 FA               [12] 3617 	mov	r2,a
      000AA2 A3               [24] 3618 	inc	dptr
      000AA3 E0               [24] 3619 	movx	a,@dptr
      000AA4 FB               [12] 3620 	mov	r3,a
      000AA5 8A 82            [24] 3621 	mov	dpl,r2
      000AA7 8B 83            [24] 3622 	mov	dph,r3
      000AA9 C0 07            [24] 3623 	push	ar7
      000AAB C0 06            [24] 3624 	push	ar6
      000AAD C0 05            [24] 3625 	push	ar5
      000AAF C0 04            [24] 3626 	push	ar4
      000AB1 12r00r00         [24] 3627 	lcall	___uint2fs
      000AB4 A8 82            [24] 3628 	mov	r0,dpl
      000AB6 A9 83            [24] 3629 	mov	r1,dph
      000AB8 AA F0            [24] 3630 	mov	r2,b
      000ABA FB               [12] 3631 	mov	r3,a
      000ABB D0 04            [24] 3632 	pop	ar4
      000ABD D0 05            [24] 3633 	pop	ar5
      000ABF D0 06            [24] 3634 	pop	ar6
      000AC1 D0 07            [24] 3635 	pop	ar7
      000AC3 C0 04            [24] 3636 	push	ar4
      000AC5 C0 05            [24] 3637 	push	ar5
      000AC7 C0 06            [24] 3638 	push	ar6
      000AC9 C0 07            [24] 3639 	push	ar7
      000ACB 88 82            [24] 3640 	mov	dpl,r0
      000ACD 89 83            [24] 3641 	mov	dph,r1
      000ACF 8A F0            [24] 3642 	mov	b,r2
      000AD1 EB               [12] 3643 	mov	a,r3
      000AD2 12r00r00         [24] 3644 	lcall	___fssub
      000AD5 AC 82            [24] 3645 	mov	r4,dpl
      000AD7 AD 83            [24] 3646 	mov	r5,dph
      000AD9 AE F0            [24] 3647 	mov	r6,b
      000ADB FF               [12] 3648 	mov	r7,a
      000ADC E5 81            [12] 3649 	mov	a,sp
      000ADE 24 FC            [12] 3650 	add	a,#0xfc
      000AE0 F5 81            [12] 3651 	mov	sp,a
      000AE2 8C 82            [24] 3652 	mov	dpl,r4
      000AE4 8D 83            [24] 3653 	mov	dph,r5
      000AE6 8E F0            [24] 3654 	mov	b,r6
      000AE8 EF               [12] 3655 	mov	a,r7
      000AE9 12r00r00         [24] 3656 	lcall	___fs2uint
      000AEC 85 82*16         [24] 3657 	mov	_sPW,dpl
      000AEF 85 83*17         [24] 3658 	mov	(_sPW + 1),dph
      000AF2 02r0BrC5         [24] 3659 	ljmp	00117$
      000AF5                       3660 00110$:
q                                  3661 	C$lab4k_(1).c$369$2$168 ==.
                                   3662 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:369: else if(dist > 45)
      000AF5 E5*1A            [12] 3663 	mov	a,_dist
      000AF7 24 D2            [12] 3664 	add	a,#0xff - 0x2d
      000AF9 40 03            [24] 3665 	jc	00141$
      000AFB 02r0Br8D         [24] 3666 	ljmp	00107$
      000AFE                       3667 00141$:
q                                  3668 	C$lab4k_(1).c$370$2$168 ==.
                                   3669 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:370: sPW = 18.57*(dist - 45) + sPW_CENTER;
      000AFE AE*1A            [24] 3670 	mov	r6,_dist
      000B00 7F 00            [12] 3671 	mov	r7,#0x00
      000B02 EE               [12] 3672 	mov	a,r6
      000B03 24 D3            [12] 3673 	add	a,#0xd3
      000B05 F5 82            [12] 3674 	mov	dpl,a
      000B07 EF               [12] 3675 	mov	a,r7
      000B08 34 FF            [12] 3676 	addc	a,#0xff
      000B0A F5 83            [12] 3677 	mov	dph,a
      000B0C 12r00r00         [24] 3678 	lcall	___sint2fs
      000B0F AC 82            [24] 3679 	mov	r4,dpl
      000B11 AD 83            [24] 3680 	mov	r5,dph
      000B13 AE F0            [24] 3681 	mov	r6,b
      000B15 FF               [12] 3682 	mov	r7,a
      000B16 C0 04            [24] 3683 	push	ar4
      000B18 C0 05            [24] 3684 	push	ar5
      000B1A C0 06            [24] 3685 	push	ar6
      000B1C C0 07            [24] 3686 	push	ar7
      000B1E 90 8F 5C         [24] 3687 	mov	dptr,#0x8f5c
      000B21 75 F0 94         [24] 3688 	mov	b,#0x94
      000B24 74 41            [12] 3689 	mov	a,#0x41
      000B26 12r00r00         [24] 3690 	lcall	___fsmul
      000B29 AC 82            [24] 3691 	mov	r4,dpl
      000B2B AD 83            [24] 3692 	mov	r5,dph
      000B2D AE F0            [24] 3693 	mov	r6,b
      000B2F FF               [12] 3694 	mov	r7,a
      000B30 E5 81            [12] 3695 	mov	a,sp
      000B32 24 FC            [12] 3696 	add	a,#0xfc
      000B34 F5 81            [12] 3697 	mov	sp,a
      000B36 90r00r00         [24] 3698 	mov	dptr,#_sPW_CENTER
      000B39 E0               [24] 3699 	movx	a,@dptr
      000B3A FA               [12] 3700 	mov	r2,a
      000B3B A3               [24] 3701 	inc	dptr
      000B3C E0               [24] 3702 	movx	a,@dptr
      000B3D FB               [12] 3703 	mov	r3,a
      000B3E 8A 82            [24] 3704 	mov	dpl,r2
      000B40 8B 83            [24] 3705 	mov	dph,r3
      000B42 C0 07            [24] 3706 	push	ar7
      000B44 C0 06            [24] 3707 	push	ar6
      000B46 C0 05            [24] 3708 	push	ar5
      000B48 C0 04            [24] 3709 	push	ar4
      000B4A 12r00r00         [24] 3710 	lcall	___uint2fs
      000B4D A8 82            [24] 3711 	mov	r0,dpl
      000B4F A9 83            [24] 3712 	mov	r1,dph
      000B51 AA F0            [24] 3713 	mov	r2,b
      000B53 FB               [12] 3714 	mov	r3,a
      000B54 D0 04            [24] 3715 	pop	ar4
      000B56 D0 05            [24] 3716 	pop	ar5
      000B58 D0 06            [24] 3717 	pop	ar6
      000B5A D0 07            [24] 3718 	pop	ar7
      000B5C C0 00            [24] 3719 	push	ar0
      000B5E C0 01            [24] 3720 	push	ar1
      000B60 C0 02            [24] 3721 	push	ar2
      000B62 C0 03            [24] 3722 	push	ar3
      000B64 8C 82            [24] 3723 	mov	dpl,r4
      000B66 8D 83            [24] 3724 	mov	dph,r5
      000B68 8E F0            [24] 3725 	mov	b,r6
      000B6A EF               [12] 3726 	mov	a,r7
      000B6B 12r00r00         [24] 3727 	lcall	___fsadd
      000B6E AC 82            [24] 3728 	mov	r4,dpl
      000B70 AD 83            [24] 3729 	mov	r5,dph
      000B72 AE F0            [24] 3730 	mov	r6,b
      000B74 FF               [12] 3731 	mov	r7,a
      000B75 E5 81            [12] 3732 	mov	a,sp
      000B77 24 FC            [12] 3733 	add	a,#0xfc
      000B79 F5 81            [12] 3734 	mov	sp,a
      000B7B 8C 82            [24] 3735 	mov	dpl,r4
      000B7D 8D 83            [24] 3736 	mov	dph,r5
      000B7F 8E F0            [24] 3737 	mov	b,r6
      000B81 EF               [12] 3738 	mov	a,r7
      000B82 12r00r00         [24] 3739 	lcall	___fs2uint
      000B85 85 82*16         [24] 3740 	mov	_sPW,dpl
      000B88 85 83*17         [24] 3741 	mov	(_sPW + 1),dph
      000B8B 80 38            [24] 3742 	sjmp	00117$
      000B8D                       3743 00107$:
q                                  3744 	C$lab4k_(1).c$372$2$168 ==.
                                   3745 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:372: if(sPW > sPW_MAX)
      000B8D 90r00r04         [24] 3746 	mov	dptr,#_sPW_MAX
      000B90 E0               [24] 3747 	movx	a,@dptr
      000B91 FE               [12] 3748 	mov	r6,a
      000B92 A3               [24] 3749 	inc	dptr
      000B93 E0               [24] 3750 	movx	a,@dptr
      000B94 FF               [12] 3751 	mov	r7,a
      000B95 C3               [12] 3752 	clr	c
      000B96 EE               [12] 3753 	mov	a,r6
      000B97 95*16            [12] 3754 	subb	a,_sPW
      000B99 EF               [12] 3755 	mov	a,r7
      000B9A 95*17            [12] 3756 	subb	a,(_sPW + 1)
      000B9C 50 0C            [24] 3757 	jnc	00104$
q                                  3758 	C$lab4k_(1).c$373$2$168 ==.
                                   3759 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:373: sPW = sPW_MAX;
      000B9E 90r00r04         [24] 3760 	mov	dptr,#_sPW_MAX
      000BA1 E0               [24] 3761 	movx	a,@dptr
      000BA2 F5*16            [12] 3762 	mov	_sPW,a
      000BA4 A3               [24] 3763 	inc	dptr
      000BA5 E0               [24] 3764 	movx	a,@dptr
      000BA6 F5*17            [12] 3765 	mov	(_sPW + 1),a
      000BA8 80 1B            [24] 3766 	sjmp	00117$
      000BAA                       3767 00104$:
q                                  3768 	C$lab4k_(1).c$374$2$168 ==.
                                   3769 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:374: else if(sPW < sPW_MIN)
      000BAA 90r00r02         [24] 3770 	mov	dptr,#_sPW_MIN
      000BAD E0               [24] 3771 	movx	a,@dptr
      000BAE FE               [12] 3772 	mov	r6,a
      000BAF A3               [24] 3773 	inc	dptr
      000BB0 E0               [24] 3774 	movx	a,@dptr
      000BB1 FF               [12] 3775 	mov	r7,a
      000BB2 C3               [12] 3776 	clr	c
      000BB3 E5*16            [12] 3777 	mov	a,_sPW
      000BB5 9E               [12] 3778 	subb	a,r6
      000BB6 E5*17            [12] 3779 	mov	a,(_sPW + 1)
      000BB8 9F               [12] 3780 	subb	a,r7
      000BB9 50 0A            [24] 3781 	jnc	00117$
q                                  3782 	C$lab4k_(1).c$375$2$168 ==.
                                   3783 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:375: sPW = sPW_MIN;
      000BBB 90r00r02         [24] 3784 	mov	dptr,#_sPW_MIN
      000BBE E0               [24] 3785 	movx	a,@dptr
      000BBF F5*16            [12] 3786 	mov	_sPW,a
      000BC1 A3               [24] 3787 	inc	dptr
      000BC2 E0               [24] 3788 	movx	a,@dptr
      000BC3 F5*17            [12] 3789 	mov	(_sPW + 1),a
      000BC5                       3790 00117$:
q                                  3791 	C$lab4k_(1).c$377$1$167 ==.
                                   3792 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:377: printf("Overide is setted to %d \n", sPW - sPW_CENTER);
      000BC5 90r00r00         [24] 3793 	mov	dptr,#_sPW_CENTER
      000BC8 E0               [24] 3794 	movx	a,@dptr
      000BC9 FE               [12] 3795 	mov	r6,a
      000BCA A3               [24] 3796 	inc	dptr
      000BCB E0               [24] 3797 	movx	a,@dptr
      000BCC FF               [12] 3798 	mov	r7,a
      000BCD E5*16            [12] 3799 	mov	a,_sPW
      000BCF C3               [12] 3800 	clr	c
      000BD0 9E               [12] 3801 	subb	a,r6
      000BD1 FE               [12] 3802 	mov	r6,a
      000BD2 E5*17            [12] 3803 	mov	a,(_sPW + 1)
      000BD4 9F               [12] 3804 	subb	a,r7
      000BD5 FF               [12] 3805 	mov	r7,a
      000BD6 C0 06            [24] 3806 	push	ar6
      000BD8 C0 07            [24] 3807 	push	ar7
      000BDA 74r45            [12] 3808 	mov	a,#___str_13
      000BDC C0 E0            [24] 3809 	push	acc
      000BDE 74s01            [12] 3810 	mov	a,#(___str_13 >> 8)
      000BE0 C0 E0            [24] 3811 	push	acc
      000BE2 74 80            [12] 3812 	mov	a,#0x80
      000BE4 C0 E0            [24] 3813 	push	acc
      000BE6 12r00r00         [24] 3814 	lcall	_printf
      000BE9 E5 81            [12] 3815 	mov	a,sp
      000BEB 24 FB            [12] 3816 	add	a,#0xfb
      000BED F5 81            [12] 3817 	mov	sp,a
q                                  3818 	C$lab4k_(1).c$378$1$167 ==.
                                   3819 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:378: PCA0CP0 = 0xFFFF - sPW;
      000BEF 74 FF            [12] 3820 	mov	a,#0xff
      000BF1 C3               [12] 3821 	clr	c
      000BF2 95*16            [12] 3822 	subb	a,_sPW
      000BF4 F5 EA            [12] 3823 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000BF6 74 FF            [12] 3824 	mov	a,#0xff
      000BF8 95*17            [12] 3825 	subb	a,(_sPW + 1)
      000BFA F5 FA            [12] 3826 	mov	((_PCA0CP0 >> 8) & 0xFF),a
q                                  3827 	C$lab4k_(1).c$379$1$167 ==.
                           000BFC  3828 	XG$Set_Overide$0$0 ==.
      000BFC 22               [24] 3829 	ret
                                   3830 ;------------------------------------------------------------
                                   3831 ;Allocation info for local variables in function 'Set_Speed'
                                   3832 ;------------------------------------------------------------
                                   3833 ;input                     Allocated to registers r7 
                                   3834 ;------------------------------------------------------------
                           000BFD  3835 	G$Set_Speed$0$0 ==.
q                                  3836 	C$lab4k_(1).c$380$1$167 ==.
                                   3837 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:380: void Set_Speed()
                                   3838 ;	-----------------------------------------
                                   3839 ;	 function Set_Speed
                                   3840 ;	-----------------------------------------
      000BFD                       3841 _Set_Speed:
q                                  3842 	C$lab4k_(1).c$384$1$169 ==.
                                   3843 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:384: input = getchar_nw();
      000BFD 12r00r67         [24] 3844 	lcall	_getchar_nw
      000C00 AF 82            [24] 3845 	mov	r7,dpl
q                                  3846 	C$lab4k_(1).c$385$1$169 ==.
                                   3847 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:385: if(input == '+')  // single character input to increase the pulsewidth
      000C02 BF 2B 28         [24] 3848 	cjne	r7,#0x2b,00111$
q                                  3849 	C$lab4k_(1).c$387$2$170 ==.
                                   3850 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:387: mPW += 25;
      000C05 74 19            [12] 3851 	mov	a,#0x19
      000C07 25*18            [12] 3852 	add	a,_mPW
      000C09 F5*18            [12] 3853 	mov	_mPW,a
      000C0B E4               [12] 3854 	clr	a
      000C0C 35*19            [12] 3855 	addc	a,(_mPW + 1)
      000C0E F5*19            [12] 3856 	mov	(_mPW + 1),a
q                                  3857 	C$lab4k_(1).c$388$2$170 ==.
                                   3858 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:388: if(mPW > mPW_MAX)  // check if greater than pulsewidth maximum
      000C10 90r00r0A         [24] 3859 	mov	dptr,#_mPW_MAX
      000C13 E0               [24] 3860 	movx	a,@dptr
      000C14 FD               [12] 3861 	mov	r5,a
      000C15 A3               [24] 3862 	inc	dptr
      000C16 E0               [24] 3863 	movx	a,@dptr
      000C17 FE               [12] 3864 	mov	r6,a
      000C18 C3               [12] 3865 	clr	c
      000C19 ED               [12] 3866 	mov	a,r5
      000C1A 95*18            [12] 3867 	subb	a,_mPW
      000C1C EE               [12] 3868 	mov	a,r6
      000C1D 95*19            [12] 3869 	subb	a,(_mPW + 1)
      000C1F 50 45            [24] 3870 	jnc	00112$
q                                  3871 	C$lab4k_(1).c$389$2$170 ==.
                                   3872 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:389: mPW = mPW_MAX;    // set PW to the maximum value
      000C21 90r00r0A         [24] 3873 	mov	dptr,#_mPW_MAX
      000C24 E0               [24] 3874 	movx	a,@dptr
      000C25 F5*18            [12] 3875 	mov	_mPW,a
      000C27 A3               [24] 3876 	inc	dptr
      000C28 E0               [24] 3877 	movx	a,@dptr
      000C29 F5*19            [12] 3878 	mov	(_mPW + 1),a
      000C2B 80 39            [24] 3879 	sjmp	00112$
      000C2D                       3880 00111$:
q                                  3881 	C$lab4k_(1).c$391$1$169 ==.
                                   3882 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:391: else if(input == '-')  // single character input to decrease the pulsewidth
      000C2D BF 2D 29         [24] 3883 	cjne	r7,#0x2d,00108$
q                                  3884 	C$lab4k_(1).c$393$2$171 ==.
                                   3885 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:393: mPW -= 25;
      000C30 E5*18            [12] 3886 	mov	a,_mPW
      000C32 24 E7            [12] 3887 	add	a,#0xe7
      000C34 F5*18            [12] 3888 	mov	_mPW,a
      000C36 E5*19            [12] 3889 	mov	a,(_mPW + 1)
      000C38 34 FF            [12] 3890 	addc	a,#0xff
      000C3A F5*19            [12] 3891 	mov	(_mPW + 1),a
q                                  3892 	C$lab4k_(1).c$394$2$171 ==.
                                   3893 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:394: if(mPW < mPW_MIN)  // check if less than pulsewidth minimum
      000C3C 90r00r08         [24] 3894 	mov	dptr,#_mPW_MIN
      000C3F E0               [24] 3895 	movx	a,@dptr
      000C40 FD               [12] 3896 	mov	r5,a
      000C41 A3               [24] 3897 	inc	dptr
      000C42 E0               [24] 3898 	movx	a,@dptr
      000C43 FE               [12] 3899 	mov	r6,a
      000C44 C3               [12] 3900 	clr	c
      000C45 E5*18            [12] 3901 	mov	a,_mPW
      000C47 9D               [12] 3902 	subb	a,r5
      000C48 E5*19            [12] 3903 	mov	a,(_mPW + 1)
      000C4A 9E               [12] 3904 	subb	a,r6
      000C4B 50 19            [24] 3905 	jnc	00112$
q                                  3906 	C$lab4k_(1).c$395$2$171 ==.
                                   3907 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:395: mPW = mPW_MIN;     // set PW to the minimum value
      000C4D 90r00r08         [24] 3908 	mov	dptr,#_mPW_MIN
      000C50 E0               [24] 3909 	movx	a,@dptr
      000C51 F5*18            [12] 3910 	mov	_mPW,a
      000C53 A3               [24] 3911 	inc	dptr
      000C54 E0               [24] 3912 	movx	a,@dptr
      000C55 F5*19            [12] 3913 	mov	(_mPW + 1),a
      000C57 80 0D            [24] 3914 	sjmp	00112$
      000C59                       3915 00108$:
q                                  3916 	C$lab4k_(1).c$397$1$169 ==.
                                   3917 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:397: else if(input == 'n')
      000C59 BF 6E 0A         [24] 3918 	cjne	r7,#0x6e,00112$
q                                  3919 	C$lab4k_(1).c$399$2$172 ==.
                                   3920 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:399: mPW = mPW_CENTER;
      000C5C 90r00r06         [24] 3921 	mov	dptr,#_mPW_CENTER
      000C5F E0               [24] 3922 	movx	a,@dptr
      000C60 F5*18            [12] 3923 	mov	_mPW,a
      000C62 A3               [24] 3924 	inc	dptr
      000C63 E0               [24] 3925 	movx	a,@dptr
      000C64 F5*19            [12] 3926 	mov	(_mPW + 1),a
      000C66                       3927 00112$:
q                                  3928 	C$lab4k_(1).c$401$1$169 ==.
                                   3929 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:401: printf("motor PW: %u\n", mPW);
      000C66 C0*18            [24] 3930 	push	_mPW
      000C68 C0*19            [24] 3931 	push	(_mPW + 1)
      000C6A 74r27            [12] 3932 	mov	a,#___str_11
      000C6C C0 E0            [24] 3933 	push	acc
      000C6E 74s01            [12] 3934 	mov	a,#(___str_11 >> 8)
      000C70 C0 E0            [24] 3935 	push	acc
      000C72 74 80            [12] 3936 	mov	a,#0x80
      000C74 C0 E0            [24] 3937 	push	acc
      000C76 12r00r00         [24] 3938 	lcall	_printf
      000C79 E5 81            [12] 3939 	mov	a,sp
      000C7B 24 FB            [12] 3940 	add	a,#0xfb
      000C7D F5 81            [12] 3941 	mov	sp,a
q                                  3942 	C$lab4k_(1).c$402$1$169 ==.
                                   3943 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:402: PCA0CP2 = 0xFFFF - mPW;
      000C7F 74 FF            [12] 3944 	mov	a,#0xff
      000C81 C3               [12] 3945 	clr	c
      000C82 95*18            [12] 3946 	subb	a,_mPW
      000C84 F5 EC            [12] 3947 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      000C86 74 FF            [12] 3948 	mov	a,#0xff
      000C88 95*19            [12] 3949 	subb	a,(_mPW + 1)
      000C8A F5 FC            [12] 3950 	mov	((_PCA0CP2 >> 8) & 0xFF),a
q                                  3951 	C$lab4k_(1).c$403$1$169 ==.
                           000C8C  3952 	XG$Set_Speed$0$0 ==.
      000C8C 22               [24] 3953 	ret
                                   3954 ;------------------------------------------------------------
                                   3955 ;Allocation info for local variables in function 'Set_Heading'
                                   3956 ;------------------------------------------------------------
                           000C8D  3957 	G$Set_Heading$0$0 ==.
q                                  3958 	C$lab4k_(1).c$405$1$169 ==.
                                   3959 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:405: void Set_Heading()
                                   3960 ;	-----------------------------------------
                                   3961 ;	 function Set_Heading
                                   3962 ;	-----------------------------------------
      000C8D                       3963 _Set_Heading:
q                                  3964 	C$lab4k_(1).c$407$1$173 ==.
                                   3965 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:407: error = desired_heading - heading;
      000C8D E5*29            [12] 3966 	mov	a,_desired_heading
      000C8F C3               [12] 3967 	clr	c
      000C90 95*25            [12] 3968 	subb	a,_heading
      000C92 F5*2B            [12] 3969 	mov	_error,a
      000C94 E5*2A            [12] 3970 	mov	a,(_desired_heading + 1)
      000C96 95*26            [12] 3971 	subb	a,(_heading + 1)
      000C98 F5*2C            [12] 3972 	mov	(_error + 1),a
q                                  3973 	C$lab4k_(1).c$408$1$173 ==.
                                   3974 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:408: if(error >= 1800)
      000C9A C3               [12] 3975 	clr	c
      000C9B E5*2B            [12] 3976 	mov	a,_error
      000C9D 94 08            [12] 3977 	subb	a,#0x08
      000C9F E5*2C            [12] 3978 	mov	a,(_error + 1)
      000CA1 64 80            [12] 3979 	xrl	a,#0x80
      000CA3 94 87            [12] 3980 	subb	a,#0x87
      000CA5 40 0F            [24] 3981 	jc	00112$
q                                  3982 	C$lab4k_(1).c$409$1$173 ==.
                                   3983 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:409: error -= 3600;
      000CA7 E5*2B            [12] 3984 	mov	a,_error
      000CA9 24 F0            [12] 3985 	add	a,#0xf0
      000CAB F5*2B            [12] 3986 	mov	_error,a
      000CAD E5*2C            [12] 3987 	mov	a,(_error + 1)
      000CAF 34 F1            [12] 3988 	addc	a,#0xf1
      000CB1 F5*2C            [12] 3989 	mov	(_error + 1),a
      000CB3 02r0Dr3B         [24] 3990 	ljmp	00113$
      000CB6                       3991 00112$:
q                                  3992 	C$lab4k_(1).c$410$1$173 ==.
                                   3993 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:410: else if(error <= -1800)
      000CB6 C3               [12] 3994 	clr	c
      000CB7 74 F8            [12] 3995 	mov	a,#0xf8
      000CB9 95*2B            [12] 3996 	subb	a,_error
      000CBB 74 78            [12] 3997 	mov	a,#(0xf8 ^ 0x80)
      000CBD 85*2C F0         [24] 3998 	mov	b,(_error + 1)
      000CC0 63 F0 80         [24] 3999 	xrl	b,#0x80
      000CC3 95 F0            [12] 4000 	subb	a,b
      000CC5 40 0E            [24] 4001 	jc	00109$
q                                  4002 	C$lab4k_(1).c$411$1$173 ==.
                                   4003 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:411: error += 3600;
      000CC7 74 10            [12] 4004 	mov	a,#0x10
      000CC9 25*2B            [12] 4005 	add	a,_error
      000CCB F5*2B            [12] 4006 	mov	_error,a
      000CCD 74 0E            [12] 4007 	mov	a,#0x0e
      000CCF 35*2C            [12] 4008 	addc	a,(_error + 1)
      000CD1 F5*2C            [12] 4009 	mov	(_error + 1),a
      000CD3 80 66            [24] 4010 	sjmp	00113$
      000CD5                       4011 00109$:
q                                  4012 	C$lab4k_(1).c$412$1$173 ==.
                                   4013 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:412: else if(error <= 1850 && error >= 1800)
      000CD5 C3               [12] 4014 	clr	c
      000CD6 74 3A            [12] 4015 	mov	a,#0x3a
      000CD8 95*2B            [12] 4016 	subb	a,_error
      000CDA 74 87            [12] 4017 	mov	a,#(0x07 ^ 0x80)
      000CDC 85*2C F0         [24] 4018 	mov	b,(_error + 1)
      000CDF 63 F0 80         [24] 4019 	xrl	b,#0x80
      000CE2 95 F0            [12] 4020 	subb	a,b
      000CE4 40 23            [24] 4021 	jc	00105$
      000CE6 E5*2B            [12] 4022 	mov	a,_error
      000CE8 94 08            [12] 4023 	subb	a,#0x08
      000CEA E5*2C            [12] 4024 	mov	a,(_error + 1)
      000CEC 64 80            [12] 4025 	xrl	a,#0x80
      000CEE 94 87            [12] 4026 	subb	a,#0x87
      000CF0 40 17            [24] 4027 	jc	00105$
q                                  4028 	C$lab4k_(1).c$413$1$173 ==.
                                   4029 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:413: printf("Just back up \n");
      000CF2 74r5F            [12] 4030 	mov	a,#___str_14
      000CF4 C0 E0            [24] 4031 	push	acc
      000CF6 74s01            [12] 4032 	mov	a,#(___str_14 >> 8)
      000CF8 C0 E0            [24] 4033 	push	acc
      000CFA 74 80            [12] 4034 	mov	a,#0x80
      000CFC C0 E0            [24] 4035 	push	acc
      000CFE 12r00r00         [24] 4036 	lcall	_printf
      000D01 15 81            [12] 4037 	dec	sp
      000D03 15 81            [12] 4038 	dec	sp
      000D05 15 81            [12] 4039 	dec	sp
      000D07 80 32            [24] 4040 	sjmp	00113$
      000D09                       4041 00105$:
q                                  4042 	C$lab4k_(1).c$414$1$173 ==.
                                   4043 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:414: else if(error <= -1800 && error >= -1850)
      000D09 C3               [12] 4044 	clr	c
      000D0A 74 F8            [12] 4045 	mov	a,#0xf8
      000D0C 95*2B            [12] 4046 	subb	a,_error
      000D0E 74 78            [12] 4047 	mov	a,#(0xf8 ^ 0x80)
      000D10 85*2C F0         [24] 4048 	mov	b,(_error + 1)
      000D13 63 F0 80         [24] 4049 	xrl	b,#0x80
      000D16 95 F0            [12] 4050 	subb	a,b
      000D18 40 21            [24] 4051 	jc	00113$
      000D1A E5*2B            [12] 4052 	mov	a,_error
      000D1C 94 C6            [12] 4053 	subb	a,#0xc6
      000D1E E5*2C            [12] 4054 	mov	a,(_error + 1)
      000D20 64 80            [12] 4055 	xrl	a,#0x80
      000D22 94 78            [12] 4056 	subb	a,#0x78
      000D24 40 15            [24] 4057 	jc	00113$
q                                  4058 	C$lab4k_(1).c$415$1$173 ==.
                                   4059 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:415: printf("Just back up \n");
      000D26 74r5F            [12] 4060 	mov	a,#___str_14
      000D28 C0 E0            [24] 4061 	push	acc
      000D2A 74s01            [12] 4062 	mov	a,#(___str_14 >> 8)
      000D2C C0 E0            [24] 4063 	push	acc
      000D2E 74 80            [12] 4064 	mov	a,#0x80
      000D30 C0 E0            [24] 4065 	push	acc
      000D32 12r00r00         [24] 4066 	lcall	_printf
      000D35 15 81            [12] 4067 	dec	sp
      000D37 15 81            [12] 4068 	dec	sp
      000D39 15 81            [12] 4069 	dec	sp
      000D3B                       4070 00113$:
q                                  4071 	C$lab4k_(1).c$416$1$173 ==.
                                   4072 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:416: if(error > 50)//should turn right
      000D3B C3               [12] 4073 	clr	c
      000D3C 74 32            [12] 4074 	mov	a,#0x32
      000D3E 95*2B            [12] 4075 	subb	a,_error
      000D40 74 80            [12] 4076 	mov	a,#(0x00 ^ 0x80)
      000D42 85*2C F0         [24] 4077 	mov	b,(_error + 1)
      000D45 63 F0 80         [24] 4078 	xrl	b,#0x80
      000D48 95 F0            [12] 4079 	subb	a,b
      000D4A 40 03            [24] 4080 	jc	00162$
      000D4C 02r0DrEC         [24] 4081 	ljmp	00118$
      000D4F                       4082 00162$:
q                                  4083 	C$lab4k_(1).c$418$1$173 ==.
                                   4084 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:418: sPW = 0.416667*error + sPW_CENTER;
      000D4F 85*2B 82         [24] 4085 	mov	dpl,_error
      000D52 85*2C 83         [24] 4086 	mov	dph,(_error + 1)
      000D55 12r00r00         [24] 4087 	lcall	___sint2fs
      000D58 AC 82            [24] 4088 	mov	r4,dpl
      000D5A AD 83            [24] 4089 	mov	r5,dph
      000D5C AE F0            [24] 4090 	mov	r6,b
      000D5E FF               [12] 4091 	mov	r7,a
      000D5F C0 04            [24] 4092 	push	ar4
      000D61 C0 05            [24] 4093 	push	ar5
      000D63 C0 06            [24] 4094 	push	ar6
      000D65 C0 07            [24] 4095 	push	ar7
      000D67 90 55 61         [24] 4096 	mov	dptr,#0x5561
      000D6A 75 F0 D5         [24] 4097 	mov	b,#0xd5
      000D6D 74 3E            [12] 4098 	mov	a,#0x3e
      000D6F 12r00r00         [24] 4099 	lcall	___fsmul
      000D72 AC 82            [24] 4100 	mov	r4,dpl
      000D74 AD 83            [24] 4101 	mov	r5,dph
      000D76 AE F0            [24] 4102 	mov	r6,b
      000D78 FF               [12] 4103 	mov	r7,a
      000D79 E5 81            [12] 4104 	mov	a,sp
      000D7B 24 FC            [12] 4105 	add	a,#0xfc
      000D7D F5 81            [12] 4106 	mov	sp,a
      000D7F 90r00r00         [24] 4107 	mov	dptr,#_sPW_CENTER
      000D82 E0               [24] 4108 	movx	a,@dptr
      000D83 FA               [12] 4109 	mov	r2,a
      000D84 A3               [24] 4110 	inc	dptr
      000D85 E0               [24] 4111 	movx	a,@dptr
      000D86 FB               [12] 4112 	mov	r3,a
      000D87 8A 82            [24] 4113 	mov	dpl,r2
      000D89 8B 83            [24] 4114 	mov	dph,r3
      000D8B C0 07            [24] 4115 	push	ar7
      000D8D C0 06            [24] 4116 	push	ar6
      000D8F C0 05            [24] 4117 	push	ar5
      000D91 C0 04            [24] 4118 	push	ar4
      000D93 12r00r00         [24] 4119 	lcall	___uint2fs
      000D96 A8 82            [24] 4120 	mov	r0,dpl
      000D98 A9 83            [24] 4121 	mov	r1,dph
      000D9A AA F0            [24] 4122 	mov	r2,b
      000D9C FB               [12] 4123 	mov	r3,a
      000D9D D0 04            [24] 4124 	pop	ar4
      000D9F D0 05            [24] 4125 	pop	ar5
      000DA1 D0 06            [24] 4126 	pop	ar6
      000DA3 D0 07            [24] 4127 	pop	ar7
      000DA5 C0 00            [24] 4128 	push	ar0
      000DA7 C0 01            [24] 4129 	push	ar1
      000DA9 C0 02            [24] 4130 	push	ar2
      000DAB C0 03            [24] 4131 	push	ar3
      000DAD 8C 82            [24] 4132 	mov	dpl,r4
      000DAF 8D 83            [24] 4133 	mov	dph,r5
      000DB1 8E F0            [24] 4134 	mov	b,r6
      000DB3 EF               [12] 4135 	mov	a,r7
      000DB4 12r00r00         [24] 4136 	lcall	___fsadd
      000DB7 AC 82            [24] 4137 	mov	r4,dpl
      000DB9 AD 83            [24] 4138 	mov	r5,dph
      000DBB AE F0            [24] 4139 	mov	r6,b
      000DBD FF               [12] 4140 	mov	r7,a
      000DBE E5 81            [12] 4141 	mov	a,sp
      000DC0 24 FC            [12] 4142 	add	a,#0xfc
      000DC2 F5 81            [12] 4143 	mov	sp,a
      000DC4 8C 82            [24] 4144 	mov	dpl,r4
      000DC6 8D 83            [24] 4145 	mov	dph,r5
      000DC8 8E F0            [24] 4146 	mov	b,r6
      000DCA EF               [12] 4147 	mov	a,r7
      000DCB 12r00r00         [24] 4148 	lcall	___fs2uint
      000DCE 85 82*16         [24] 4149 	mov	_sPW,dpl
      000DD1 85 83*17         [24] 4150 	mov	(_sPW + 1),dph
q                                  4151 	C$lab4k_(1).c$419$2$174 ==.
                                   4152 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:419: printf("--------> \r\n");
      000DD4 74r6E            [12] 4153 	mov	a,#___str_15
      000DD6 C0 E0            [24] 4154 	push	acc
      000DD8 74s01            [12] 4155 	mov	a,#(___str_15 >> 8)
      000DDA C0 E0            [24] 4156 	push	acc
      000DDC 74 80            [12] 4157 	mov	a,#0x80
      000DDE C0 E0            [24] 4158 	push	acc
      000DE0 12r00r00         [24] 4159 	lcall	_printf
      000DE3 15 81            [12] 4160 	dec	sp
      000DE5 15 81            [12] 4161 	dec	sp
      000DE7 15 81            [12] 4162 	dec	sp
      000DE9 02r0ErAD         [24] 4163 	ljmp	00119$
      000DEC                       4164 00118$:
q                                  4165 	C$lab4k_(1).c$421$1$173 ==.
                                   4166 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:421: else if(error < -50)//should turn left
      000DEC C3               [12] 4167 	clr	c
      000DED E5*2B            [12] 4168 	mov	a,_error
      000DEF 94 CE            [12] 4169 	subb	a,#0xce
      000DF1 E5*2C            [12] 4170 	mov	a,(_error + 1)
      000DF3 64 80            [12] 4171 	xrl	a,#0x80
      000DF5 94 7F            [12] 4172 	subb	a,#0x7f
      000DF7 40 03            [24] 4173 	jc	00163$
      000DF9 02r0Er98         [24] 4174 	ljmp	00115$
      000DFC                       4175 00163$:
q                                  4176 	C$lab4k_(1).c$423$1$173 ==.
                                   4177 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:423: sPW = sPW_CENTER + 0.416667*error;
      000DFC 85*2B 82         [24] 4178 	mov	dpl,_error
      000DFF 85*2C 83         [24] 4179 	mov	dph,(_error + 1)
      000E02 12r00r00         [24] 4180 	lcall	___sint2fs
      000E05 AC 82            [24] 4181 	mov	r4,dpl
      000E07 AD 83            [24] 4182 	mov	r5,dph
      000E09 AE F0            [24] 4183 	mov	r6,b
      000E0B FF               [12] 4184 	mov	r7,a
      000E0C C0 04            [24] 4185 	push	ar4
      000E0E C0 05            [24] 4186 	push	ar5
      000E10 C0 06            [24] 4187 	push	ar6
      000E12 C0 07            [24] 4188 	push	ar7
      000E14 90 55 61         [24] 4189 	mov	dptr,#0x5561
      000E17 75 F0 D5         [24] 4190 	mov	b,#0xd5
      000E1A 74 3E            [12] 4191 	mov	a,#0x3e
      000E1C 12r00r00         [24] 4192 	lcall	___fsmul
      000E1F AC 82            [24] 4193 	mov	r4,dpl
      000E21 AD 83            [24] 4194 	mov	r5,dph
      000E23 AE F0            [24] 4195 	mov	r6,b
      000E25 FF               [12] 4196 	mov	r7,a
      000E26 E5 81            [12] 4197 	mov	a,sp
      000E28 24 FC            [12] 4198 	add	a,#0xfc
      000E2A F5 81            [12] 4199 	mov	sp,a
      000E2C 90r00r00         [24] 4200 	mov	dptr,#_sPW_CENTER
      000E2F E0               [24] 4201 	movx	a,@dptr
      000E30 FA               [12] 4202 	mov	r2,a
      000E31 A3               [24] 4203 	inc	dptr
      000E32 E0               [24] 4204 	movx	a,@dptr
      000E33 FB               [12] 4205 	mov	r3,a
      000E34 8A 82            [24] 4206 	mov	dpl,r2
      000E36 8B 83            [24] 4207 	mov	dph,r3
      000E38 C0 07            [24] 4208 	push	ar7
      000E3A C0 06            [24] 4209 	push	ar6
      000E3C C0 05            [24] 4210 	push	ar5
      000E3E C0 04            [24] 4211 	push	ar4
      000E40 12r00r00         [24] 4212 	lcall	___uint2fs
      000E43 A8 82            [24] 4213 	mov	r0,dpl
      000E45 A9 83            [24] 4214 	mov	r1,dph
      000E47 AA F0            [24] 4215 	mov	r2,b
      000E49 FB               [12] 4216 	mov	r3,a
      000E4A D0 04            [24] 4217 	pop	ar4
      000E4C D0 05            [24] 4218 	pop	ar5
      000E4E D0 06            [24] 4219 	pop	ar6
      000E50 D0 07            [24] 4220 	pop	ar7
      000E52 C0 04            [24] 4221 	push	ar4
      000E54 C0 05            [24] 4222 	push	ar5
      000E56 C0 06            [24] 4223 	push	ar6
      000E58 C0 07            [24] 4224 	push	ar7
      000E5A 88 82            [24] 4225 	mov	dpl,r0
      000E5C 89 83            [24] 4226 	mov	dph,r1
      000E5E 8A F0            [24] 4227 	mov	b,r2
      000E60 EB               [12] 4228 	mov	a,r3
      000E61 12r00r00         [24] 4229 	lcall	___fsadd
      000E64 AC 82            [24] 4230 	mov	r4,dpl
      000E66 AD 83            [24] 4231 	mov	r5,dph
      000E68 AE F0            [24] 4232 	mov	r6,b
      000E6A FF               [12] 4233 	mov	r7,a
      000E6B E5 81            [12] 4234 	mov	a,sp
      000E6D 24 FC            [12] 4235 	add	a,#0xfc
      000E6F F5 81            [12] 4236 	mov	sp,a
      000E71 8C 82            [24] 4237 	mov	dpl,r4
      000E73 8D 83            [24] 4238 	mov	dph,r5
      000E75 8E F0            [24] 4239 	mov	b,r6
      000E77 EF               [12] 4240 	mov	a,r7
      000E78 12r00r00         [24] 4241 	lcall	___fs2uint
      000E7B 85 82*16         [24] 4242 	mov	_sPW,dpl
      000E7E 85 83*17         [24] 4243 	mov	(_sPW + 1),dph
q                                  4244 	C$lab4k_(1).c$424$2$175 ==.
                                   4245 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:424: printf("<-------- \r\n");
      000E81 74r7B            [12] 4246 	mov	a,#___str_16
      000E83 C0 E0            [24] 4247 	push	acc
      000E85 74s01            [12] 4248 	mov	a,#(___str_16 >> 8)
      000E87 C0 E0            [24] 4249 	push	acc
      000E89 74 80            [12] 4250 	mov	a,#0x80
      000E8B C0 E0            [24] 4251 	push	acc
      000E8D 12r00r00         [24] 4252 	lcall	_printf
      000E90 15 81            [12] 4253 	dec	sp
      000E92 15 81            [12] 4254 	dec	sp
      000E94 15 81            [12] 4255 	dec	sp
      000E96 80 15            [24] 4256 	sjmp	00119$
      000E98                       4257 00115$:
q                                  4258 	C$lab4k_(1).c$427$1$173 ==.
                                   4259 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:427: printf("  --  \r\n");
      000E98 74r88            [12] 4260 	mov	a,#___str_17
      000E9A C0 E0            [24] 4261 	push	acc
      000E9C 74s01            [12] 4262 	mov	a,#(___str_17 >> 8)
      000E9E C0 E0            [24] 4263 	push	acc
      000EA0 74 80            [12] 4264 	mov	a,#0x80
      000EA2 C0 E0            [24] 4265 	push	acc
      000EA4 12r00r00         [24] 4266 	lcall	_printf
      000EA7 15 81            [12] 4267 	dec	sp
      000EA9 15 81            [12] 4268 	dec	sp
      000EAB 15 81            [12] 4269 	dec	sp
      000EAD                       4270 00119$:
q                                  4271 	C$lab4k_(1).c$429$1$173 ==.
                                   4272 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:429: if(sPW > sPW_MAX)
      000EAD 90r00r04         [24] 4273 	mov	dptr,#_sPW_MAX
      000EB0 E0               [24] 4274 	movx	a,@dptr
      000EB1 FE               [12] 4275 	mov	r6,a
      000EB2 A3               [24] 4276 	inc	dptr
      000EB3 E0               [24] 4277 	movx	a,@dptr
      000EB4 FF               [12] 4278 	mov	r7,a
      000EB5 C3               [12] 4279 	clr	c
      000EB6 EE               [12] 4280 	mov	a,r6
      000EB7 95*16            [12] 4281 	subb	a,_sPW
      000EB9 EF               [12] 4282 	mov	a,r7
      000EBA 95*17            [12] 4283 	subb	a,(_sPW + 1)
      000EBC 50 0A            [24] 4284 	jnc	00121$
q                                  4285 	C$lab4k_(1).c$430$1$173 ==.
                                   4286 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:430: sPW = sPW_MAX;
      000EBE 90r00r04         [24] 4287 	mov	dptr,#_sPW_MAX
      000EC1 E0               [24] 4288 	movx	a,@dptr
      000EC2 F5*16            [12] 4289 	mov	_sPW,a
      000EC4 A3               [24] 4290 	inc	dptr
      000EC5 E0               [24] 4291 	movx	a,@dptr
      000EC6 F5*17            [12] 4292 	mov	(_sPW + 1),a
      000EC8                       4293 00121$:
q                                  4294 	C$lab4k_(1).c$431$1$173 ==.
                                   4295 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:431: if(sPW < sPW_MIN)
      000EC8 90r00r02         [24] 4296 	mov	dptr,#_sPW_MIN
      000ECB E0               [24] 4297 	movx	a,@dptr
      000ECC FE               [12] 4298 	mov	r6,a
      000ECD A3               [24] 4299 	inc	dptr
      000ECE E0               [24] 4300 	movx	a,@dptr
      000ECF FF               [12] 4301 	mov	r7,a
      000ED0 C3               [12] 4302 	clr	c
      000ED1 E5*16            [12] 4303 	mov	a,_sPW
      000ED3 9E               [12] 4304 	subb	a,r6
      000ED4 E5*17            [12] 4305 	mov	a,(_sPW + 1)
      000ED6 9F               [12] 4306 	subb	a,r7
      000ED7 50 0A            [24] 4307 	jnc	00123$
q                                  4308 	C$lab4k_(1).c$432$1$173 ==.
                                   4309 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:432: sPW = sPW_MIN;
      000ED9 90r00r02         [24] 4310 	mov	dptr,#_sPW_MIN
      000EDC E0               [24] 4311 	movx	a,@dptr
      000EDD F5*16            [12] 4312 	mov	_sPW,a
      000EDF A3               [24] 4313 	inc	dptr
      000EE0 E0               [24] 4314 	movx	a,@dptr
      000EE1 F5*17            [12] 4315 	mov	(_sPW + 1),a
      000EE3                       4316 00123$:
q                                  4317 	C$lab4k_(1).c$434$1$173 ==.
                                   4318 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:434: printf("Stering error is %d \n",error);
      000EE3 C0*2B            [24] 4319 	push	_error
      000EE5 C0*2C            [24] 4320 	push	(_error + 1)
      000EE7 74r91            [12] 4321 	mov	a,#___str_18
      000EE9 C0 E0            [24] 4322 	push	acc
      000EEB 74s01            [12] 4323 	mov	a,#(___str_18 >> 8)
      000EED C0 E0            [24] 4324 	push	acc
      000EEF 74 80            [12] 4325 	mov	a,#0x80
      000EF1 C0 E0            [24] 4326 	push	acc
      000EF3 12r00r00         [24] 4327 	lcall	_printf
      000EF6 E5 81            [12] 4328 	mov	a,sp
      000EF8 24 FB            [12] 4329 	add	a,#0xfb
      000EFA F5 81            [12] 4330 	mov	sp,a
q                                  4331 	C$lab4k_(1).c$435$1$173 ==.
                                   4332 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:435: printf("Stering is set to %u \n", sPW);
      000EFC C0*16            [24] 4333 	push	_sPW
      000EFE C0*17            [24] 4334 	push	(_sPW + 1)
      000F00 74rA7            [12] 4335 	mov	a,#___str_19
      000F02 C0 E0            [24] 4336 	push	acc
      000F04 74s01            [12] 4337 	mov	a,#(___str_19 >> 8)
      000F06 C0 E0            [24] 4338 	push	acc
      000F08 74 80            [12] 4339 	mov	a,#0x80
      000F0A C0 E0            [24] 4340 	push	acc
      000F0C 12r00r00         [24] 4341 	lcall	_printf
      000F0F E5 81            [12] 4342 	mov	a,sp
      000F11 24 FB            [12] 4343 	add	a,#0xfb
      000F13 F5 81            [12] 4344 	mov	sp,a
q                                  4345 	C$lab4k_(1).c$436$1$173 ==.
                                   4346 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:436: PCA0CP0 = 0xFFFF - sPW;
      000F15 74 FF            [12] 4347 	mov	a,#0xff
      000F17 C3               [12] 4348 	clr	c
      000F18 95*16            [12] 4349 	subb	a,_sPW
      000F1A F5 EA            [12] 4350 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000F1C 74 FF            [12] 4351 	mov	a,#0xff
      000F1E 95*17            [12] 4352 	subb	a,(_sPW + 1)
      000F20 F5 FA            [12] 4353 	mov	((_PCA0CP0 >> 8) & 0xFF),a
q                                  4354 	C$lab4k_(1).c$437$1$173 ==.
                           000F22  4355 	XG$Set_Heading$0$0 ==.
      000F22 22               [24] 4356 	ret
                                   4357 ;------------------------------------------------------------
                                   4358 ;Allocation info for local variables in function 'ReadRanger'
                                   4359 ;------------------------------------------------------------
                           000F23  4360 	G$ReadRanger$0$0 ==.
q                                  4361 	C$lab4k_(1).c$441$1$173 ==.
                                   4362 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:441: unsigned int ReadRanger()
                                   4363 ;	-----------------------------------------
                                   4364 ;	 function ReadRanger
                                   4365 ;	-----------------------------------------
      000F23                       4366 _ReadRanger:
q                                  4367 	C$lab4k_(1).c$444$1$176 ==.
                                   4368 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:444: i2c_read_data(r_addr,2,r_Data,2);
      000F23 75*10r1B         [24] 4369 	mov	_i2c_read_data_PARM_3,#_r_Data
      000F26 75*11 00         [24] 4370 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000F29 75*12 40         [24] 4371 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000F2C 75*0F 02         [24] 4372 	mov	_i2c_read_data_PARM_2,#0x02
      000F2F 75*13 02         [24] 4373 	mov	_i2c_read_data_PARM_4,#0x02
      000F32 85*1F 82         [24] 4374 	mov	dpl,_r_addr
      000F35 12r04r06         [24] 4375 	lcall	_i2c_read_data
q                                  4376 	C$lab4k_(1).c$446$1$176 ==.
                                   4377 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:446: range = ((r_Data[0] << 8) | r_Data[1]);
      000F38 AF*1B            [24] 4378 	mov	r7,_r_Data
      000F3A 7E 00            [12] 4379 	mov	r6,#0x00
      000F3C AC*1C            [24] 4380 	mov	r4,(_r_Data + 0x0001)
      000F3E 7D 00            [12] 4381 	mov	r5,#0x00
      000F40 EC               [12] 4382 	mov	a,r4
      000F41 4E               [12] 4383 	orl	a,r6
      000F42 F5*1D            [12] 4384 	mov	_range,a
      000F44 ED               [12] 4385 	mov	a,r5
      000F45 4F               [12] 4386 	orl	a,r7
      000F46 F5*1E            [12] 4387 	mov	(_range + 1),a
q                                  4388 	C$lab4k_(1).c$447$1$176 ==.
                                   4389 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:447: return range;
      000F48 85*1D 82         [24] 4390 	mov	dpl,_range
      000F4B 85*1E 83         [24] 4391 	mov	dph,(_range + 1)
q                                  4392 	C$lab4k_(1).c$449$1$176 ==.
                           000F4E  4393 	XG$ReadRanger$0$0 ==.
      000F4E 22               [24] 4394 	ret
                                   4395 ;------------------------------------------------------------
                                   4396 ;Allocation info for local variables in function 'ReadCompass'
                                   4397 ;------------------------------------------------------------
                           000F4F  4398 	G$ReadCompass$0$0 ==.
q                                  4399 	C$lab4k_(1).c$451$1$176 ==.
                                   4400 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:451: unsigned int ReadCompass()
                                   4401 ;	-----------------------------------------
                                   4402 ;	 function ReadCompass
                                   4403 ;	-----------------------------------------
      000F4F                       4404 _ReadCompass:
q                                  4405 	C$lab4k_(1).c$453$1$177 ==.
                                   4406 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:453: i2c_read_data(c_addr,2,c_Data,2);
      000F4F 75*10r23         [24] 4407 	mov	_i2c_read_data_PARM_3,#_c_Data
      000F52 75*11 00         [24] 4408 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000F55 75*12 40         [24] 4409 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000F58 75*0F 02         [24] 4410 	mov	_i2c_read_data_PARM_2,#0x02
      000F5B 75*13 02         [24] 4411 	mov	_i2c_read_data_PARM_4,#0x02
      000F5E 85*22 82         [24] 4412 	mov	dpl,_c_addr
      000F61 12r04r06         [24] 4413 	lcall	_i2c_read_data
q                                  4414 	C$lab4k_(1).c$454$1$177 ==.
                                   4415 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:454: heading = ((c_Data[0] << 8) | c_Data[1]); 
      000F64 AF*23            [24] 4416 	mov	r7,_c_Data
      000F66 7E 00            [12] 4417 	mov	r6,#0x00
      000F68 AC*24            [24] 4418 	mov	r4,(_c_Data + 0x0001)
      000F6A 7D 00            [12] 4419 	mov	r5,#0x00
      000F6C EC               [12] 4420 	mov	a,r4
      000F6D 4E               [12] 4421 	orl	a,r6
      000F6E F5*25            [12] 4422 	mov	_heading,a
      000F70 ED               [12] 4423 	mov	a,r5
      000F71 4F               [12] 4424 	orl	a,r7
      000F72 F5*26            [12] 4425 	mov	(_heading + 1),a
q                                  4426 	C$lab4k_(1).c$455$1$177 ==.
                                   4427 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab4k (1).c:455: return heading;
      000F74 85*25 82         [24] 4428 	mov	dpl,_heading
      000F77 85*26 83         [24] 4429 	mov	dph,(_heading + 1)
q                                  4430 	C$lab4k_(1).c$456$1$177 ==.
                           000F7A  4431 	XG$ReadCompass$0$0 ==.
      000F7A 22               [24] 4432 	ret
                                   4433 	.area CSEG    (CODE)
                                   4434 	.area CONST   (CODE)
                           000000  4435 Flab4k__1_$__str_0$0$0 == .
      000000                       4436 ___str_0:
      000000 0A                    4437 	.db 0x0a
      000001 54 79 70 65 20 64 69  4438 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    4439 	.db 0x00
                           000016  4440 Flab4k__1_$__str_1$0$0 == .
      000016                       4441 ___str_1:
      000016 20 20 20 20 20 25 63  4442 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    4443 	.db 0x00
                           000026  4444 Flab4k__1_$__str_2$0$0 == .
      000026                       4445 ___str_2:
      000026 25 63                 4446 	.ascii "%c"
      000028 00                    4447 	.db 0x00
                           000029  4448 Flab4k__1_$__str_3$0$0 == .
      000029                       4449 ___str_3:
      000029 45 6D 62 65 64 64 65  4450 	.ascii "Embedded Control Pulsewidth Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 50 75 6C 73
             65 77 69 64 74 68 20
             43 61 6C 69 62 72 61
             74 69 6F 6E
      000050 0D                    4451 	.db 0x0d
      000051 0A                    4452 	.db 0x0a
      000052 00                    4453 	.db 0x00
                           000053  4454 Flab4k__1_$__str_4$0$0 == .
      000053                       4455 ___str_4:
      000053 43 61 6C 69 62 72 61  4456 	.ascii "Calibration:"
             74 69 6F 6E 3A
      00005F 0A                    4457 	.db 0x0a
      000060 48 65 6C 6C 6F 20 77  4458 	.ascii "Hello world!"
             6F 72 6C 64 21
      00006C 0A                    4459 	.db 0x0a
      00006D 00                    4460 	.db 0x00
                           00006E  4461 Flab4k__1_$__str_5$0$0 == .
      00006E                       4462 ___str_5:
      00006E 53 74 65 65 72 69 6E  4463 	.ascii "Steering Calibration finished. %u "
             67 20 43 61 6C 69 62
             72 61 74 69 6F 6E 20
             66 69 6E 69 73 68 65
             64 2E 20 25 75 20
      000090 0D                    4464 	.db 0x0d
      000091 0A                    4465 	.db 0x0a
      000092 00                    4466 	.db 0x00
                           000093  4467 Flab4k__1_$__str_6$0$0 == .
      000093                       4468 ___str_6:
      000093 4D 6F 74 6F 72 20 43  4469 	.ascii "Motor Calibration finished. %u "
             61 6C 69 62 72 61 74
             69 6F 6E 20 66 69 6E
             69 73 68 65 64 2E 20
             25 75 20
      0000B2 0D                    4470 	.db 0x0d
      0000B3 0A                    4471 	.db 0x0a
      0000B4 00                    4472 	.db 0x00
                           0000B5  4473 Flab4k__1_$__str_7$0$0 == .
      0000B5                       4474 ___str_7:
      0000B5 24 24 24 24 24 24 24  4475 	.ascii "$$$$$$$$$$Battery voltage: %u $$$$$$$$$$$$$$$"
             24 24 24 42 61 74 74
             65 72 79 20 76 6F 6C
             74 61 67 65 3A 20 25
             75 20 24 24 24 24 24
             24 24 24 24 24 24 24
             24 24 24
      0000E2 0D                    4476 	.db 0x0d
      0000E3 0A                    4477 	.db 0x0a
      0000E4 00                    4478 	.db 0x00
                           0000E5  4479 Flab4k__1_$__str_8$0$0 == .
      0000E5                       4480 ___str_8:
      0000E5 64 69 73 74 61 6E 63  4481 	.ascii "distance is %u "
             65 20 69 73 20 25 75
             20
      0000F4 0D                    4482 	.db 0x0d
      0000F5 0A                    4483 	.db 0x0a
      0000F6 00                    4484 	.db 0x00
                           0000F7  4485 Flab4k__1_$__str_9$0$0 == .
      0000F7                       4486 ___str_9:
      0000F7 68 65 61 64 69 6E 67  4487 	.ascii "heading towards %u "
             20 74 6F 77 61 72 64
             73 20 25 75 20
      00010A 0A                    4488 	.db 0x0a
      00010B 00                    4489 	.db 0x00
                           00010C  4490 Flab4k__1_$__str_10$0$0 == .
      00010C                       4491 ___str_10:
      00010C 0A                    4492 	.db 0x0a
      00010D 0D                    4493 	.db 0x0d
      00010E 48 65 61 64 69 6E 67  4494 	.ascii "Heading %u,"
             20 25 75 2C
      000119 0A                    4495 	.db 0x0a
      00011A 0D                    4496 	.db 0x0d
      00011B 20 52 65 61 64 69 6E  4497 	.ascii " Reading %u"
             67 20 25 75
      000126 00                    4498 	.db 0x00
                           000127  4499 Flab4k__1_$__str_11$0$0 == .
      000127                       4500 ___str_11:
      000127 6D 6F 74 6F 72 20 50  4501 	.ascii "motor PW: %u"
             57 3A 20 25 75
      000133 0A                    4502 	.db 0x0a
      000134 00                    4503 	.db 0x00
                           000135  4504 Flab4k__1_$__str_12$0$0 == .
      000135                       4505 ___str_12:
      000135 73 74 65 72 69 6E 67  4506 	.ascii "stering PW: %u"
             20 50 57 3A 20 25 75
      000143 0A                    4507 	.db 0x0a
      000144 00                    4508 	.db 0x00
                           000145  4509 Flab4k__1_$__str_13$0$0 == .
      000145                       4510 ___str_13:
      000145 4F 76 65 72 69 64 65  4511 	.ascii "Overide is setted to %d "
             20 69 73 20 73 65 74
             74 65 64 20 74 6F 20
             25 64 20
      00015D 0A                    4512 	.db 0x0a
      00015E 00                    4513 	.db 0x00
                           00015F  4514 Flab4k__1_$__str_14$0$0 == .
      00015F                       4515 ___str_14:
      00015F 4A 75 73 74 20 62 61  4516 	.ascii "Just back up "
             63 6B 20 75 70 20
      00016C 0A                    4517 	.db 0x0a
      00016D 00                    4518 	.db 0x00
                           00016E  4519 Flab4k__1_$__str_15$0$0 == .
      00016E                       4520 ___str_15:
      00016E 2D 2D 2D 2D 2D 2D 2D  4521 	.ascii "--------> "
             2D 3E 20
      000178 0D                    4522 	.db 0x0d
      000179 0A                    4523 	.db 0x0a
      00017A 00                    4524 	.db 0x00
                           00017B  4525 Flab4k__1_$__str_16$0$0 == .
      00017B                       4526 ___str_16:
      00017B 3C 2D 2D 2D 2D 2D 2D  4527 	.ascii "<-------- "
             2D 2D 20
      000185 0D                    4528 	.db 0x0d
      000186 0A                    4529 	.db 0x0a
      000187 00                    4530 	.db 0x00
                           000188  4531 Flab4k__1_$__str_17$0$0 == .
      000188                       4532 ___str_17:
      000188 20 20 2D 2D 20 20     4533 	.ascii "  --  "
      00018E 0D                    4534 	.db 0x0d
      00018F 0A                    4535 	.db 0x0a
      000190 00                    4536 	.db 0x00
                           000191  4537 Flab4k__1_$__str_18$0$0 == .
      000191                       4538 ___str_18:
      000191 53 74 65 72 69 6E 67  4539 	.ascii "Stering error is %d "
             20 65 72 72 6F 72 20
             69 73 20 25 64 20
      0001A5 0A                    4540 	.db 0x0a
      0001A6 00                    4541 	.db 0x00
                           0001A7  4542 Flab4k__1_$__str_19$0$0 == .
      0001A7                       4543 ___str_19:
      0001A7 53 74 65 72 69 6E 67  4544 	.ascii "Stering is set to %u "
             20 69 73 20 73 65 74
             20 74 6F 20 25 75 20
      0001BC 0A                    4545 	.db 0x0a
      0001BD 00                    4546 	.db 0x00
                                   4547 	.area XINIT   (CODE)
                           000000  4548 Flab4k__1_$__xinit_sPW_CENTER$0$0 == .
      000000                       4549 __xinit__sPW_CENTER:
      000000 5F 0A                 4550 	.byte #0x5f,#0x0a	; 2655
                           000002  4551 Flab4k__1_$__xinit_sPW_MIN$0$0 == .
      000002                       4552 __xinit__sPW_MIN:
      000002 D5 07                 4553 	.byte #0xd5,#0x07	; 2005
                           000004  4554 Flab4k__1_$__xinit_sPW_MAX$0$0 == .
      000004                       4555 __xinit__sPW_MAX:
      000004 E9 0C                 4556 	.byte #0xe9,#0x0c	; 3305
                           000006  4557 Flab4k__1_$__xinit_mPW_CENTER$0$0 == .
      000006                       4558 __xinit__mPW_CENTER:
      000006 CD 0A                 4559 	.byte #0xcd,#0x0a	; 2765
                           000008  4560 Flab4k__1_$__xinit_mPW_MIN$0$0 == .
      000008                       4561 __xinit__mPW_MIN:
      000008 EB 07                 4562 	.byte #0xeb,#0x07	; 2027
                           00000A  4563 Flab4k__1_$__xinit_mPW_MAX$0$0 == .
      00000A                       4564 __xinit__mPW_MAX:
      00000A AE 0D                 4565 	.byte #0xae,#0x0d	; 3502
                                   4566 	.area CABS    (ABS,CODE)
