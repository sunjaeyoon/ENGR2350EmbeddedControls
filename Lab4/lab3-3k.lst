                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module lab3_3k
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_keypad
                                     13 	.globl _strlen
                                     14 	.globl _putchar
                                     15 	.globl _getchar
                                     16 	.globl _vsprintf
                                     17 	.globl _printf
                                     18 	.globl _getchar_nw
                                     19 	.globl _Sys_Init
                                     20 	.globl _UART0_Init
                                     21 	.globl _SYSCLK_Init
                                     22 	.globl _LED
                                     23 	.globl _mSS
                                     24 	.globl _BUS_SCL
                                     25 	.globl _BUS_TOE
                                     26 	.globl _BUS_FTE
                                     27 	.globl _BUS_AA
                                     28 	.globl _BUS_INT
                                     29 	.globl _BUS_STOP
                                     30 	.globl _BUS_START
                                     31 	.globl _BUS_EN
                                     32 	.globl _BUS_BUSY
                                     33 	.globl _SPIF
                                     34 	.globl _WCOL
                                     35 	.globl _MODF
                                     36 	.globl _RXOVRN
                                     37 	.globl _TXBSY
                                     38 	.globl _SLVSEL
                                     39 	.globl _MSTEN
                                     40 	.globl _SPIEN
                                     41 	.globl _AD0EN
                                     42 	.globl _ADCEN
                                     43 	.globl _AD0TM
                                     44 	.globl _ADCTM
                                     45 	.globl _AD0INT
                                     46 	.globl _ADCINT
                                     47 	.globl _AD0BUSY
                                     48 	.globl _ADBUSY
                                     49 	.globl _AD0CM1
                                     50 	.globl _ADSTM1
                                     51 	.globl _AD0CM0
                                     52 	.globl _ADSTM0
                                     53 	.globl _AD0WINT
                                     54 	.globl _ADWINT
                                     55 	.globl _AD0LJST
                                     56 	.globl _ADLJST
                                     57 	.globl _CF
                                     58 	.globl _CR
                                     59 	.globl _CCF4
                                     60 	.globl _CCF3
                                     61 	.globl _CCF2
                                     62 	.globl _CCF1
                                     63 	.globl _CCF0
                                     64 	.globl _CY
                                     65 	.globl _AC
                                     66 	.globl _F0
                                     67 	.globl _RS1
                                     68 	.globl _RS0
                                     69 	.globl _OV
                                     70 	.globl _F1
                                     71 	.globl _P
                                     72 	.globl _TF2
                                     73 	.globl _EXF2
                                     74 	.globl _RCLK
                                     75 	.globl _TCLK
                                     76 	.globl _EXEN2
                                     77 	.globl _TR2
                                     78 	.globl _CT2
                                     79 	.globl _CPRL2
                                     80 	.globl _BUSY
                                     81 	.globl _ENSMB
                                     82 	.globl _STA
                                     83 	.globl _STO
                                     84 	.globl _SI
                                     85 	.globl _AA
                                     86 	.globl _SMBFTE
                                     87 	.globl _SMBTOE
                                     88 	.globl _PT2
                                     89 	.globl _PS
                                     90 	.globl _PS0
                                     91 	.globl _PT1
                                     92 	.globl _PX1
                                     93 	.globl _PT0
                                     94 	.globl _PX0
                                     95 	.globl _P3_7
                                     96 	.globl _P3_6
                                     97 	.globl _P3_5
                                     98 	.globl _P3_4
                                     99 	.globl _P3_3
                                    100 	.globl _P3_2
                                    101 	.globl _P3_1
                                    102 	.globl _P3_0
                                    103 	.globl _EA
                                    104 	.globl _ET2
                                    105 	.globl _ES
                                    106 	.globl _ES0
                                    107 	.globl _ET1
                                    108 	.globl _EX1
                                    109 	.globl _ET0
                                    110 	.globl _EX0
                                    111 	.globl _P2_7
                                    112 	.globl _P2_6
                                    113 	.globl _P2_5
                                    114 	.globl _P2_4
                                    115 	.globl _P2_3
                                    116 	.globl _P2_2
                                    117 	.globl _P2_1
                                    118 	.globl _P2_0
                                    119 	.globl _S0MODE
                                    120 	.globl _SM00
                                    121 	.globl _SM0
                                    122 	.globl _SM10
                                    123 	.globl _SM1
                                    124 	.globl _MCE0
                                    125 	.globl _SM20
                                    126 	.globl _SM2
                                    127 	.globl _REN0
                                    128 	.globl _REN
                                    129 	.globl _TB80
                                    130 	.globl _TB8
                                    131 	.globl _RB80
                                    132 	.globl _RB8
                                    133 	.globl _TI0
                                    134 	.globl _TI
                                    135 	.globl _RI0
                                    136 	.globl _RI
                                    137 	.globl _P1_7
                                    138 	.globl _P1_6
                                    139 	.globl _P1_5
                                    140 	.globl _P1_4
                                    141 	.globl _P1_3
                                    142 	.globl _P1_2
                                    143 	.globl _P1_1
                                    144 	.globl _P1_0
                                    145 	.globl _TF1
                                    146 	.globl _TR1
                                    147 	.globl _TF0
                                    148 	.globl _TR0
                                    149 	.globl _IE1
                                    150 	.globl _IT1
                                    151 	.globl _IE0
                                    152 	.globl _IT0
                                    153 	.globl _P0_7
                                    154 	.globl _P0_6
                                    155 	.globl _P0_5
                                    156 	.globl _P0_4
                                    157 	.globl _P0_3
                                    158 	.globl _P0_2
                                    159 	.globl _P0_1
                                    160 	.globl _P0_0
                                    161 	.globl _PCA0CP4
                                    162 	.globl _PCA0CP3
                                    163 	.globl _PCA0CP2
                                    164 	.globl _PCA0CP1
                                    165 	.globl _PCA0CP0
                                    166 	.globl _PCA0
                                    167 	.globl _DAC1
                                    168 	.globl _DAC0
                                    169 	.globl _ADC0LT
                                    170 	.globl _ADC0GT
                                    171 	.globl _ADC0
                                    172 	.globl _RCAP4
                                    173 	.globl _TMR4
                                    174 	.globl _TMR3RL
                                    175 	.globl _TMR3
                                    176 	.globl _RCAP2
                                    177 	.globl _TMR2
                                    178 	.globl _TMR1
                                    179 	.globl _TMR0
                                    180 	.globl _WDTCN
                                    181 	.globl _PCA0CPH4
                                    182 	.globl _PCA0CPH3
                                    183 	.globl _PCA0CPH2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPH0
                                    186 	.globl _PCA0H
                                    187 	.globl _SPI0CN
                                    188 	.globl _EIP2
                                    189 	.globl _EIP1
                                    190 	.globl _TH4
                                    191 	.globl _TL4
                                    192 	.globl _SADDR1
                                    193 	.globl _SBUF1
                                    194 	.globl _SCON1
                                    195 	.globl _B
                                    196 	.globl _RSTSRC
                                    197 	.globl _PCA0CPL4
                                    198 	.globl _PCA0CPL3
                                    199 	.globl _PCA0CPL2
                                    200 	.globl _PCA0CPL1
                                    201 	.globl _PCA0CPL0
                                    202 	.globl _PCA0L
                                    203 	.globl _ADC0CN
                                    204 	.globl _EIE2
                                    205 	.globl _EIE1
                                    206 	.globl _RCAP4H
                                    207 	.globl _RCAP4L
                                    208 	.globl _XBR2
                                    209 	.globl _XBR1
                                    210 	.globl _XBR0
                                    211 	.globl _ACC
                                    212 	.globl _PCA0CPM4
                                    213 	.globl _PCA0CPM3
                                    214 	.globl _PCA0CPM2
                                    215 	.globl _PCA0CPM1
                                    216 	.globl _PCA0CPM0
                                    217 	.globl _PCA0MD
                                    218 	.globl _PCA0CN
                                    219 	.globl _DAC1CN
                                    220 	.globl _DAC1H
                                    221 	.globl _DAC1L
                                    222 	.globl _DAC0CN
                                    223 	.globl _DAC0H
                                    224 	.globl _DAC0L
                                    225 	.globl _REF0CN
                                    226 	.globl _PSW
                                    227 	.globl _SMB0CR
                                    228 	.globl _TH2
                                    229 	.globl _TL2
                                    230 	.globl _RCAP2H
                                    231 	.globl _RCAP2L
                                    232 	.globl _T4CON
                                    233 	.globl _T2CON
                                    234 	.globl _ADC0LTH
                                    235 	.globl _ADC0LTL
                                    236 	.globl _ADC0GTH
                                    237 	.globl _ADC0GTL
                                    238 	.globl _SMB0ADR
                                    239 	.globl _SMB0DAT
                                    240 	.globl _SMB0STA
                                    241 	.globl _SMB0CN
                                    242 	.globl _ADC0H
                                    243 	.globl _ADC0L
                                    244 	.globl _P1MDIN
                                    245 	.globl _ADC0CF
                                    246 	.globl _AMX0SL
                                    247 	.globl _AMX0CF
                                    248 	.globl _SADEN0
                                    249 	.globl _IP
                                    250 	.globl _FLACL
                                    251 	.globl _FLSCL
                                    252 	.globl _P74OUT
                                    253 	.globl _OSCICN
                                    254 	.globl _OSCXCN
                                    255 	.globl _P3
                                    256 	.globl __XPAGE
                                    257 	.globl _EMI0CN
                                    258 	.globl _SADEN1
                                    259 	.globl _P3IF
                                    260 	.globl _AMX1SL
                                    261 	.globl _ADC1CF
                                    262 	.globl _ADC1CN
                                    263 	.globl _SADDR0
                                    264 	.globl _IE
                                    265 	.globl _P3MDOUT
                                    266 	.globl _PRT3CF
                                    267 	.globl _P2MDOUT
                                    268 	.globl _PRT2CF
                                    269 	.globl _P1MDOUT
                                    270 	.globl _PRT1CF
                                    271 	.globl _P0MDOUT
                                    272 	.globl _PRT0CF
                                    273 	.globl _EMI0CF
                                    274 	.globl _EMI0TC
                                    275 	.globl _P2
                                    276 	.globl _CPT1CN
                                    277 	.globl _CPT0CN
                                    278 	.globl _SPI0CKR
                                    279 	.globl _ADC1
                                    280 	.globl _SPI0DAT
                                    281 	.globl _SPI0CFG
                                    282 	.globl _SBUF0
                                    283 	.globl _SBUF
                                    284 	.globl _SCON0
                                    285 	.globl _SCON
                                    286 	.globl _P7
                                    287 	.globl _TMR3H
                                    288 	.globl _TMR3L
                                    289 	.globl _TMR3RLH
                                    290 	.globl _TMR3RLL
                                    291 	.globl _TMR3CN
                                    292 	.globl _P1
                                    293 	.globl _PSCTL
                                    294 	.globl _CKCON
                                    295 	.globl _TH1
                                    296 	.globl _TH0
                                    297 	.globl _TL1
                                    298 	.globl _TL0
                                    299 	.globl _TMOD
                                    300 	.globl _TCON
                                    301 	.globl _PCON
                                    302 	.globl _P6
                                    303 	.globl _P5
                                    304 	.globl _P4
                                    305 	.globl _DPH
                                    306 	.globl _DPL
                                    307 	.globl _SP
                                    308 	.globl _P0
                                    309 	.globl _mPW_MAX
                                    310 	.globl _mPW_MIN
                                    311 	.globl _mPW_CENTER
                                    312 	.globl _sPW_MAX
                                    313 	.globl _sPW_MIN
                                    314 	.globl _sPW_CENTER
                                    315 	.globl _error
                                    316 	.globl _desired_heading
                                    317 	.globl _new_heading
                                    318 	.globl _h_Counts
                                    319 	.globl _heading
                                    320 	.globl _c_Data
                                    321 	.globl _c_addr
                                    322 	.globl _new_range
                                    323 	.globl _r_Counts
                                    324 	.globl _r_addr
                                    325 	.globl _range
                                    326 	.globl _r_Data
                                    327 	.globl _dist
                                    328 	.globl _mPW
                                    329 	.globl _sPW
                                    330 	.globl _Counts
                                    331 	.globl _i2c_read_data_PARM_4
                                    332 	.globl _i2c_read_data_PARM_3
                                    333 	.globl _i2c_read_data_PARM_2
                                    334 	.globl _i2c_write_data_PARM_4
                                    335 	.globl _i2c_write_data_PARM_3
                                    336 	.globl _i2c_write_data_PARM_2
                                    337 	.globl _aligned_alloc_PARM_2
                                    338 	.globl _Data2
                                    339 	.globl _lcd_print
                                    340 	.globl _lcd_clear
                                    341 	.globl _kpd_input
                                    342 	.globl _delay_time
                                    343 	.globl _i2c_start
                                    344 	.globl _i2c_write
                                    345 	.globl _i2c_write_and_stop
                                    346 	.globl _i2c_read
                                    347 	.globl _i2c_read_and_stop
                                    348 	.globl _i2c_write_data
                                    349 	.globl _i2c_read_data
                                    350 	.globl _Accel_Init
                                    351 	.globl _Accel_Init_C
                                    352 	.globl _Port_Init
                                    353 	.globl _XBR0_Init
                                    354 	.globl _PCA_Init
                                    355 	.globl _SMB_Init
                                    356 	.globl _PCA_ISR
                                    357 	.globl _CarControl
                                    358 	.globl _Set_Pulsewidth
                                    359 	.globl _Set_Overide
                                    360 	.globl _Set_Speed
                                    361 	.globl _Set_Heading
                                    362 	.globl _ReadRanger
                                    363 	.globl _ReadCompass
                                    364 ;--------------------------------------------------------
                                    365 ; special function registers
                                    366 ;--------------------------------------------------------
                                    367 	.area RSEG    (ABS,DATA)
      000000                        368 	.org 0x0000
                           000080   369 G$P0$0$0 == 0x0080
                           000080   370 _P0	=	0x0080
                           000081   371 G$SP$0$0 == 0x0081
                           000081   372 _SP	=	0x0081
                           000082   373 G$DPL$0$0 == 0x0082
                           000082   374 _DPL	=	0x0082
                           000083   375 G$DPH$0$0 == 0x0083
                           000083   376 _DPH	=	0x0083
                           000084   377 G$P4$0$0 == 0x0084
                           000084   378 _P4	=	0x0084
                           000085   379 G$P5$0$0 == 0x0085
                           000085   380 _P5	=	0x0085
                           000086   381 G$P6$0$0 == 0x0086
                           000086   382 _P6	=	0x0086
                           000087   383 G$PCON$0$0 == 0x0087
                           000087   384 _PCON	=	0x0087
                           000088   385 G$TCON$0$0 == 0x0088
                           000088   386 _TCON	=	0x0088
                           000089   387 G$TMOD$0$0 == 0x0089
                           000089   388 _TMOD	=	0x0089
                           00008A   389 G$TL0$0$0 == 0x008a
                           00008A   390 _TL0	=	0x008a
                           00008B   391 G$TL1$0$0 == 0x008b
                           00008B   392 _TL1	=	0x008b
                           00008C   393 G$TH0$0$0 == 0x008c
                           00008C   394 _TH0	=	0x008c
                           00008D   395 G$TH1$0$0 == 0x008d
                           00008D   396 _TH1	=	0x008d
                           00008E   397 G$CKCON$0$0 == 0x008e
                           00008E   398 _CKCON	=	0x008e
                           00008F   399 G$PSCTL$0$0 == 0x008f
                           00008F   400 _PSCTL	=	0x008f
                           000090   401 G$P1$0$0 == 0x0090
                           000090   402 _P1	=	0x0090
                           000091   403 G$TMR3CN$0$0 == 0x0091
                           000091   404 _TMR3CN	=	0x0091
                           000092   405 G$TMR3RLL$0$0 == 0x0092
                           000092   406 _TMR3RLL	=	0x0092
                           000093   407 G$TMR3RLH$0$0 == 0x0093
                           000093   408 _TMR3RLH	=	0x0093
                           000094   409 G$TMR3L$0$0 == 0x0094
                           000094   410 _TMR3L	=	0x0094
                           000095   411 G$TMR3H$0$0 == 0x0095
                           000095   412 _TMR3H	=	0x0095
                           000096   413 G$P7$0$0 == 0x0096
                           000096   414 _P7	=	0x0096
                           000098   415 G$SCON$0$0 == 0x0098
                           000098   416 _SCON	=	0x0098
                           000098   417 G$SCON0$0$0 == 0x0098
                           000098   418 _SCON0	=	0x0098
                           000099   419 G$SBUF$0$0 == 0x0099
                           000099   420 _SBUF	=	0x0099
                           000099   421 G$SBUF0$0$0 == 0x0099
                           000099   422 _SBUF0	=	0x0099
                           00009A   423 G$SPI0CFG$0$0 == 0x009a
                           00009A   424 _SPI0CFG	=	0x009a
                           00009B   425 G$SPI0DAT$0$0 == 0x009b
                           00009B   426 _SPI0DAT	=	0x009b
                           00009C   427 G$ADC1$0$0 == 0x009c
                           00009C   428 _ADC1	=	0x009c
                           00009D   429 G$SPI0CKR$0$0 == 0x009d
                           00009D   430 _SPI0CKR	=	0x009d
                           00009E   431 G$CPT0CN$0$0 == 0x009e
                           00009E   432 _CPT0CN	=	0x009e
                           00009F   433 G$CPT1CN$0$0 == 0x009f
                           00009F   434 _CPT1CN	=	0x009f
                           0000A0   435 G$P2$0$0 == 0x00a0
                           0000A0   436 _P2	=	0x00a0
                           0000A1   437 G$EMI0TC$0$0 == 0x00a1
                           0000A1   438 _EMI0TC	=	0x00a1
                           0000A3   439 G$EMI0CF$0$0 == 0x00a3
                           0000A3   440 _EMI0CF	=	0x00a3
                           0000A4   441 G$PRT0CF$0$0 == 0x00a4
                           0000A4   442 _PRT0CF	=	0x00a4
                           0000A4   443 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   444 _P0MDOUT	=	0x00a4
                           0000A5   445 G$PRT1CF$0$0 == 0x00a5
                           0000A5   446 _PRT1CF	=	0x00a5
                           0000A5   447 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   448 _P1MDOUT	=	0x00a5
                           0000A6   449 G$PRT2CF$0$0 == 0x00a6
                           0000A6   450 _PRT2CF	=	0x00a6
                           0000A6   451 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   452 _P2MDOUT	=	0x00a6
                           0000A7   453 G$PRT3CF$0$0 == 0x00a7
                           0000A7   454 _PRT3CF	=	0x00a7
                           0000A7   455 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   456 _P3MDOUT	=	0x00a7
                           0000A8   457 G$IE$0$0 == 0x00a8
                           0000A8   458 _IE	=	0x00a8
                           0000A9   459 G$SADDR0$0$0 == 0x00a9
                           0000A9   460 _SADDR0	=	0x00a9
                           0000AA   461 G$ADC1CN$0$0 == 0x00aa
                           0000AA   462 _ADC1CN	=	0x00aa
                           0000AB   463 G$ADC1CF$0$0 == 0x00ab
                           0000AB   464 _ADC1CF	=	0x00ab
                           0000AC   465 G$AMX1SL$0$0 == 0x00ac
                           0000AC   466 _AMX1SL	=	0x00ac
                           0000AD   467 G$P3IF$0$0 == 0x00ad
                           0000AD   468 _P3IF	=	0x00ad
                           0000AE   469 G$SADEN1$0$0 == 0x00ae
                           0000AE   470 _SADEN1	=	0x00ae
                           0000AF   471 G$EMI0CN$0$0 == 0x00af
                           0000AF   472 _EMI0CN	=	0x00af
                           0000AF   473 G$_XPAGE$0$0 == 0x00af
                           0000AF   474 __XPAGE	=	0x00af
                           0000B0   475 G$P3$0$0 == 0x00b0
                           0000B0   476 _P3	=	0x00b0
                           0000B1   477 G$OSCXCN$0$0 == 0x00b1
                           0000B1   478 _OSCXCN	=	0x00b1
                           0000B2   479 G$OSCICN$0$0 == 0x00b2
                           0000B2   480 _OSCICN	=	0x00b2
                           0000B5   481 G$P74OUT$0$0 == 0x00b5
                           0000B5   482 _P74OUT	=	0x00b5
                           0000B6   483 G$FLSCL$0$0 == 0x00b6
                           0000B6   484 _FLSCL	=	0x00b6
                           0000B7   485 G$FLACL$0$0 == 0x00b7
                           0000B7   486 _FLACL	=	0x00b7
                           0000B8   487 G$IP$0$0 == 0x00b8
                           0000B8   488 _IP	=	0x00b8
                           0000B9   489 G$SADEN0$0$0 == 0x00b9
                           0000B9   490 _SADEN0	=	0x00b9
                           0000BA   491 G$AMX0CF$0$0 == 0x00ba
                           0000BA   492 _AMX0CF	=	0x00ba
                           0000BB   493 G$AMX0SL$0$0 == 0x00bb
                           0000BB   494 _AMX0SL	=	0x00bb
                           0000BC   495 G$ADC0CF$0$0 == 0x00bc
                           0000BC   496 _ADC0CF	=	0x00bc
                           0000BD   497 G$P1MDIN$0$0 == 0x00bd
                           0000BD   498 _P1MDIN	=	0x00bd
                           0000BE   499 G$ADC0L$0$0 == 0x00be
                           0000BE   500 _ADC0L	=	0x00be
                           0000BF   501 G$ADC0H$0$0 == 0x00bf
                           0000BF   502 _ADC0H	=	0x00bf
                           0000C0   503 G$SMB0CN$0$0 == 0x00c0
                           0000C0   504 _SMB0CN	=	0x00c0
                           0000C1   505 G$SMB0STA$0$0 == 0x00c1
                           0000C1   506 _SMB0STA	=	0x00c1
                           0000C2   507 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   508 _SMB0DAT	=	0x00c2
                           0000C3   509 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   510 _SMB0ADR	=	0x00c3
                           0000C4   511 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   512 _ADC0GTL	=	0x00c4
                           0000C5   513 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   514 _ADC0GTH	=	0x00c5
                           0000C6   515 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   516 _ADC0LTL	=	0x00c6
                           0000C7   517 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   518 _ADC0LTH	=	0x00c7
                           0000C8   519 G$T2CON$0$0 == 0x00c8
                           0000C8   520 _T2CON	=	0x00c8
                           0000C9   521 G$T4CON$0$0 == 0x00c9
                           0000C9   522 _T4CON	=	0x00c9
                           0000CA   523 G$RCAP2L$0$0 == 0x00ca
                           0000CA   524 _RCAP2L	=	0x00ca
                           0000CB   525 G$RCAP2H$0$0 == 0x00cb
                           0000CB   526 _RCAP2H	=	0x00cb
                           0000CC   527 G$TL2$0$0 == 0x00cc
                           0000CC   528 _TL2	=	0x00cc
                           0000CD   529 G$TH2$0$0 == 0x00cd
                           0000CD   530 _TH2	=	0x00cd
                           0000CF   531 G$SMB0CR$0$0 == 0x00cf
                           0000CF   532 _SMB0CR	=	0x00cf
                           0000D0   533 G$PSW$0$0 == 0x00d0
                           0000D0   534 _PSW	=	0x00d0
                           0000D1   535 G$REF0CN$0$0 == 0x00d1
                           0000D1   536 _REF0CN	=	0x00d1
                           0000D2   537 G$DAC0L$0$0 == 0x00d2
                           0000D2   538 _DAC0L	=	0x00d2
                           0000D3   539 G$DAC0H$0$0 == 0x00d3
                           0000D3   540 _DAC0H	=	0x00d3
                           0000D4   541 G$DAC0CN$0$0 == 0x00d4
                           0000D4   542 _DAC0CN	=	0x00d4
                           0000D5   543 G$DAC1L$0$0 == 0x00d5
                           0000D5   544 _DAC1L	=	0x00d5
                           0000D6   545 G$DAC1H$0$0 == 0x00d6
                           0000D6   546 _DAC1H	=	0x00d6
                           0000D7   547 G$DAC1CN$0$0 == 0x00d7
                           0000D7   548 _DAC1CN	=	0x00d7
                           0000D8   549 G$PCA0CN$0$0 == 0x00d8
                           0000D8   550 _PCA0CN	=	0x00d8
                           0000D9   551 G$PCA0MD$0$0 == 0x00d9
                           0000D9   552 _PCA0MD	=	0x00d9
                           0000DA   553 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   554 _PCA0CPM0	=	0x00da
                           0000DB   555 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   556 _PCA0CPM1	=	0x00db
                           0000DC   557 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   558 _PCA0CPM2	=	0x00dc
                           0000DD   559 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   560 _PCA0CPM3	=	0x00dd
                           0000DE   561 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   562 _PCA0CPM4	=	0x00de
                           0000E0   563 G$ACC$0$0 == 0x00e0
                           0000E0   564 _ACC	=	0x00e0
                           0000E1   565 G$XBR0$0$0 == 0x00e1
                           0000E1   566 _XBR0	=	0x00e1
                           0000E2   567 G$XBR1$0$0 == 0x00e2
                           0000E2   568 _XBR1	=	0x00e2
                           0000E3   569 G$XBR2$0$0 == 0x00e3
                           0000E3   570 _XBR2	=	0x00e3
                           0000E4   571 G$RCAP4L$0$0 == 0x00e4
                           0000E4   572 _RCAP4L	=	0x00e4
                           0000E5   573 G$RCAP4H$0$0 == 0x00e5
                           0000E5   574 _RCAP4H	=	0x00e5
                           0000E6   575 G$EIE1$0$0 == 0x00e6
                           0000E6   576 _EIE1	=	0x00e6
                           0000E7   577 G$EIE2$0$0 == 0x00e7
                           0000E7   578 _EIE2	=	0x00e7
                           0000E8   579 G$ADC0CN$0$0 == 0x00e8
                           0000E8   580 _ADC0CN	=	0x00e8
                           0000E9   581 G$PCA0L$0$0 == 0x00e9
                           0000E9   582 _PCA0L	=	0x00e9
                           0000EA   583 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   584 _PCA0CPL0	=	0x00ea
                           0000EB   585 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   586 _PCA0CPL1	=	0x00eb
                           0000EC   587 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   588 _PCA0CPL2	=	0x00ec
                           0000ED   589 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   590 _PCA0CPL3	=	0x00ed
                           0000EE   591 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   592 _PCA0CPL4	=	0x00ee
                           0000EF   593 G$RSTSRC$0$0 == 0x00ef
                           0000EF   594 _RSTSRC	=	0x00ef
                           0000F0   595 G$B$0$0 == 0x00f0
                           0000F0   596 _B	=	0x00f0
                           0000F1   597 G$SCON1$0$0 == 0x00f1
                           0000F1   598 _SCON1	=	0x00f1
                           0000F2   599 G$SBUF1$0$0 == 0x00f2
                           0000F2   600 _SBUF1	=	0x00f2
                           0000F3   601 G$SADDR1$0$0 == 0x00f3
                           0000F3   602 _SADDR1	=	0x00f3
                           0000F4   603 G$TL4$0$0 == 0x00f4
                           0000F4   604 _TL4	=	0x00f4
                           0000F5   605 G$TH4$0$0 == 0x00f5
                           0000F5   606 _TH4	=	0x00f5
                           0000F6   607 G$EIP1$0$0 == 0x00f6
                           0000F6   608 _EIP1	=	0x00f6
                           0000F7   609 G$EIP2$0$0 == 0x00f7
                           0000F7   610 _EIP2	=	0x00f7
                           0000F8   611 G$SPI0CN$0$0 == 0x00f8
                           0000F8   612 _SPI0CN	=	0x00f8
                           0000F9   613 G$PCA0H$0$0 == 0x00f9
                           0000F9   614 _PCA0H	=	0x00f9
                           0000FA   615 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   616 _PCA0CPH0	=	0x00fa
                           0000FB   617 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   618 _PCA0CPH1	=	0x00fb
                           0000FC   619 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   620 _PCA0CPH2	=	0x00fc
                           0000FD   621 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   622 _PCA0CPH3	=	0x00fd
                           0000FE   623 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   624 _PCA0CPH4	=	0x00fe
                           0000FF   625 G$WDTCN$0$0 == 0x00ff
                           0000FF   626 _WDTCN	=	0x00ff
                           008C8A   627 G$TMR0$0$0 == 0x8c8a
                           008C8A   628 _TMR0	=	0x8c8a
                           008D8B   629 G$TMR1$0$0 == 0x8d8b
                           008D8B   630 _TMR1	=	0x8d8b
                           00CDCC   631 G$TMR2$0$0 == 0xcdcc
                           00CDCC   632 _TMR2	=	0xcdcc
                           00CBCA   633 G$RCAP2$0$0 == 0xcbca
                           00CBCA   634 _RCAP2	=	0xcbca
                           009594   635 G$TMR3$0$0 == 0x9594
                           009594   636 _TMR3	=	0x9594
                           009392   637 G$TMR3RL$0$0 == 0x9392
                           009392   638 _TMR3RL	=	0x9392
                           00F5F4   639 G$TMR4$0$0 == 0xf5f4
                           00F5F4   640 _TMR4	=	0xf5f4
                           00E5E4   641 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   642 _RCAP4	=	0xe5e4
                           00BFBE   643 G$ADC0$0$0 == 0xbfbe
                           00BFBE   644 _ADC0	=	0xbfbe
                           00C5C4   645 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   646 _ADC0GT	=	0xc5c4
                           00C7C6   647 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   648 _ADC0LT	=	0xc7c6
                           00D3D2   649 G$DAC0$0$0 == 0xd3d2
                           00D3D2   650 _DAC0	=	0xd3d2
                           00D6D5   651 G$DAC1$0$0 == 0xd6d5
                           00D6D5   652 _DAC1	=	0xd6d5
                           00F9E9   653 G$PCA0$0$0 == 0xf9e9
                           00F9E9   654 _PCA0	=	0xf9e9
                           00FAEA   655 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   656 _PCA0CP0	=	0xfaea
                           00FBEB   657 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   658 _PCA0CP1	=	0xfbeb
                           00FCEC   659 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   660 _PCA0CP2	=	0xfcec
                           00FDED   661 G$PCA0CP3$0$0 == 0xfded
                           00FDED   662 _PCA0CP3	=	0xfded
                           00FEEE   663 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   664 _PCA0CP4	=	0xfeee
                                    665 ;--------------------------------------------------------
                                    666 ; special function bits
                                    667 ;--------------------------------------------------------
                                    668 	.area RSEG    (ABS,DATA)
      000000                        669 	.org 0x0000
                           000080   670 G$P0_0$0$0 == 0x0080
                           000080   671 _P0_0	=	0x0080
                           000081   672 G$P0_1$0$0 == 0x0081
                           000081   673 _P0_1	=	0x0081
                           000082   674 G$P0_2$0$0 == 0x0082
                           000082   675 _P0_2	=	0x0082
                           000083   676 G$P0_3$0$0 == 0x0083
                           000083   677 _P0_3	=	0x0083
                           000084   678 G$P0_4$0$0 == 0x0084
                           000084   679 _P0_4	=	0x0084
                           000085   680 G$P0_5$0$0 == 0x0085
                           000085   681 _P0_5	=	0x0085
                           000086   682 G$P0_6$0$0 == 0x0086
                           000086   683 _P0_6	=	0x0086
                           000087   684 G$P0_7$0$0 == 0x0087
                           000087   685 _P0_7	=	0x0087
                           000088   686 G$IT0$0$0 == 0x0088
                           000088   687 _IT0	=	0x0088
                           000089   688 G$IE0$0$0 == 0x0089
                           000089   689 _IE0	=	0x0089
                           00008A   690 G$IT1$0$0 == 0x008a
                           00008A   691 _IT1	=	0x008a
                           00008B   692 G$IE1$0$0 == 0x008b
                           00008B   693 _IE1	=	0x008b
                           00008C   694 G$TR0$0$0 == 0x008c
                           00008C   695 _TR0	=	0x008c
                           00008D   696 G$TF0$0$0 == 0x008d
                           00008D   697 _TF0	=	0x008d
                           00008E   698 G$TR1$0$0 == 0x008e
                           00008E   699 _TR1	=	0x008e
                           00008F   700 G$TF1$0$0 == 0x008f
                           00008F   701 _TF1	=	0x008f
                           000090   702 G$P1_0$0$0 == 0x0090
                           000090   703 _P1_0	=	0x0090
                           000091   704 G$P1_1$0$0 == 0x0091
                           000091   705 _P1_1	=	0x0091
                           000092   706 G$P1_2$0$0 == 0x0092
                           000092   707 _P1_2	=	0x0092
                           000093   708 G$P1_3$0$0 == 0x0093
                           000093   709 _P1_3	=	0x0093
                           000094   710 G$P1_4$0$0 == 0x0094
                           000094   711 _P1_4	=	0x0094
                           000095   712 G$P1_5$0$0 == 0x0095
                           000095   713 _P1_5	=	0x0095
                           000096   714 G$P1_6$0$0 == 0x0096
                           000096   715 _P1_6	=	0x0096
                           000097   716 G$P1_7$0$0 == 0x0097
                           000097   717 _P1_7	=	0x0097
                           000098   718 G$RI$0$0 == 0x0098
                           000098   719 _RI	=	0x0098
                           000098   720 G$RI0$0$0 == 0x0098
                           000098   721 _RI0	=	0x0098
                           000099   722 G$TI$0$0 == 0x0099
                           000099   723 _TI	=	0x0099
                           000099   724 G$TI0$0$0 == 0x0099
                           000099   725 _TI0	=	0x0099
                           00009A   726 G$RB8$0$0 == 0x009a
                           00009A   727 _RB8	=	0x009a
                           00009A   728 G$RB80$0$0 == 0x009a
                           00009A   729 _RB80	=	0x009a
                           00009B   730 G$TB8$0$0 == 0x009b
                           00009B   731 _TB8	=	0x009b
                           00009B   732 G$TB80$0$0 == 0x009b
                           00009B   733 _TB80	=	0x009b
                           00009C   734 G$REN$0$0 == 0x009c
                           00009C   735 _REN	=	0x009c
                           00009C   736 G$REN0$0$0 == 0x009c
                           00009C   737 _REN0	=	0x009c
                           00009D   738 G$SM2$0$0 == 0x009d
                           00009D   739 _SM2	=	0x009d
                           00009D   740 G$SM20$0$0 == 0x009d
                           00009D   741 _SM20	=	0x009d
                           00009D   742 G$MCE0$0$0 == 0x009d
                           00009D   743 _MCE0	=	0x009d
                           00009E   744 G$SM1$0$0 == 0x009e
                           00009E   745 _SM1	=	0x009e
                           00009E   746 G$SM10$0$0 == 0x009e
                           00009E   747 _SM10	=	0x009e
                           00009F   748 G$SM0$0$0 == 0x009f
                           00009F   749 _SM0	=	0x009f
                           00009F   750 G$SM00$0$0 == 0x009f
                           00009F   751 _SM00	=	0x009f
                           00009F   752 G$S0MODE$0$0 == 0x009f
                           00009F   753 _S0MODE	=	0x009f
                           0000A0   754 G$P2_0$0$0 == 0x00a0
                           0000A0   755 _P2_0	=	0x00a0
                           0000A1   756 G$P2_1$0$0 == 0x00a1
                           0000A1   757 _P2_1	=	0x00a1
                           0000A2   758 G$P2_2$0$0 == 0x00a2
                           0000A2   759 _P2_2	=	0x00a2
                           0000A3   760 G$P2_3$0$0 == 0x00a3
                           0000A3   761 _P2_3	=	0x00a3
                           0000A4   762 G$P2_4$0$0 == 0x00a4
                           0000A4   763 _P2_4	=	0x00a4
                           0000A5   764 G$P2_5$0$0 == 0x00a5
                           0000A5   765 _P2_5	=	0x00a5
                           0000A6   766 G$P2_6$0$0 == 0x00a6
                           0000A6   767 _P2_6	=	0x00a6
                           0000A7   768 G$P2_7$0$0 == 0x00a7
                           0000A7   769 _P2_7	=	0x00a7
                           0000A8   770 G$EX0$0$0 == 0x00a8
                           0000A8   771 _EX0	=	0x00a8
                           0000A9   772 G$ET0$0$0 == 0x00a9
                           0000A9   773 _ET0	=	0x00a9
                           0000AA   774 G$EX1$0$0 == 0x00aa
                           0000AA   775 _EX1	=	0x00aa
                           0000AB   776 G$ET1$0$0 == 0x00ab
                           0000AB   777 _ET1	=	0x00ab
                           0000AC   778 G$ES0$0$0 == 0x00ac
                           0000AC   779 _ES0	=	0x00ac
                           0000AC   780 G$ES$0$0 == 0x00ac
                           0000AC   781 _ES	=	0x00ac
                           0000AD   782 G$ET2$0$0 == 0x00ad
                           0000AD   783 _ET2	=	0x00ad
                           0000AF   784 G$EA$0$0 == 0x00af
                           0000AF   785 _EA	=	0x00af
                           0000B0   786 G$P3_0$0$0 == 0x00b0
                           0000B0   787 _P3_0	=	0x00b0
                           0000B1   788 G$P3_1$0$0 == 0x00b1
                           0000B1   789 _P3_1	=	0x00b1
                           0000B2   790 G$P3_2$0$0 == 0x00b2
                           0000B2   791 _P3_2	=	0x00b2
                           0000B3   792 G$P3_3$0$0 == 0x00b3
                           0000B3   793 _P3_3	=	0x00b3
                           0000B4   794 G$P3_4$0$0 == 0x00b4
                           0000B4   795 _P3_4	=	0x00b4
                           0000B5   796 G$P3_5$0$0 == 0x00b5
                           0000B5   797 _P3_5	=	0x00b5
                           0000B6   798 G$P3_6$0$0 == 0x00b6
                           0000B6   799 _P3_6	=	0x00b6
                           0000B7   800 G$P3_7$0$0 == 0x00b7
                           0000B7   801 _P3_7	=	0x00b7
                           0000B8   802 G$PX0$0$0 == 0x00b8
                           0000B8   803 _PX0	=	0x00b8
                           0000B9   804 G$PT0$0$0 == 0x00b9
                           0000B9   805 _PT0	=	0x00b9
                           0000BA   806 G$PX1$0$0 == 0x00ba
                           0000BA   807 _PX1	=	0x00ba
                           0000BB   808 G$PT1$0$0 == 0x00bb
                           0000BB   809 _PT1	=	0x00bb
                           0000BC   810 G$PS0$0$0 == 0x00bc
                           0000BC   811 _PS0	=	0x00bc
                           0000BC   812 G$PS$0$0 == 0x00bc
                           0000BC   813 _PS	=	0x00bc
                           0000BD   814 G$PT2$0$0 == 0x00bd
                           0000BD   815 _PT2	=	0x00bd
                           0000C0   816 G$SMBTOE$0$0 == 0x00c0
                           0000C0   817 _SMBTOE	=	0x00c0
                           0000C1   818 G$SMBFTE$0$0 == 0x00c1
                           0000C1   819 _SMBFTE	=	0x00c1
                           0000C2   820 G$AA$0$0 == 0x00c2
                           0000C2   821 _AA	=	0x00c2
                           0000C3   822 G$SI$0$0 == 0x00c3
                           0000C3   823 _SI	=	0x00c3
                           0000C4   824 G$STO$0$0 == 0x00c4
                           0000C4   825 _STO	=	0x00c4
                           0000C5   826 G$STA$0$0 == 0x00c5
                           0000C5   827 _STA	=	0x00c5
                           0000C6   828 G$ENSMB$0$0 == 0x00c6
                           0000C6   829 _ENSMB	=	0x00c6
                           0000C7   830 G$BUSY$0$0 == 0x00c7
                           0000C7   831 _BUSY	=	0x00c7
                           0000C8   832 G$CPRL2$0$0 == 0x00c8
                           0000C8   833 _CPRL2	=	0x00c8
                           0000C9   834 G$CT2$0$0 == 0x00c9
                           0000C9   835 _CT2	=	0x00c9
                           0000CA   836 G$TR2$0$0 == 0x00ca
                           0000CA   837 _TR2	=	0x00ca
                           0000CB   838 G$EXEN2$0$0 == 0x00cb
                           0000CB   839 _EXEN2	=	0x00cb
                           0000CC   840 G$TCLK$0$0 == 0x00cc
                           0000CC   841 _TCLK	=	0x00cc
                           0000CD   842 G$RCLK$0$0 == 0x00cd
                           0000CD   843 _RCLK	=	0x00cd
                           0000CE   844 G$EXF2$0$0 == 0x00ce
                           0000CE   845 _EXF2	=	0x00ce
                           0000CF   846 G$TF2$0$0 == 0x00cf
                           0000CF   847 _TF2	=	0x00cf
                           0000D0   848 G$P$0$0 == 0x00d0
                           0000D0   849 _P	=	0x00d0
                           0000D1   850 G$F1$0$0 == 0x00d1
                           0000D1   851 _F1	=	0x00d1
                           0000D2   852 G$OV$0$0 == 0x00d2
                           0000D2   853 _OV	=	0x00d2
                           0000D3   854 G$RS0$0$0 == 0x00d3
                           0000D3   855 _RS0	=	0x00d3
                           0000D4   856 G$RS1$0$0 == 0x00d4
                           0000D4   857 _RS1	=	0x00d4
                           0000D5   858 G$F0$0$0 == 0x00d5
                           0000D5   859 _F0	=	0x00d5
                           0000D6   860 G$AC$0$0 == 0x00d6
                           0000D6   861 _AC	=	0x00d6
                           0000D7   862 G$CY$0$0 == 0x00d7
                           0000D7   863 _CY	=	0x00d7
                           0000D8   864 G$CCF0$0$0 == 0x00d8
                           0000D8   865 _CCF0	=	0x00d8
                           0000D9   866 G$CCF1$0$0 == 0x00d9
                           0000D9   867 _CCF1	=	0x00d9
                           0000DA   868 G$CCF2$0$0 == 0x00da
                           0000DA   869 _CCF2	=	0x00da
                           0000DB   870 G$CCF3$0$0 == 0x00db
                           0000DB   871 _CCF3	=	0x00db
                           0000DC   872 G$CCF4$0$0 == 0x00dc
                           0000DC   873 _CCF4	=	0x00dc
                           0000DE   874 G$CR$0$0 == 0x00de
                           0000DE   875 _CR	=	0x00de
                           0000DF   876 G$CF$0$0 == 0x00df
                           0000DF   877 _CF	=	0x00df
                           0000E8   878 G$ADLJST$0$0 == 0x00e8
                           0000E8   879 _ADLJST	=	0x00e8
                           0000E8   880 G$AD0LJST$0$0 == 0x00e8
                           0000E8   881 _AD0LJST	=	0x00e8
                           0000E9   882 G$ADWINT$0$0 == 0x00e9
                           0000E9   883 _ADWINT	=	0x00e9
                           0000E9   884 G$AD0WINT$0$0 == 0x00e9
                           0000E9   885 _AD0WINT	=	0x00e9
                           0000EA   886 G$ADSTM0$0$0 == 0x00ea
                           0000EA   887 _ADSTM0	=	0x00ea
                           0000EA   888 G$AD0CM0$0$0 == 0x00ea
                           0000EA   889 _AD0CM0	=	0x00ea
                           0000EB   890 G$ADSTM1$0$0 == 0x00eb
                           0000EB   891 _ADSTM1	=	0x00eb
                           0000EB   892 G$AD0CM1$0$0 == 0x00eb
                           0000EB   893 _AD0CM1	=	0x00eb
                           0000EC   894 G$ADBUSY$0$0 == 0x00ec
                           0000EC   895 _ADBUSY	=	0x00ec
                           0000EC   896 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   897 _AD0BUSY	=	0x00ec
                           0000ED   898 G$ADCINT$0$0 == 0x00ed
                           0000ED   899 _ADCINT	=	0x00ed
                           0000ED   900 G$AD0INT$0$0 == 0x00ed
                           0000ED   901 _AD0INT	=	0x00ed
                           0000EE   902 G$ADCTM$0$0 == 0x00ee
                           0000EE   903 _ADCTM	=	0x00ee
                           0000EE   904 G$AD0TM$0$0 == 0x00ee
                           0000EE   905 _AD0TM	=	0x00ee
                           0000EF   906 G$ADCEN$0$0 == 0x00ef
                           0000EF   907 _ADCEN	=	0x00ef
                           0000EF   908 G$AD0EN$0$0 == 0x00ef
                           0000EF   909 _AD0EN	=	0x00ef
                           0000F8   910 G$SPIEN$0$0 == 0x00f8
                           0000F8   911 _SPIEN	=	0x00f8
                           0000F9   912 G$MSTEN$0$0 == 0x00f9
                           0000F9   913 _MSTEN	=	0x00f9
                           0000FA   914 G$SLVSEL$0$0 == 0x00fa
                           0000FA   915 _SLVSEL	=	0x00fa
                           0000FB   916 G$TXBSY$0$0 == 0x00fb
                           0000FB   917 _TXBSY	=	0x00fb
                           0000FC   918 G$RXOVRN$0$0 == 0x00fc
                           0000FC   919 _RXOVRN	=	0x00fc
                           0000FD   920 G$MODF$0$0 == 0x00fd
                           0000FD   921 _MODF	=	0x00fd
                           0000FE   922 G$WCOL$0$0 == 0x00fe
                           0000FE   923 _WCOL	=	0x00fe
                           0000FF   924 G$SPIF$0$0 == 0x00ff
                           0000FF   925 _SPIF	=	0x00ff
                           0000C7   926 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   927 _BUS_BUSY	=	0x00c7
                           0000C6   928 G$BUS_EN$0$0 == 0x00c6
                           0000C6   929 _BUS_EN	=	0x00c6
                           0000C5   930 G$BUS_START$0$0 == 0x00c5
                           0000C5   931 _BUS_START	=	0x00c5
                           0000C4   932 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   933 _BUS_STOP	=	0x00c4
                           0000C3   934 G$BUS_INT$0$0 == 0x00c3
                           0000C3   935 _BUS_INT	=	0x00c3
                           0000C2   936 G$BUS_AA$0$0 == 0x00c2
                           0000C2   937 _BUS_AA	=	0x00c2
                           0000C1   938 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   939 _BUS_FTE	=	0x00c1
                           0000C0   940 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   941 _BUS_TOE	=	0x00c0
                           000083   942 G$BUS_SCL$0$0 == 0x0083
                           000083   943 _BUS_SCL	=	0x0083
                           0000B7   944 G$mSS$0$0 == 0x00b7
                           0000B7   945 _mSS	=	0x00b7
                           000094   946 G$LED$0$0 == 0x0094
                           000094   947 _LED	=	0x0094
                                    948 ;--------------------------------------------------------
                                    949 ; overlayable register banks
                                    950 ;--------------------------------------------------------
                                    951 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        952 	.ds 8
                                    953 ;--------------------------------------------------------
                                    954 ; internal ram data
                                    955 ;--------------------------------------------------------
                                    956 	.area DSEG    (DATA)
                           000000   957 G$Data2$0$0==.
      000000                        958 _Data2::
      000000                        959 	.ds 3
                           000003   960 Llab3_3k.aligned_alloc$size$1$39==.
      000003                        961 _aligned_alloc_PARM_2:
      000003                        962 	.ds 2
                           000005   963 Llab3_3k.lcd_clear$NumBytes$1$85==.
      000005                        964 _lcd_clear_NumBytes_1_85:
      000005                        965 	.ds 1
                           000006   966 Llab3_3k.lcd_clear$Cmd$1$85==.
      000006                        967 _lcd_clear_Cmd_1_85:
      000006                        968 	.ds 2
                           000008   969 Llab3_3k.read_keypad$Data$1$86==.
      000008                        970 _read_keypad_Data_1_86:
      000008                        971 	.ds 2
                           00000A   972 Llab3_3k.i2c_write_data$start_reg$1$105==.
      00000A                        973 _i2c_write_data_PARM_2:
      00000A                        974 	.ds 1
                           00000B   975 Llab3_3k.i2c_write_data$buffer$1$105==.
      00000B                        976 _i2c_write_data_PARM_3:
      00000B                        977 	.ds 3
                           00000E   978 Llab3_3k.i2c_write_data$num_bytes$1$105==.
      00000E                        979 _i2c_write_data_PARM_4:
      00000E                        980 	.ds 1
                           00000F   981 Llab3_3k.i2c_read_data$start_reg$1$107==.
      00000F                        982 _i2c_read_data_PARM_2:
      00000F                        983 	.ds 1
                           000010   984 Llab3_3k.i2c_read_data$buffer$1$107==.
      000010                        985 _i2c_read_data_PARM_3:
      000010                        986 	.ds 3
                           000013   987 Llab3_3k.i2c_read_data$num_bytes$1$107==.
      000013                        988 _i2c_read_data_PARM_4:
      000013                        989 	.ds 1
                           000014   990 G$Counts$0$0==.
      000014                        991 _Counts::
      000014                        992 	.ds 2
                           000016   993 G$sPW$0$0==.
      000016                        994 _sPW::
      000016                        995 	.ds 2
                           000018   996 G$mPW$0$0==.
      000018                        997 _mPW::
      000018                        998 	.ds 2
                           00001A   999 G$dist$0$0==.
      00001A                       1000 _dist::
      00001A                       1001 	.ds 1
                           00001B  1002 G$r_Data$0$0==.
      00001B                       1003 _r_Data::
      00001B                       1004 	.ds 2
                           00001D  1005 G$range$0$0==.
      00001D                       1006 _range::
      00001D                       1007 	.ds 2
                           00001F  1008 G$r_addr$0$0==.
      00001F                       1009 _r_addr::
      00001F                       1010 	.ds 1
                           000020  1011 G$r_Counts$0$0==.
      000020                       1012 _r_Counts::
      000020                       1013 	.ds 1
                           000021  1014 G$new_range$0$0==.
      000021                       1015 _new_range::
      000021                       1016 	.ds 1
                           000022  1017 G$c_addr$0$0==.
      000022                       1018 _c_addr::
      000022                       1019 	.ds 1
                           000023  1020 G$c_Data$0$0==.
      000023                       1021 _c_Data::
      000023                       1022 	.ds 2
                           000025  1023 G$heading$0$0==.
      000025                       1024 _heading::
      000025                       1025 	.ds 2
                           000027  1026 G$h_Counts$0$0==.
      000027                       1027 _h_Counts::
      000027                       1028 	.ds 1
                           000028  1029 G$new_heading$0$0==.
      000028                       1030 _new_heading::
      000028                       1031 	.ds 1
                           000029  1032 G$desired_heading$0$0==.
      000029                       1033 _desired_heading::
      000029                       1034 	.ds 2
                           00002B  1035 G$error$0$0==.
      00002B                       1036 _error::
      00002B                       1037 	.ds 2
                                   1038 ;--------------------------------------------------------
                                   1039 ; overlayable items in internal ram 
                                   1040 ;--------------------------------------------------------
                                   1041 	.area	OSEG    (OVR,DATA)
                                   1042 	.area	OSEG    (OVR,DATA)
                                   1043 	.area	OSEG    (OVR,DATA)
                                   1044 	.area	OSEG    (OVR,DATA)
                                   1045 	.area	OSEG    (OVR,DATA)
                                   1046 	.area	OSEG    (OVR,DATA)
                                   1047 	.area	OSEG    (OVR,DATA)
                                   1048 ;--------------------------------------------------------
                                   1049 ; Stack segment in internal ram 
                                   1050 ;--------------------------------------------------------
                                   1051 	.area	SSEG
      000000                       1052 __start__stack:
      000000                       1053 	.ds	1
                                   1054 
                                   1055 ;--------------------------------------------------------
                                   1056 ; indirectly addressable internal ram data
                                   1057 ;--------------------------------------------------------
                                   1058 	.area ISEG    (DATA)
                                   1059 ;--------------------------------------------------------
                                   1060 ; absolute internal ram data
                                   1061 ;--------------------------------------------------------
                                   1062 	.area IABS    (ABS,DATA)
                                   1063 	.area IABS    (ABS,DATA)
                                   1064 ;--------------------------------------------------------
                                   1065 ; bit data
                                   1066 ;--------------------------------------------------------
                                   1067 	.area BSEG    (BIT)
                                   1068 ;--------------------------------------------------------
                                   1069 ; paged external ram data
                                   1070 ;--------------------------------------------------------
                                   1071 	.area PSEG    (PAG,XDATA)
                                   1072 ;--------------------------------------------------------
                                   1073 ; external ram data
                                   1074 ;--------------------------------------------------------
                                   1075 	.area XSEG    (XDATA)
                           000000  1076 Llab3_3k.lcd_print$text$1$81==.
      000000                       1077 _lcd_print_text_1_81:
      000000                       1078 	.ds 80
                                   1079 ;--------------------------------------------------------
                                   1080 ; absolute external ram data
                                   1081 ;--------------------------------------------------------
                                   1082 	.area XABS    (ABS,XDATA)
                                   1083 ;--------------------------------------------------------
                                   1084 ; external initialized ram data
                                   1085 ;--------------------------------------------------------
                                   1086 	.area XISEG   (XDATA)
                           000000  1087 G$sPW_CENTER$0$0==.
      000000                       1088 _sPW_CENTER::
      000000                       1089 	.ds 2
                           000002  1090 G$sPW_MIN$0$0==.
      000002                       1091 _sPW_MIN::
      000002                       1092 	.ds 2
                           000004  1093 G$sPW_MAX$0$0==.
      000004                       1094 _sPW_MAX::
      000004                       1095 	.ds 2
                           000006  1096 G$mPW_CENTER$0$0==.
      000006                       1097 _mPW_CENTER::
      000006                       1098 	.ds 2
                           000008  1099 G$mPW_MIN$0$0==.
      000008                       1100 _mPW_MIN::
      000008                       1101 	.ds 2
                           00000A  1102 G$mPW_MAX$0$0==.
      00000A                       1103 _mPW_MAX::
      00000A                       1104 	.ds 2
                                   1105 	.area HOME    (CODE)
                                   1106 	.area GSINIT0 (CODE)
                                   1107 	.area GSINIT1 (CODE)
                                   1108 	.area GSINIT2 (CODE)
                                   1109 	.area GSINIT3 (CODE)
                                   1110 	.area GSINIT4 (CODE)
                                   1111 	.area GSINIT5 (CODE)
                                   1112 	.area GSINIT  (CODE)
                                   1113 	.area GSFINAL (CODE)
                                   1114 	.area CSEG    (CODE)
                                   1115 ;--------------------------------------------------------
                                   1116 ; interrupt vector 
                                   1117 ;--------------------------------------------------------
                                   1118 	.area HOME    (CODE)
      000000                       1119 __interrupt_vect:
      000000 02r00r00         [24] 1120 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1121 	reti
      000004                       1122 	.ds	7
      00000B 32               [24] 1123 	reti
      00000C                       1124 	.ds	7
      000013 32               [24] 1125 	reti
      000014                       1126 	.ds	7
      00001B 32               [24] 1127 	reti
      00001C                       1128 	.ds	7
      000023 32               [24] 1129 	reti
      000024                       1130 	.ds	7
      00002B 32               [24] 1131 	reti
      00002C                       1132 	.ds	7
      000033 32               [24] 1133 	reti
      000034                       1134 	.ds	7
      00003B 32               [24] 1135 	reti
      00003C                       1136 	.ds	7
      000043 32               [24] 1137 	reti
      000044                       1138 	.ds	7
      00004B 02r05rFD         [24] 1139 	ljmp	_PCA_ISR
                                   1140 ;--------------------------------------------------------
                                   1141 ; global & static initialisations
                                   1142 ;--------------------------------------------------------
                                   1143 	.area HOME    (CODE)
                                   1144 	.area GSINIT  (CODE)
                                   1145 	.area GSFINAL (CODE)
                                   1146 	.area GSINIT  (CODE)
                                   1147 	.globl __sdcc_gsinit_startup
                                   1148 	.globl __sdcc_program_startup
                                   1149 	.globl __start__stack
                                   1150 	.globl __mcs51_genXINIT
                                   1151 	.globl __mcs51_genXRAMCLEAR
                                   1152 	.globl __mcs51_genRAMCLEAR
                           000000  1153 	C$lab3_3k.c$29$1$166 ==.
                                   1154 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:29: unsigned int sPW = 0;
      000000 E4               [12] 1155 	clr	a
      000001 F5*16            [12] 1156 	mov	_sPW,a
      000003 F5*17            [12] 1157 	mov	(_sPW + 1),a
                           000005  1158 	C$lab3_3k.c$34$1$166 ==.
                                   1159 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:34: unsigned int mPW = 0;
      000005 F5*18            [12] 1160 	mov	_mPW,a
      000007 F5*19            [12] 1161 	mov	(_mPW + 1),a
                           000009  1162 	C$lab3_3k.c$43$1$166 ==.
                                   1163 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:43: unsigned int range = 0;
      000009 F5*1D            [12] 1164 	mov	_range,a
      00000B F5*1E            [12] 1165 	mov	(_range + 1),a
                           00000D  1166 	C$lab3_3k.c$44$1$166 ==.
                                   1167 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:44: unsigned char r_addr = 0xE0; // the address of the ranger
      00000D 75*1F E0         [24] 1168 	mov	_r_addr,#0xe0
                           000010  1169 	C$lab3_3k.c$45$1$166 ==.
                                   1170 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:45: unsigned char r_Counts=0;
                                   1171 ;	1-genFromRTrack replaced	mov	_r_Counts,#0x00
      000010 F5*20            [12] 1172 	mov	_r_Counts,a
                           000012  1173 	C$lab3_3k.c$46$1$166 ==.
                                   1174 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:46: unsigned char new_range = 0;
                                   1175 ;	1-genFromRTrack replaced	mov	_new_range,#0x00
      000012 F5*21            [12] 1176 	mov	_new_range,a
                           000014  1177 	C$lab3_3k.c$48$1$166 ==.
                                   1178 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:48: unsigned char c_addr = 0xC0;
      000014 75*22 C0         [24] 1179 	mov	_c_addr,#0xc0
                           000017  1180 	C$lab3_3k.c$51$1$166 ==.
                                   1181 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:51: unsigned char h_Counts = 0;
                                   1182 ;	1-genFromRTrack replaced	mov	_h_Counts,#0x00
      000017 F5*27            [12] 1183 	mov	_h_Counts,a
                           000019  1184 	C$lab3_3k.c$52$1$166 ==.
                                   1185 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:52: unsigned char new_heading =0;
                                   1186 ;	1-genFromRTrack replaced	mov	_new_heading,#0x00
      000019 F5*28            [12] 1187 	mov	_new_heading,a
                           00001B  1188 	C$lab3_3k.c$53$1$166 ==.
                                   1189 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:53: unsigned int desired_heading = 900;
      00001B 75*29 84         [24] 1190 	mov	_desired_heading,#0x84
      00001E 75*2A 03         [24] 1191 	mov	(_desired_heading + 1),#0x03
                                   1192 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1193 	ljmp	__sdcc_program_startup
                                   1194 ;--------------------------------------------------------
                                   1195 ; Home
                                   1196 ;--------------------------------------------------------
                                   1197 	.area HOME    (CODE)
                                   1198 	.area HOME    (CODE)
      00004E                       1199 __sdcc_program_startup:
      00004E 02r05r06         [24] 1200 	ljmp	_main
                                   1201 ;	return from main will return to caller
                                   1202 ;--------------------------------------------------------
                                   1203 ; code
                                   1204 ;--------------------------------------------------------
                                   1205 	.area CSEG    (CODE)
                                   1206 ;------------------------------------------------------------
                                   1207 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1208 ;------------------------------------------------------------
                                   1209 ;i                         Allocated to registers r6 r7 
                                   1210 ;------------------------------------------------------------
                           000000  1211 	G$SYSCLK_Init$0$0 ==.
                           000000  1212 	C$c8051_SDCC.h$62$0$0 ==.
                                   1213 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1214 ;	-----------------------------------------
                                   1215 ;	 function SYSCLK_Init
                                   1216 ;	-----------------------------------------
      000000                       1217 _SYSCLK_Init:
                           000007  1218 	ar7 = 0x07
                           000006  1219 	ar6 = 0x06
                           000005  1220 	ar5 = 0x05
                           000004  1221 	ar4 = 0x04
                           000003  1222 	ar3 = 0x03
                           000002  1223 	ar2 = 0x02
                           000001  1224 	ar1 = 0x01
                           000000  1225 	ar0 = 0x00
                           000000  1226 	C$c8051_SDCC.h$66$1$2 ==.
                                   1227 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1228 	mov	_OSCXCN,#0x67
                           000003  1229 	C$c8051_SDCC.h$69$1$2 ==.
                                   1230 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1231 	mov	r6,#0x00
      000005 7F 01            [12] 1232 	mov	r7,#0x01
      000007                       1233 00107$:
      000007 EE               [12] 1234 	mov	a,r6
      000008 24 FF            [12] 1235 	add	a,#0xff
      00000A FC               [12] 1236 	mov	r4,a
      00000B EF               [12] 1237 	mov	a,r7
      00000C 34 FF            [12] 1238 	addc	a,#0xff
      00000E FD               [12] 1239 	mov	r5,a
      00000F 8C 06            [24] 1240 	mov	ar6,r4
      000011 8D 07            [24] 1241 	mov	ar7,r5
      000013 EC               [12] 1242 	mov	a,r4
      000014 4D               [12] 1243 	orl	a,r5
      000015 70 F0            [24] 1244 	jnz	00107$
                           000017  1245 	C$c8051_SDCC.h$71$1$2 ==.
                                   1246 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1247 00102$:
      000017 E5 B1            [12] 1248 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1249 	jnb	acc.7,00102$
                           00001C  1250 	C$c8051_SDCC.h$73$1$2 ==.
                                   1251 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1252 	mov	_OSCICN,#0x88
                           00001F  1253 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1254 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1255 	ret
                                   1256 ;------------------------------------------------------------
                                   1257 ;Allocation info for local variables in function 'UART0_Init'
                                   1258 ;------------------------------------------------------------
                           000020  1259 	G$UART0_Init$0$0 ==.
                           000020  1260 	C$c8051_SDCC.h$84$1$2 ==.
                                   1261 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1262 ;	-----------------------------------------
                                   1263 ;	 function UART0_Init
                                   1264 ;	-----------------------------------------
      000020                       1265 _UART0_Init:
                           000020  1266 	C$c8051_SDCC.h$86$1$4 ==.
                                   1267 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1268 	mov	_SCON0,#0x50
                           000023  1269 	C$c8051_SDCC.h$87$1$4 ==.
                                   1270 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1271 	mov	_TMOD,#0x20
                           000026  1272 	C$c8051_SDCC.h$88$1$4 ==.
                                   1273 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1274 	mov	_TH1,#0xdc
                           000029  1275 	C$c8051_SDCC.h$89$1$4 ==.
                                   1276 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1277 	setb	_TR1
                           00002B  1278 	C$c8051_SDCC.h$90$1$4 ==.
                                   1279 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1280 	orl	_CKCON,#0x10
                           00002E  1281 	C$c8051_SDCC.h$91$1$4 ==.
                                   1282 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1283 	orl	_PCON,#0x80
                           000031  1284 	C$c8051_SDCC.h$93$1$4 ==.
                                   1285 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1286 	setb	_TI0
                           000033  1287 	C$c8051_SDCC.h$94$1$4 ==.
                                   1288 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1289 	orl	_P0MDOUT,#0x01
                           000036  1290 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1291 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1292 	ret
                                   1293 ;------------------------------------------------------------
                                   1294 ;Allocation info for local variables in function 'Sys_Init'
                                   1295 ;------------------------------------------------------------
                           000037  1296 	G$Sys_Init$0$0 ==.
                           000037  1297 	C$c8051_SDCC.h$103$1$4 ==.
                                   1298 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1299 ;	-----------------------------------------
                                   1300 ;	 function Sys_Init
                                   1301 ;	-----------------------------------------
      000037                       1302 _Sys_Init:
                           000037  1303 	C$c8051_SDCC.h$105$1$6 ==.
                                   1304 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1305 	mov	_WDTCN,#0xde
                           00003A  1306 	C$c8051_SDCC.h$106$1$6 ==.
                                   1307 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1308 	mov	_WDTCN,#0xad
                           00003D  1309 	C$c8051_SDCC.h$108$1$6 ==.
                                   1310 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1311 	lcall	_SYSCLK_Init
                           000040  1312 	C$c8051_SDCC.h$109$1$6 ==.
                                   1313 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1314 	lcall	_UART0_Init
                           000043  1315 	C$c8051_SDCC.h$111$1$6 ==.
                                   1316 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1317 	orl	_XBR0,#0x04
                           000046  1318 	C$c8051_SDCC.h$112$1$6 ==.
                                   1319 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1320 	orl	_XBR2,#0x40
                           000049  1321 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1322 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1323 	ret
                                   1324 ;------------------------------------------------------------
                                   1325 ;Allocation info for local variables in function 'putchar'
                                   1326 ;------------------------------------------------------------
                                   1327 ;c                         Allocated to registers r7 
                                   1328 ;------------------------------------------------------------
                           00004A  1329 	G$putchar$0$0 ==.
                           00004A  1330 	C$c8051_SDCC.h$129$1$6 ==.
                                   1331 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1332 ;	-----------------------------------------
                                   1333 ;	 function putchar
                                   1334 ;	-----------------------------------------
      00004A                       1335 _putchar:
      00004A AF 82            [24] 1336 	mov	r7,dpl
                           00004C  1337 	C$c8051_SDCC.h$132$1$8 ==.
                                   1338 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1339 00101$:
                           00004C  1340 	C$c8051_SDCC.h$133$1$8 ==.
                                   1341 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1342 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1343 	sjmp	00101$
      000051                       1344 00112$:
                           000051  1345 	C$c8051_SDCC.h$134$1$8 ==.
                                   1346 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1347 	mov	_SBUF0,r7
                           000053  1348 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1349 	XG$putchar$0$0 ==.
      000053 22               [24] 1350 	ret
                                   1351 ;------------------------------------------------------------
                                   1352 ;Allocation info for local variables in function 'getchar'
                                   1353 ;------------------------------------------------------------
                                   1354 ;c                         Allocated to registers r7 
                                   1355 ;------------------------------------------------------------
                           000054  1356 	G$getchar$0$0 ==.
                           000054  1357 	C$c8051_SDCC.h$154$1$8 ==.
                                   1358 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1359 ;	-----------------------------------------
                                   1360 ;	 function getchar
                                   1361 ;	-----------------------------------------
      000054                       1362 _getchar:
                           000054  1363 	C$c8051_SDCC.h$157$1$10 ==.
                                   1364 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1365 00101$:
                           000054  1366 	C$c8051_SDCC.h$158$1$10 ==.
                                   1367 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1368 	jbc	_RI0,00112$
      000057 80 FB            [24] 1369 	sjmp	00101$
      000059                       1370 00112$:
                           000059  1371 	C$c8051_SDCC.h$159$1$10 ==.
                                   1372 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1373 	mov	r7,_SBUF0
                           00005B  1374 	C$c8051_SDCC.h$160$1$10 ==.
                                   1375 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1376 	mov	dpl,r7
      00005D C0 07            [24] 1377 	push	ar7
      00005F 12r00r4A         [24] 1378 	lcall	_putchar
      000062 D0 07            [24] 1379 	pop	ar7
                           000064  1380 	C$c8051_SDCC.h$161$1$10 ==.
                                   1381 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1382 	mov	dpl,r7
                           000066  1383 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1384 	XG$getchar$0$0 ==.
      000066 22               [24] 1385 	ret
                                   1386 ;------------------------------------------------------------
                                   1387 ;Allocation info for local variables in function 'getchar_nw'
                                   1388 ;------------------------------------------------------------
                                   1389 ;c                         Allocated to registers 
                                   1390 ;------------------------------------------------------------
                           000067  1391 	G$getchar_nw$0$0 ==.
                           000067  1392 	C$c8051_SDCC.h$168$1$10 ==.
                                   1393 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1394 ;	-----------------------------------------
                                   1395 ;	 function getchar_nw
                                   1396 ;	-----------------------------------------
      000067                       1397 _getchar_nw:
                           000067  1398 	C$c8051_SDCC.h$171$1$12 ==.
                                   1399 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1400 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1401 	mov	dpl,#0xff
      00006D 80 0B            [24] 1402 	sjmp	00104$
      00006F                       1403 00102$:
                           00006F  1404 	C$c8051_SDCC.h$174$2$13 ==.
                                   1405 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1406 	clr	_RI0
                           000071  1407 	C$c8051_SDCC.h$175$2$13 ==.
                                   1408 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1409 	mov	dpl,_SBUF0
                           000074  1410 	C$c8051_SDCC.h$176$2$13 ==.
                                   1411 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1412 	lcall	_putchar
                           000077  1413 	C$c8051_SDCC.h$177$2$13 ==.
                                   1414 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1415 	mov	dpl,_SBUF0
      00007A                       1416 00104$:
                           00007A  1417 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1418 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1419 	ret
                                   1420 ;------------------------------------------------------------
                                   1421 ;Allocation info for local variables in function 'lcd_print'
                                   1422 ;------------------------------------------------------------
                                   1423 ;fmt                       Allocated to stack - _bp -5
                                   1424 ;len                       Allocated to registers r6 
                                   1425 ;i                         Allocated to registers 
                                   1426 ;ap                        Allocated to registers 
                                   1427 ;text                      Allocated with name '_lcd_print_text_1_81'
                                   1428 ;------------------------------------------------------------
                           00007B  1429 	G$lcd_print$0$0 ==.
                           00007B  1430 	C$i2c.h$84$1$12 ==.
                                   1431 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:84: void lcd_print(const char *fmt, ...)
                                   1432 ;	-----------------------------------------
                                   1433 ;	 function lcd_print
                                   1434 ;	-----------------------------------------
      00007B                       1435 _lcd_print:
      00007B C0*00            [24] 1436 	push	_bp
      00007D 85 81*00         [24] 1437 	mov	_bp,sp
                           000080  1438 	C$i2c.h$90$1$81 ==.
                                   1439 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: if ( strlen(fmt) <= 0 ) return;         //If there is no data to print, return
      000080 E5*00            [12] 1440 	mov	a,_bp
      000082 24 FB            [12] 1441 	add	a,#0xfb
      000084 F8               [12] 1442 	mov	r0,a
      000085 86 82            [24] 1443 	mov	dpl,@r0
      000087 08               [12] 1444 	inc	r0
      000088 86 83            [24] 1445 	mov	dph,@r0
      00008A 08               [12] 1446 	inc	r0
      00008B 86 F0            [24] 1447 	mov	b,@r0
      00008D 12r00r00         [24] 1448 	lcall	_strlen
      000090 E5 82            [12] 1449 	mov	a,dpl
      000092 85 83 F0         [24] 1450 	mov	b,dph
      000095 45 F0            [12] 1451 	orl	a,b
      000097 70 02            [24] 1452 	jnz	00102$
      000099 80 62            [24] 1453 	sjmp	00109$
      00009B                       1454 00102$:
                           00009B  1455 	C$i2c.h$92$2$82 ==.
                                   1456 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:92: va_start(ap, fmt);
      00009B E5*00            [12] 1457 	mov	a,_bp
      00009D 24 FB            [12] 1458 	add	a,#0xfb
      00009F FF               [12] 1459 	mov	r7,a
      0000A0 8F*00            [24] 1460 	mov	_vsprintf_PARM_3,r7
                           0000A2  1461 	C$i2c.h$93$1$81 ==.
                                   1462 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: vsprintf(text, fmt, ap);
      0000A2 E5*00            [12] 1463 	mov	a,_bp
      0000A4 24 FB            [12] 1464 	add	a,#0xfb
      0000A6 F8               [12] 1465 	mov	r0,a
      0000A7 86*00            [24] 1466 	mov	_vsprintf_PARM_2,@r0
      0000A9 08               [12] 1467 	inc	r0
      0000AA 86*01            [24] 1468 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000AC 08               [12] 1469 	inc	r0
      0000AD 86*02            [24] 1470 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AF 90r00r00         [24] 1471 	mov	dptr,#_lcd_print_text_1_81
      0000B2 75 F0 00         [24] 1472 	mov	b,#0x00
      0000B5 12r00r00         [24] 1473 	lcall	_vsprintf
                           0000B8  1474 	C$i2c.h$96$1$81 ==.
                                   1475 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: len = strlen(text);
      0000B8 90r00r00         [24] 1476 	mov	dptr,#_lcd_print_text_1_81
      0000BB 75 F0 00         [24] 1477 	mov	b,#0x00
      0000BE 12r00r00         [24] 1478 	lcall	_strlen
      0000C1 AE 82            [24] 1479 	mov	r6,dpl
                           0000C3  1480 	C$i2c.h$97$1$81 ==.
                                   1481 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000C3 7F 00            [12] 1482 	mov	r7,#0x00
      0000C5                       1483 00107$:
      0000C5 C3               [12] 1484 	clr	c
      0000C6 EF               [12] 1485 	mov	a,r7
      0000C7 9E               [12] 1486 	subb	a,r6
      0000C8 50 1F            [24] 1487 	jnc	00105$
                           0000CA  1488 	C$i2c.h$99$2$84 ==.
                                   1489 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000CA EF               [12] 1490 	mov	a,r7
      0000CB 24r00            [12] 1491 	add	a,#_lcd_print_text_1_81
      0000CD F5 82            [12] 1492 	mov	dpl,a
      0000CF E4               [12] 1493 	clr	a
      0000D0 34s00            [12] 1494 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000D2 F5 83            [12] 1495 	mov	dph,a
      0000D4 E0               [24] 1496 	movx	a,@dptr
      0000D5 FD               [12] 1497 	mov	r5,a
      0000D6 BD 0A 0D         [24] 1498 	cjne	r5,#0x0a,00108$
      0000D9 EF               [12] 1499 	mov	a,r7
      0000DA 24r00            [12] 1500 	add	a,#_lcd_print_text_1_81
      0000DC F5 82            [12] 1501 	mov	dpl,a
      0000DE E4               [12] 1502 	clr	a
      0000DF 34s00            [12] 1503 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000E1 F5 83            [12] 1504 	mov	dph,a
      0000E3 74 0D            [12] 1505 	mov	a,#0x0d
      0000E5 F0               [24] 1506 	movx	@dptr,a
      0000E6                       1507 00108$:
                           0000E6  1508 	C$i2c.h$97$1$81 ==.
                                   1509 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000E6 0F               [12] 1510 	inc	r7
      0000E7 80 DC            [24] 1511 	sjmp	00107$
      0000E9                       1512 00105$:
                           0000E9  1513 	C$i2c.h$102$1$81 ==.
                                   1514 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:102: i2c_write_data(0xC6, 0x00, text, len);
      0000E9 75*0Br00         [24] 1515 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_81
      0000EC 75*0Cs00         [24] 1516 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_81 >> 8)
      0000EF 75*0D 00         [24] 1517 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000F2 75*0A 00         [24] 1518 	mov	_i2c_write_data_PARM_2,#0x00
      0000F5 8E*0E            [24] 1519 	mov	_i2c_write_data_PARM_4,r6
      0000F7 75 82 C6         [24] 1520 	mov	dpl,#0xc6
      0000FA 12r03r8C         [24] 1521 	lcall	_i2c_write_data
      0000FD                       1522 00109$:
      0000FD D0*00            [24] 1523 	pop	_bp
                           0000FF  1524 	C$i2c.h$103$1$81 ==.
                           0000FF  1525 	XG$lcd_print$0$0 ==.
      0000FF 22               [24] 1526 	ret
                                   1527 ;------------------------------------------------------------
                                   1528 ;Allocation info for local variables in function 'lcd_clear'
                                   1529 ;------------------------------------------------------------
                                   1530 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_85'
                                   1531 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_85'
                                   1532 ;------------------------------------------------------------
                           000100  1533 	G$lcd_clear$0$0 ==.
                           000100  1534 	C$i2c.h$106$1$81 ==.
                                   1535 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:106: void lcd_clear()
                                   1536 ;	-----------------------------------------
                                   1537 ;	 function lcd_clear
                                   1538 ;	-----------------------------------------
      000100                       1539 _lcd_clear:
                           000100  1540 	C$i2c.h$108$1$81 ==.
                                   1541 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:108: unsigned char NumBytes=0, Cmd[2];
      000100 75*05 00         [24] 1542 	mov	_lcd_clear_NumBytes_1_85,#0x00
                           000103  1543 	C$i2c.h$110$1$85 ==.
                                   1544 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      000103                       1545 00101$:
      000103 74 C0            [12] 1546 	mov	a,#0x100 - 0x40
      000105 25*05            [12] 1547 	add	a,_lcd_clear_NumBytes_1_85
      000107 40 17            [24] 1548 	jc	00103$
      000109 75*10r05         [24] 1549 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_85
      00010C 75*11 00         [24] 1550 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00010F 75*12 40         [24] 1551 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000112 75*0F 00         [24] 1552 	mov	_i2c_read_data_PARM_2,#0x00
      000115 75*13 01         [24] 1553 	mov	_i2c_read_data_PARM_4,#0x01
      000118 75 82 C6         [24] 1554 	mov	dpl,#0xc6
      00011B 12r04r06         [24] 1555 	lcall	_i2c_read_data
      00011E 80 E3            [24] 1556 	sjmp	00101$
      000120                       1557 00103$:
                           000120  1558 	C$i2c.h$112$1$85 ==.
                                   1559 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:112: Cmd[0] = 12;
      000120 75*06 0C         [24] 1560 	mov	_lcd_clear_Cmd_1_85,#0x0c
                           000123  1561 	C$i2c.h$113$1$85 ==.
                                   1562 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:113: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000123 75*0Br06         [24] 1563 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_85
      000126 75*0C 00         [24] 1564 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000129 75*0D 40         [24] 1565 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00012C 75*0A 00         [24] 1566 	mov	_i2c_write_data_PARM_2,#0x00
      00012F 75*0E 01         [24] 1567 	mov	_i2c_write_data_PARM_4,#0x01
      000132 75 82 C6         [24] 1568 	mov	dpl,#0xc6
      000135 12r03r8C         [24] 1569 	lcall	_i2c_write_data
                           000138  1570 	C$i2c.h$114$1$85 ==.
                           000138  1571 	XG$lcd_clear$0$0 ==.
      000138 22               [24] 1572 	ret
                                   1573 ;------------------------------------------------------------
                                   1574 ;Allocation info for local variables in function 'read_keypad'
                                   1575 ;------------------------------------------------------------
                                   1576 ;i                         Allocated to registers r7 
                                   1577 ;Data                      Allocated with name '_read_keypad_Data_1_86'
                                   1578 ;------------------------------------------------------------
                           000139  1579 	G$read_keypad$0$0 ==.
                           000139  1580 	C$i2c.h$117$1$85 ==.
                                   1581 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:117: unsigned char read_keypad()
                                   1582 ;	-----------------------------------------
                                   1583 ;	 function read_keypad
                                   1584 ;	-----------------------------------------
      000139                       1585 _read_keypad:
                           000139  1586 	C$i2c.h$121$1$86 ==.
                                   1587 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000139 75*10r08         [24] 1588 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_86
      00013C 75*11 00         [24] 1589 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00013F 75*12 40         [24] 1590 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000142 75*0F 01         [24] 1591 	mov	_i2c_read_data_PARM_2,#0x01
      000145 75*13 02         [24] 1592 	mov	_i2c_read_data_PARM_4,#0x02
      000148 75 82 C6         [24] 1593 	mov	dpl,#0xc6
      00014B 12r04r06         [24] 1594 	lcall	_i2c_read_data
                           00014E  1595 	C$i2c.h$122$1$86 ==.
                                   1596 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:122: if(Data[0] == 0xFF) return 0;   //No response on bus, no display
      00014E 74 FF            [12] 1597 	mov	a,#0xff
      000150 B5*08 05         [24] 1598 	cjne	a,_read_keypad_Data_1_86,00102$
      000153 75 82 00         [24] 1599 	mov	dpl,#0x00
      000156 80 5F            [24] 1600 	sjmp	00116$
      000158                       1601 00102$:
                           000158  1602 	C$i2c.h$124$1$86 ==.
                                   1603 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000158 7F 00            [12] 1604 	mov	r7,#0x00
      00015A 8F 06            [24] 1605 	mov	ar6,r7
      00015C                       1606 00114$:
                           00015C  1607 	C$i2c.h$126$2$87 ==.
                                   1608 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:126: if(Data[0] & (0x01 << i))   //find the ASCII value of the keypad read, if it is the current loop value
      00015C 8E F0            [24] 1609 	mov	b,r6
      00015E 05 F0            [12] 1610 	inc	b
      000160 7C 01            [12] 1611 	mov	r4,#0x01
      000162 7D 00            [12] 1612 	mov	r5,#0x00
      000164 80 06            [24] 1613 	sjmp	00145$
      000166                       1614 00144$:
      000166 EC               [12] 1615 	mov	a,r4
      000167 2C               [12] 1616 	add	a,r4
      000168 FC               [12] 1617 	mov	r4,a
      000169 ED               [12] 1618 	mov	a,r5
      00016A 33               [12] 1619 	rlc	a
      00016B FD               [12] 1620 	mov	r5,a
      00016C                       1621 00145$:
      00016C D5 F0 F7         [24] 1622 	djnz	b,00144$
      00016F AA*08            [24] 1623 	mov	r2,_read_keypad_Data_1_86
      000171 7B 00            [12] 1624 	mov	r3,#0x00
      000173 EA               [12] 1625 	mov	a,r2
      000174 52 04            [12] 1626 	anl	ar4,a
      000176 EB               [12] 1627 	mov	a,r3
      000177 52 05            [12] 1628 	anl	ar5,a
      000179 EC               [12] 1629 	mov	a,r4
      00017A 4D               [12] 1630 	orl	a,r5
      00017B 60 07            [24] 1631 	jz	00115$
                           00017D  1632 	C$i2c.h$127$2$87 ==.
                                   1633 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: return i+49;
      00017D 74 31            [12] 1634 	mov	a,#0x31
      00017F 2F               [12] 1635 	add	a,r7
      000180 F5 82            [12] 1636 	mov	dpl,a
      000182 80 33            [24] 1637 	sjmp	00116$
      000184                       1638 00115$:
                           000184  1639 	C$i2c.h$124$1$86 ==.
                                   1640 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000184 0E               [12] 1641 	inc	r6
      000185 8E 07            [24] 1642 	mov	ar7,r6
      000187 BE 08 00         [24] 1643 	cjne	r6,#0x08,00147$
      00018A                       1644 00147$:
      00018A 40 D0            [24] 1645 	jc	00114$
                           00018C  1646 	C$i2c.h$130$1$86 ==.
                                   1647 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:130: if(Data[1] & 0x01) return '9';  //if the value is equal to 9 return 9.
      00018C E5*09            [12] 1648 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00018E 30 E0 05         [24] 1649 	jnb	acc.0,00107$
      000191 75 82 39         [24] 1650 	mov	dpl,#0x39
      000194 80 21            [24] 1651 	sjmp	00116$
      000196                       1652 00107$:
                           000196  1653 	C$i2c.h$132$1$86 ==.
                                   1654 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:132: if(Data[1] & 0x02) return '*';  //if the value is equal to the star.
      000196 E5*09            [12] 1655 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      000198 30 E1 05         [24] 1656 	jnb	acc.1,00109$
      00019B 75 82 2A         [24] 1657 	mov	dpl,#0x2a
      00019E 80 17            [24] 1658 	sjmp	00116$
      0001A0                       1659 00109$:
                           0001A0  1660 	C$i2c.h$134$1$86 ==.
                                   1661 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:134: if(Data[1] & 0x04) return '0';  //if the value is equal to the 0 key
      0001A0 E5*09            [12] 1662 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001A2 30 E2 05         [24] 1663 	jnb	acc.2,00111$
      0001A5 75 82 30         [24] 1664 	mov	dpl,#0x30
      0001A8 80 0D            [24] 1665 	sjmp	00116$
      0001AA                       1666 00111$:
                           0001AA  1667 	C$i2c.h$136$1$86 ==.
                                   1668 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:136: if(Data[1] & 0x08) return '#';  //if the value is equal to the pound key
      0001AA E5*09            [12] 1669 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001AC 30 E3 05         [24] 1670 	jnb	acc.3,00113$
      0001AF 75 82 23         [24] 1671 	mov	dpl,#0x23
      0001B2 80 03            [24] 1672 	sjmp	00116$
      0001B4                       1673 00113$:
                           0001B4  1674 	C$i2c.h$138$1$86 ==.
                                   1675 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:138: return 0xFF;                    //else return a numerical -1 (0xFF)
      0001B4 75 82 FF         [24] 1676 	mov	dpl,#0xff
      0001B7                       1677 00116$:
                           0001B7  1678 	C$i2c.h$139$1$86 ==.
                           0001B7  1679 	XG$read_keypad$0$0 ==.
      0001B7 22               [24] 1680 	ret
                                   1681 ;------------------------------------------------------------
                                   1682 ;Allocation info for local variables in function 'kpd_input'
                                   1683 ;------------------------------------------------------------
                                   1684 ;mode                      Allocated to registers r7 
                                   1685 ;sum                       Allocated to registers r5 r6 
                                   1686 ;key                       Allocated to registers r3 
                                   1687 ;i                         Allocated to registers 
                                   1688 ;------------------------------------------------------------
                           0001B8  1689 	G$kpd_input$0$0 ==.
                           0001B8  1690 	C$i2c.h$151$1$86 ==.
                                   1691 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:151: unsigned int kpd_input(char mode)
                                   1692 ;	-----------------------------------------
                                   1693 ;	 function kpd_input
                                   1694 ;	-----------------------------------------
      0001B8                       1695 _kpd_input:
      0001B8 AF 82            [24] 1696 	mov	r7,dpl
                           0001BA  1697 	C$i2c.h$156$1$89 ==.
                                   1698 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: sum = 0;
                           0001BA  1699 	C$i2c.h$159$1$89 ==.
                                   1700 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:159: if(mode==0)lcd_print("\nType digits; end w/#");
      0001BA E4               [12] 1701 	clr	a
      0001BB FD               [12] 1702 	mov	r5,a
      0001BC FE               [12] 1703 	mov	r6,a
      0001BD EF               [12] 1704 	mov	a,r7
      0001BE 70 1D            [24] 1705 	jnz	00102$
      0001C0 C0 06            [24] 1706 	push	ar6
      0001C2 C0 05            [24] 1707 	push	ar5
      0001C4 74r00            [12] 1708 	mov	a,#___str_0
      0001C6 C0 E0            [24] 1709 	push	acc
      0001C8 74s00            [12] 1710 	mov	a,#(___str_0 >> 8)
      0001CA C0 E0            [24] 1711 	push	acc
      0001CC 74 80            [12] 1712 	mov	a,#0x80
      0001CE C0 E0            [24] 1713 	push	acc
      0001D0 12r00r7B         [24] 1714 	lcall	_lcd_print
      0001D3 15 81            [12] 1715 	dec	sp
      0001D5 15 81            [12] 1716 	dec	sp
      0001D7 15 81            [12] 1717 	dec	sp
      0001D9 D0 05            [24] 1718 	pop	ar5
      0001DB D0 06            [24] 1719 	pop	ar6
      0001DD                       1720 00102$:
                           0001DD  1721 	C$i2c.h$161$1$89 ==.
                                   1722 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:161: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001DD C0 06            [24] 1723 	push	ar6
      0001DF C0 05            [24] 1724 	push	ar5
      0001E1 74 08            [12] 1725 	mov	a,#0x08
      0001E3 C0 E0            [24] 1726 	push	acc
      0001E5 E4               [12] 1727 	clr	a
      0001E6 C0 E0            [24] 1728 	push	acc
      0001E8 74 08            [12] 1729 	mov	a,#0x08
      0001EA C0 E0            [24] 1730 	push	acc
      0001EC E4               [12] 1731 	clr	a
      0001ED C0 E0            [24] 1732 	push	acc
      0001EF 74 08            [12] 1733 	mov	a,#0x08
      0001F1 C0 E0            [24] 1734 	push	acc
      0001F3 E4               [12] 1735 	clr	a
      0001F4 C0 E0            [24] 1736 	push	acc
      0001F6 74 08            [12] 1737 	mov	a,#0x08
      0001F8 C0 E0            [24] 1738 	push	acc
      0001FA E4               [12] 1739 	clr	a
      0001FB C0 E0            [24] 1740 	push	acc
      0001FD 74 08            [12] 1741 	mov	a,#0x08
      0001FF C0 E0            [24] 1742 	push	acc
      000201 E4               [12] 1743 	clr	a
      000202 C0 E0            [24] 1744 	push	acc
      000204 74r16            [12] 1745 	mov	a,#___str_1
      000206 C0 E0            [24] 1746 	push	acc
      000208 74s00            [12] 1747 	mov	a,#(___str_1 >> 8)
      00020A C0 E0            [24] 1748 	push	acc
      00020C 74 80            [12] 1749 	mov	a,#0x80
      00020E C0 E0            [24] 1750 	push	acc
      000210 12r00r7B         [24] 1751 	lcall	_lcd_print
      000213 E5 81            [12] 1752 	mov	a,sp
      000215 24 F3            [12] 1753 	add	a,#0xf3
      000217 F5 81            [12] 1754 	mov	sp,a
                           000219  1755 	C$i2c.h$163$1$89 ==.
                                   1756 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:163: delay_time(500000);             //Add 20ms delay before reading i2c in loop
      000219 90 A1 20         [24] 1757 	mov	dptr,#0xa120
      00021C 75 F0 07         [24] 1758 	mov	b,#0x07
      00021F E4               [12] 1759 	clr	a
      000220 12r03r27         [24] 1760 	lcall	_delay_time
      000223 D0 05            [24] 1761 	pop	ar5
      000225 D0 06            [24] 1762 	pop	ar6
                           000227  1763 	C$i2c.h$167$1$89 ==.
                                   1764 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000227 7F 00            [12] 1765 	mov	r7,#0x00
                           000229  1766 	C$i2c.h$169$3$92 ==.
                                   1767 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(((key=read_keypad()) == 0xFF) || (key == '*'))delay_time(10000);
      000229                       1768 00104$:
      000229 C0 07            [24] 1769 	push	ar7
      00022B C0 06            [24] 1770 	push	ar6
      00022D C0 05            [24] 1771 	push	ar5
      00022F 12r01r39         [24] 1772 	lcall	_read_keypad
      000232 AC 82            [24] 1773 	mov	r4,dpl
      000234 D0 05            [24] 1774 	pop	ar5
      000236 D0 06            [24] 1775 	pop	ar6
      000238 D0 07            [24] 1776 	pop	ar7
      00023A 8C 03            [24] 1777 	mov	ar3,r4
      00023C BC FF 02         [24] 1778 	cjne	r4,#0xff,00146$
      00023F 80 03            [24] 1779 	sjmp	00105$
      000241                       1780 00146$:
      000241 BB 2A 17         [24] 1781 	cjne	r3,#0x2a,00106$
      000244                       1782 00105$:
      000244 90 27 10         [24] 1783 	mov	dptr,#0x2710
      000247 E4               [12] 1784 	clr	a
      000248 F5 F0            [12] 1785 	mov	b,a
      00024A C0 07            [24] 1786 	push	ar7
      00024C C0 06            [24] 1787 	push	ar6
      00024E C0 05            [24] 1788 	push	ar5
      000250 12r03r27         [24] 1789 	lcall	_delay_time
      000253 D0 05            [24] 1790 	pop	ar5
      000255 D0 06            [24] 1791 	pop	ar6
      000257 D0 07            [24] 1792 	pop	ar7
      000259 80 CE            [24] 1793 	sjmp	00104$
      00025B                       1794 00106$:
                           00025B  1795 	C$i2c.h$170$2$90 ==.
                                   1796 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: if(key == '#')
      00025B BB 23 2A         [24] 1797 	cjne	r3,#0x23,00114$
                           00025E  1798 	C$i2c.h$172$3$91 ==.
                                   1799 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:172: while(read_keypad() == '#')delay_time(10000);
      00025E                       1800 00107$:
      00025E C0 06            [24] 1801 	push	ar6
      000260 C0 05            [24] 1802 	push	ar5
      000262 12r01r39         [24] 1803 	lcall	_read_keypad
      000265 AC 82            [24] 1804 	mov	r4,dpl
      000267 D0 05            [24] 1805 	pop	ar5
      000269 D0 06            [24] 1806 	pop	ar6
      00026B BC 23 13         [24] 1807 	cjne	r4,#0x23,00109$
      00026E 90 27 10         [24] 1808 	mov	dptr,#0x2710
      000271 E4               [12] 1809 	clr	a
      000272 F5 F0            [12] 1810 	mov	b,a
      000274 C0 06            [24] 1811 	push	ar6
      000276 C0 05            [24] 1812 	push	ar5
      000278 12r03r27         [24] 1813 	lcall	_delay_time
      00027B D0 05            [24] 1814 	pop	ar5
      00027D D0 06            [24] 1815 	pop	ar6
      00027F 80 DD            [24] 1816 	sjmp	00107$
      000281                       1817 00109$:
                           000281  1818 	C$i2c.h$173$3$91 ==.
                                   1819 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:173: return sum;
      000281 8D 82            [24] 1820 	mov	dpl,r5
      000283 8E 83            [24] 1821 	mov	dph,r6
      000285 02r03r26         [24] 1822 	ljmp	00119$
      000288                       1823 00114$:
                           000288  1824 	C$i2c.h$177$3$92 ==.
                                   1825 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:177: lcd_print("%c", key);
      000288 8B 02            [24] 1826 	mov	ar2,r3
      00028A 7C 00            [12] 1827 	mov	r4,#0x00
      00028C C0 07            [24] 1828 	push	ar7
      00028E C0 06            [24] 1829 	push	ar6
      000290 C0 05            [24] 1830 	push	ar5
      000292 C0 04            [24] 1831 	push	ar4
      000294 C0 03            [24] 1832 	push	ar3
      000296 C0 02            [24] 1833 	push	ar2
      000298 C0 02            [24] 1834 	push	ar2
      00029A C0 04            [24] 1835 	push	ar4
      00029C 74r26            [12] 1836 	mov	a,#___str_2
      00029E C0 E0            [24] 1837 	push	acc
      0002A0 74s00            [12] 1838 	mov	a,#(___str_2 >> 8)
      0002A2 C0 E0            [24] 1839 	push	acc
      0002A4 74 80            [12] 1840 	mov	a,#0x80
      0002A6 C0 E0            [24] 1841 	push	acc
      0002A8 12r00r7B         [24] 1842 	lcall	_lcd_print
      0002AB E5 81            [12] 1843 	mov	a,sp
      0002AD 24 FB            [12] 1844 	add	a,#0xfb
      0002AF F5 81            [12] 1845 	mov	sp,a
      0002B1 D0 02            [24] 1846 	pop	ar2
      0002B3 D0 03            [24] 1847 	pop	ar3
      0002B5 D0 04            [24] 1848 	pop	ar4
      0002B7 D0 05            [24] 1849 	pop	ar5
      0002B9 D0 06            [24] 1850 	pop	ar6
                           0002BB  1851 	C$i2c.h$178$1$89 ==.
                                   1852 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:178: sum = sum*10 + key - '0';
      0002BB 8D*00            [24] 1853 	mov	__mulint_PARM_2,r5
      0002BD 8E*01            [24] 1854 	mov	(__mulint_PARM_2 + 1),r6
      0002BF 90 00 0A         [24] 1855 	mov	dptr,#0x000a
      0002C2 C0 04            [24] 1856 	push	ar4
      0002C4 C0 03            [24] 1857 	push	ar3
      0002C6 C0 02            [24] 1858 	push	ar2
      0002C8 12r00r00         [24] 1859 	lcall	__mulint
      0002CB A8 82            [24] 1860 	mov	r0,dpl
      0002CD A9 83            [24] 1861 	mov	r1,dph
      0002CF D0 02            [24] 1862 	pop	ar2
      0002D1 D0 03            [24] 1863 	pop	ar3
      0002D3 D0 04            [24] 1864 	pop	ar4
      0002D5 D0 07            [24] 1865 	pop	ar7
      0002D7 EA               [12] 1866 	mov	a,r2
      0002D8 28               [12] 1867 	add	a,r0
      0002D9 F8               [12] 1868 	mov	r0,a
      0002DA EC               [12] 1869 	mov	a,r4
      0002DB 39               [12] 1870 	addc	a,r1
      0002DC F9               [12] 1871 	mov	r1,a
      0002DD E8               [12] 1872 	mov	a,r0
      0002DE 24 D0            [12] 1873 	add	a,#0xd0
      0002E0 FD               [12] 1874 	mov	r5,a
      0002E1 E9               [12] 1875 	mov	a,r1
      0002E2 34 FF            [12] 1876 	addc	a,#0xff
      0002E4 FE               [12] 1877 	mov	r6,a
                           0002E5  1878 	C$i2c.h$179$3$92 ==.
                                   1879 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E5                       1880 00110$:
      0002E5 C0 07            [24] 1881 	push	ar7
      0002E7 C0 06            [24] 1882 	push	ar6
      0002E9 C0 05            [24] 1883 	push	ar5
      0002EB C0 03            [24] 1884 	push	ar3
      0002ED 12r01r39         [24] 1885 	lcall	_read_keypad
      0002F0 AC 82            [24] 1886 	mov	r4,dpl
      0002F2 D0 03            [24] 1887 	pop	ar3
      0002F4 D0 05            [24] 1888 	pop	ar5
      0002F6 D0 06            [24] 1889 	pop	ar6
      0002F8 D0 07            [24] 1890 	pop	ar7
      0002FA EC               [12] 1891 	mov	a,r4
      0002FB B5 03 1B         [24] 1892 	cjne	a,ar3,00118$
      0002FE 90 27 10         [24] 1893 	mov	dptr,#0x2710
      000301 E4               [12] 1894 	clr	a
      000302 F5 F0            [12] 1895 	mov	b,a
      000304 C0 07            [24] 1896 	push	ar7
      000306 C0 06            [24] 1897 	push	ar6
      000308 C0 05            [24] 1898 	push	ar5
      00030A C0 03            [24] 1899 	push	ar3
      00030C 12r03r27         [24] 1900 	lcall	_delay_time
      00030F D0 03            [24] 1901 	pop	ar3
      000311 D0 05            [24] 1902 	pop	ar5
      000313 D0 06            [24] 1903 	pop	ar6
      000315 D0 07            [24] 1904 	pop	ar7
      000317 80 CC            [24] 1905 	sjmp	00110$
      000319                       1906 00118$:
                           000319  1907 	C$i2c.h$167$1$89 ==.
                                   1908 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000319 0F               [12] 1909 	inc	r7
      00031A BF 05 00         [24] 1910 	cjne	r7,#0x05,00155$
      00031D                       1911 00155$:
      00031D 50 03            [24] 1912 	jnc	00156$
      00031F 02r02r29         [24] 1913 	ljmp	00104$
      000322                       1914 00156$:
                           000322  1915 	C$i2c.h$182$1$89 ==.
                                   1916 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:182: return sum;
      000322 8D 82            [24] 1917 	mov	dpl,r5
      000324 8E 83            [24] 1918 	mov	dph,r6
      000326                       1919 00119$:
                           000326  1920 	C$i2c.h$183$1$89 ==.
                           000326  1921 	XG$kpd_input$0$0 ==.
      000326 22               [24] 1922 	ret
                                   1923 ;------------------------------------------------------------
                                   1924 ;Allocation info for local variables in function 'delay_time'
                                   1925 ;------------------------------------------------------------
                                   1926 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1927 ;index                     Allocated to registers 
                                   1928 ;------------------------------------------------------------
                           000327  1929 	G$delay_time$0$0 ==.
                           000327  1930 	C$i2c.h$192$1$89 ==.
                                   1931 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: void delay_time (unsigned long time_end)
                                   1932 ;	-----------------------------------------
                                   1933 ;	 function delay_time
                                   1934 ;	-----------------------------------------
      000327                       1935 _delay_time:
      000327 AC 82            [24] 1936 	mov	r4,dpl
      000329 AD 83            [24] 1937 	mov	r5,dph
      00032B AE F0            [24] 1938 	mov	r6,b
      00032D FF               [12] 1939 	mov	r7,a
                           00032E  1940 	C$i2c.h$196$1$94 ==.
                                   1941 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: for (index = 0; index < time_end; index++); //for loop delay
      00032E 78 00            [12] 1942 	mov	r0,#0x00
      000330 79 00            [12] 1943 	mov	r1,#0x00
      000332 7A 00            [12] 1944 	mov	r2,#0x00
      000334 7B 00            [12] 1945 	mov	r3,#0x00
      000336                       1946 00103$:
      000336 C3               [12] 1947 	clr	c
      000337 E8               [12] 1948 	mov	a,r0
      000338 9C               [12] 1949 	subb	a,r4
      000339 E9               [12] 1950 	mov	a,r1
      00033A 9D               [12] 1951 	subb	a,r5
      00033B EA               [12] 1952 	mov	a,r2
      00033C 9E               [12] 1953 	subb	a,r6
      00033D EB               [12] 1954 	mov	a,r3
      00033E 9F               [12] 1955 	subb	a,r7
      00033F 50 0F            [24] 1956 	jnc	00105$
      000341 08               [12] 1957 	inc	r0
      000342 B8 00 09         [24] 1958 	cjne	r0,#0x00,00115$
      000345 09               [12] 1959 	inc	r1
      000346 B9 00 05         [24] 1960 	cjne	r1,#0x00,00115$
      000349 0A               [12] 1961 	inc	r2
      00034A BA 00 E9         [24] 1962 	cjne	r2,#0x00,00103$
      00034D 0B               [12] 1963 	inc	r3
      00034E                       1964 00115$:
      00034E 80 E6            [24] 1965 	sjmp	00103$
      000350                       1966 00105$:
                           000350  1967 	C$i2c.h$197$1$94 ==.
                           000350  1968 	XG$delay_time$0$0 ==.
      000350 22               [24] 1969 	ret
                                   1970 ;------------------------------------------------------------
                                   1971 ;Allocation info for local variables in function 'i2c_start'
                                   1972 ;------------------------------------------------------------
                           000351  1973 	G$i2c_start$0$0 ==.
                           000351  1974 	C$i2c.h$200$1$94 ==.
                                   1975 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: void i2c_start(void)
                                   1976 ;	-----------------------------------------
                                   1977 ;	 function i2c_start
                                   1978 ;	-----------------------------------------
      000351                       1979 _i2c_start:
                           000351  1980 	C$i2c.h$202$1$96 ==.
                                   1981 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: while(BUSY);                //Wait until SMBus0 is free
      000351                       1982 00101$:
      000351 20 C7 FD         [24] 1983 	jb	_BUSY,00101$
                           000354  1984 	C$i2c.h$203$1$96 ==.
                                   1985 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:203: STA = 1;                    //Set Start Bit
      000354 D2 C5            [12] 1986 	setb	_STA
                           000356  1987 	C$i2c.h$204$1$96 ==.
                                   1988 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:204: while(!SI);                 //Wait until start sent
      000356                       1989 00104$:
      000356 30 C3 FD         [24] 1990 	jnb	_SI,00104$
                           000359  1991 	C$i2c.h$205$1$96 ==.
                                   1992 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:205: STA = 0;                    //Clear start bit
      000359 C2 C5            [12] 1993 	clr	_STA
                           00035B  1994 	C$i2c.h$206$1$96 ==.
                                   1995 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: SI = 0;                     //Clear SI
      00035B C2 C3            [12] 1996 	clr	_SI
                           00035D  1997 	C$i2c.h$207$1$96 ==.
                           00035D  1998 	XG$i2c_start$0$0 ==.
      00035D 22               [24] 1999 	ret
                                   2000 ;------------------------------------------------------------
                                   2001 ;Allocation info for local variables in function 'i2c_write'
                                   2002 ;------------------------------------------------------------
                                   2003 ;output_data               Allocated to registers 
                                   2004 ;------------------------------------------------------------
                           00035E  2005 	G$i2c_write$0$0 ==.
                           00035E  2006 	C$i2c.h$210$1$96 ==.
                                   2007 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: void i2c_write(unsigned char output_data)
                                   2008 ;	-----------------------------------------
                                   2009 ;	 function i2c_write
                                   2010 ;	-----------------------------------------
      00035E                       2011 _i2c_write:
      00035E 85 82 C2         [24] 2012 	mov	_SMB0DAT,dpl
                           000361  2013 	C$i2c.h$213$1$98 ==.
                                   2014 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:213: while(!SI);                 //Wait until send is complete
      000361                       2015 00101$:
                           000361  2016 	C$i2c.h$214$1$98 ==.
                                   2017 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: SI = 0;                     //Clear SI
      000361 10 C3 02         [24] 2018 	jbc	_SI,00112$
      000364 80 FB            [24] 2019 	sjmp	00101$
      000366                       2020 00112$:
                           000366  2021 	C$i2c.h$215$1$98 ==.
                           000366  2022 	XG$i2c_write$0$0 ==.
      000366 22               [24] 2023 	ret
                                   2024 ;------------------------------------------------------------
                                   2025 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2026 ;------------------------------------------------------------
                                   2027 ;output_data               Allocated to registers 
                                   2028 ;------------------------------------------------------------
                           000367  2029 	G$i2c_write_and_stop$0$0 ==.
                           000367  2030 	C$i2c.h$218$1$98 ==.
                                   2031 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: void i2c_write_and_stop(unsigned char output_data)
                                   2032 ;	-----------------------------------------
                                   2033 ;	 function i2c_write_and_stop
                                   2034 ;	-----------------------------------------
      000367                       2035 _i2c_write_and_stop:
      000367 85 82 C2         [24] 2036 	mov	_SMB0DAT,dpl
                           00036A  2037 	C$i2c.h$221$1$100 ==.
                                   2038 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:221: STO = 1;                    //Set stop bit
      00036A D2 C4            [12] 2039 	setb	_STO
                           00036C  2040 	C$i2c.h$222$1$100 ==.
                                   2041 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:222: while(!SI);                 //Wait until send is complete
      00036C                       2042 00101$:
                           00036C  2043 	C$i2c.h$223$1$100 ==.
                                   2044 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: SI = 0;                     //Clear SI
      00036C 10 C3 02         [24] 2045 	jbc	_SI,00112$
      00036F 80 FB            [24] 2046 	sjmp	00101$
      000371                       2047 00112$:
                           000371  2048 	C$i2c.h$224$1$100 ==.
                           000371  2049 	XG$i2c_write_and_stop$0$0 ==.
      000371 22               [24] 2050 	ret
                                   2051 ;------------------------------------------------------------
                                   2052 ;Allocation info for local variables in function 'i2c_read'
                                   2053 ;------------------------------------------------------------
                                   2054 ;input_data                Allocated to registers 
                                   2055 ;------------------------------------------------------------
                           000372  2056 	G$i2c_read$0$0 ==.
                           000372  2057 	C$i2c.h$227$1$100 ==.
                                   2058 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: unsigned char i2c_read(void)
                                   2059 ;	-----------------------------------------
                                   2060 ;	 function i2c_read
                                   2061 ;	-----------------------------------------
      000372                       2062 _i2c_read:
                           000372  2063 	C$i2c.h$231$1$102 ==.
                                   2064 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:231: while(!SI);                 //Wait until we have data to read
      000372                       2065 00101$:
      000372 30 C3 FD         [24] 2066 	jnb	_SI,00101$
                           000375  2067 	C$i2c.h$232$1$102 ==.
                                   2068 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:232: input_data = SMB0DAT;       //Read the data
      000375 85 C2 82         [24] 2069 	mov	dpl,_SMB0DAT
                           000378  2070 	C$i2c.h$233$1$102 ==.
                                   2071 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: SI = 0;                     //Clear SI
      000378 C2 C3            [12] 2072 	clr	_SI
                           00037A  2073 	C$i2c.h$234$1$102 ==.
                                   2074 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:234: return input_data;          //Return the read data
                           00037A  2075 	C$i2c.h$235$1$102 ==.
                           00037A  2076 	XG$i2c_read$0$0 ==.
      00037A 22               [24] 2077 	ret
                                   2078 ;------------------------------------------------------------
                                   2079 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2080 ;------------------------------------------------------------
                                   2081 ;input_data                Allocated to registers r7 
                                   2082 ;------------------------------------------------------------
                           00037B  2083 	G$i2c_read_and_stop$0$0 ==.
                           00037B  2084 	C$i2c.h$238$1$102 ==.
                                   2085 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: unsigned char i2c_read_and_stop(void)
                                   2086 ;	-----------------------------------------
                                   2087 ;	 function i2c_read_and_stop
                                   2088 ;	-----------------------------------------
      00037B                       2089 _i2c_read_and_stop:
                           00037B  2090 	C$i2c.h$242$1$104 ==.
                                   2091 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: while(!SI);                 //Wait until we have data to read
      00037B                       2092 00101$:
      00037B 30 C3 FD         [24] 2093 	jnb	_SI,00101$
                           00037E  2094 	C$i2c.h$243$1$104 ==.
                                   2095 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:243: input_data = SMB0DAT;       //Read the data
      00037E AF C2            [24] 2096 	mov	r7,_SMB0DAT
                           000380  2097 	C$i2c.h$244$1$104 ==.
                                   2098 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:244: SI = 0;                     //Clear SI
      000380 C2 C3            [12] 2099 	clr	_SI
                           000382  2100 	C$i2c.h$245$1$104 ==.
                                   2101 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:245: STO = 1;                    //Set stop bit
      000382 D2 C4            [12] 2102 	setb	_STO
                           000384  2103 	C$i2c.h$246$1$104 ==.
                                   2104 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: while(!SI);                 //Wait for stop
      000384                       2105 00104$:
                           000384  2106 	C$i2c.h$247$1$104 ==.
                                   2107 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:247: SI = 0;
      000384 10 C3 02         [24] 2108 	jbc	_SI,00122$
      000387 80 FB            [24] 2109 	sjmp	00104$
      000389                       2110 00122$:
                           000389  2111 	C$i2c.h$248$1$104 ==.
                                   2112 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:248: return input_data;          //Return the read data
      000389 8F 82            [24] 2113 	mov	dpl,r7
                           00038B  2114 	C$i2c.h$249$1$104 ==.
                           00038B  2115 	XG$i2c_read_and_stop$0$0 ==.
      00038B 22               [24] 2116 	ret
                                   2117 ;------------------------------------------------------------
                                   2118 ;Allocation info for local variables in function 'i2c_write_data'
                                   2119 ;------------------------------------------------------------
                                   2120 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2121 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2122 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2123 ;addr                      Allocated to registers r7 
                                   2124 ;i                         Allocated to registers 
                                   2125 ;------------------------------------------------------------
                           00038C  2126 	G$i2c_write_data$0$0 ==.
                           00038C  2127 	C$i2c.h$252$1$104 ==.
                                   2128 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2129 ;	-----------------------------------------
                                   2130 ;	 function i2c_write_data
                                   2131 ;	-----------------------------------------
      00038C                       2132 _i2c_write_data:
      00038C AF 82            [24] 2133 	mov	r7,dpl
                           00038E  2134 	C$i2c.h$256$1$106 ==.
                                   2135 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: EA = 0;                     //Don't allow interrupts during I2C work
      00038E C2 AF            [12] 2136 	clr	_EA
                           000390  2137 	C$i2c.h$257$1$106 ==.
                                   2138 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:257: i2c_start();                //Initiate I2C transfer
      000390 C0 07            [24] 2139 	push	ar7
      000392 12r03r51         [24] 2140 	lcall	_i2c_start
      000395 D0 07            [24] 2141 	pop	ar7
                           000397  2142 	C$i2c.h$258$1$106 ==.
                                   2143 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:258: i2c_write(addr & ~0x01);    //Write the desired address to the bus
      000397 74 FE            [12] 2144 	mov	a,#0xfe
      000399 5F               [12] 2145 	anl	a,r7
      00039A F5 82            [12] 2146 	mov	dpl,a
      00039C 12r03r5E         [24] 2147 	lcall	_i2c_write
                           00039F  2148 	C$i2c.h$259$1$106 ==.
                                   2149 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: i2c_write(start_reg);       //Write the start register to the bus
      00039F 85*0A 82         [24] 2150 	mov	dpl,_i2c_write_data_PARM_2
      0003A2 12r03r5E         [24] 2151 	lcall	_i2c_write
                           0003A5  2152 	C$i2c.h$260$1$106 ==.
                                   2153 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003A5 7F 00            [12] 2154 	mov	r7,#0x00
      0003A7                       2155 00103$:
      0003A7 AD*0E            [24] 2156 	mov	r5,_i2c_write_data_PARM_4
      0003A9 7E 00            [12] 2157 	mov	r6,#0x00
      0003AB 1D               [12] 2158 	dec	r5
      0003AC BD FF 01         [24] 2159 	cjne	r5,#0xff,00114$
      0003AF 1E               [12] 2160 	dec	r6
      0003B0                       2161 00114$:
      0003B0 8F 03            [24] 2162 	mov	ar3,r7
      0003B2 7C 00            [12] 2163 	mov	r4,#0x00
      0003B4 C3               [12] 2164 	clr	c
      0003B5 EB               [12] 2165 	mov	a,r3
      0003B6 9D               [12] 2166 	subb	a,r5
      0003B7 EC               [12] 2167 	mov	a,r4
      0003B8 64 80            [12] 2168 	xrl	a,#0x80
      0003BA 8E F0            [24] 2169 	mov	b,r6
      0003BC 63 F0 80         [24] 2170 	xrl	b,#0x80
      0003BF 95 F0            [12] 2171 	subb	a,b
      0003C1 50 1F            [24] 2172 	jnc	00101$
                           0003C3  2173 	C$i2c.h$261$1$106 ==.
                                   2174 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:261: i2c_write(buffer[i]);
      0003C3 EF               [12] 2175 	mov	a,r7
      0003C4 25*0B            [12] 2176 	add	a,_i2c_write_data_PARM_3
      0003C6 FC               [12] 2177 	mov	r4,a
      0003C7 E4               [12] 2178 	clr	a
      0003C8 35*0C            [12] 2179 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003CA FD               [12] 2180 	mov	r5,a
      0003CB AE*0D            [24] 2181 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003CD 8C 82            [24] 2182 	mov	dpl,r4
      0003CF 8D 83            [24] 2183 	mov	dph,r5
      0003D1 8E F0            [24] 2184 	mov	b,r6
      0003D3 12r00r00         [24] 2185 	lcall	__gptrget
      0003D6 F5 82            [12] 2186 	mov	dpl,a
      0003D8 C0 07            [24] 2187 	push	ar7
      0003DA 12r03r5E         [24] 2188 	lcall	_i2c_write
      0003DD D0 07            [24] 2189 	pop	ar7
                           0003DF  2190 	C$i2c.h$260$1$106 ==.
                                   2191 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003DF 0F               [12] 2192 	inc	r7
      0003E0 80 C5            [24] 2193 	sjmp	00103$
      0003E2                       2194 00101$:
                           0003E2  2195 	C$i2c.h$262$1$106 ==.
                                   2196 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003E2 AE*0E            [24] 2197 	mov	r6,_i2c_write_data_PARM_4
      0003E4 7F 00            [12] 2198 	mov	r7,#0x00
      0003E6 1E               [12] 2199 	dec	r6
      0003E7 BE FF 01         [24] 2200 	cjne	r6,#0xff,00116$
      0003EA 1F               [12] 2201 	dec	r7
      0003EB                       2202 00116$:
      0003EB EE               [12] 2203 	mov	a,r6
      0003EC 25*0B            [12] 2204 	add	a,_i2c_write_data_PARM_3
      0003EE FE               [12] 2205 	mov	r6,a
      0003EF EF               [12] 2206 	mov	a,r7
      0003F0 35*0C            [12] 2207 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003F2 FF               [12] 2208 	mov	r7,a
      0003F3 AD*0D            [24] 2209 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003F5 8E 82            [24] 2210 	mov	dpl,r6
      0003F7 8F 83            [24] 2211 	mov	dph,r7
      0003F9 8D F0            [24] 2212 	mov	b,r5
      0003FB 12r00r00         [24] 2213 	lcall	__gptrget
      0003FE F5 82            [12] 2214 	mov	dpl,a
      000400 12r03r67         [24] 2215 	lcall	_i2c_write_and_stop
                           000403  2216 	C$i2c.h$263$1$106 ==.
                                   2217 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: EA = 1;                     //Re-Enable interrupts
      000403 D2 AF            [12] 2218 	setb	_EA
                           000405  2219 	C$i2c.h$264$1$106 ==.
                           000405  2220 	XG$i2c_write_data$0$0 ==.
      000405 22               [24] 2221 	ret
                                   2222 ;------------------------------------------------------------
                                   2223 ;Allocation info for local variables in function 'i2c_read_data'
                                   2224 ;------------------------------------------------------------
                                   2225 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2226 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2227 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2228 ;addr                      Allocated to registers r7 
                                   2229 ;j                         Allocated to registers 
                                   2230 ;------------------------------------------------------------
                           000406  2231 	G$i2c_read_data$0$0 ==.
                           000406  2232 	C$i2c.h$267$1$106 ==.
                                   2233 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2234 ;	-----------------------------------------
                                   2235 ;	 function i2c_read_data
                                   2236 ;	-----------------------------------------
      000406                       2237 _i2c_read_data:
      000406 AF 82            [24] 2238 	mov	r7,dpl
                           000408  2239 	C$i2c.h$271$1$108 ==.
                                   2240 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:271: EA = 0;                     //Don't allow interrupts during I2C work
      000408 C2 AF            [12] 2241 	clr	_EA
                           00040A  2242 	C$i2c.h$272$1$108 ==.
                                   2243 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: i2c_start();                //Start I2C transfer
      00040A C0 07            [24] 2244 	push	ar7
      00040C 12r03r51         [24] 2245 	lcall	_i2c_start
      00040F D0 07            [24] 2246 	pop	ar7
                           000411  2247 	C$i2c.h$273$1$108 ==.
                                   2248 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: i2c_write(addr & ~0x01);    //Write address of device that will be written to, send 0
      000411 74 FE            [12] 2249 	mov	a,#0xfe
      000413 5F               [12] 2250 	anl	a,r7
      000414 F5 82            [12] 2251 	mov	dpl,a
      000416 C0 07            [24] 2252 	push	ar7
      000418 12r03r5E         [24] 2253 	lcall	_i2c_write
                           00041B  2254 	C$i2c.h$274$1$108 ==.
                                   2255 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:274: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      00041B 85*0F 82         [24] 2256 	mov	dpl,_i2c_read_data_PARM_2
      00041E 12r03r67         [24] 2257 	lcall	_i2c_write_and_stop
                           000421  2258 	C$i2c.h$275$1$108 ==.
                                   2259 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:275: i2c_start();                //Start I2C transfer
      000421 12r03r51         [24] 2260 	lcall	_i2c_start
      000424 D0 07            [24] 2261 	pop	ar7
                           000426  2262 	C$i2c.h$276$1$108 ==.
                                   2263 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:276: i2c_write(addr | 0x01);     //Write address again, this time indicating a read operation
      000426 74 01            [12] 2264 	mov	a,#0x01
      000428 4F               [12] 2265 	orl	a,r7
      000429 F5 82            [12] 2266 	mov	dpl,a
      00042B 12r03r5E         [24] 2267 	lcall	_i2c_write
                           00042E  2268 	C$i2c.h$277$1$108 ==.
                                   2269 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      00042E 7F 00            [12] 2270 	mov	r7,#0x00
      000430                       2271 00103$:
      000430 AD*13            [24] 2272 	mov	r5,_i2c_read_data_PARM_4
      000432 7E 00            [12] 2273 	mov	r6,#0x00
      000434 1D               [12] 2274 	dec	r5
      000435 BD FF 01         [24] 2275 	cjne	r5,#0xff,00114$
      000438 1E               [12] 2276 	dec	r6
      000439                       2277 00114$:
      000439 8F 03            [24] 2278 	mov	ar3,r7
      00043B 7C 00            [12] 2279 	mov	r4,#0x00
      00043D C3               [12] 2280 	clr	c
      00043E EB               [12] 2281 	mov	a,r3
      00043F 9D               [12] 2282 	subb	a,r5
      000440 EC               [12] 2283 	mov	a,r4
      000441 64 80            [12] 2284 	xrl	a,#0x80
      000443 8E F0            [24] 2285 	mov	b,r6
      000445 63 F0 80         [24] 2286 	xrl	b,#0x80
      000448 95 F0            [12] 2287 	subb	a,b
      00044A 50 2E            [24] 2288 	jnc	00101$
                           00044C  2289 	C$i2c.h$279$2$109 ==.
                                   2290 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:279: AA = 1;                 //Set acknowledge bit
      00044C D2 C2            [12] 2291 	setb	_AA
                           00044E  2292 	C$i2c.h$280$2$109 ==.
                                   2293 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:280: buffer[j] = i2c_read(); //Read data, save it in buffer
      00044E EF               [12] 2294 	mov	a,r7
      00044F 25*10            [12] 2295 	add	a,_i2c_read_data_PARM_3
      000451 FC               [12] 2296 	mov	r4,a
      000452 E4               [12] 2297 	clr	a
      000453 35*11            [12] 2298 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000455 FD               [12] 2299 	mov	r5,a
      000456 AE*12            [24] 2300 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      000458 C0 07            [24] 2301 	push	ar7
      00045A C0 06            [24] 2302 	push	ar6
      00045C C0 05            [24] 2303 	push	ar5
      00045E C0 04            [24] 2304 	push	ar4
      000460 12r03r72         [24] 2305 	lcall	_i2c_read
      000463 AB 82            [24] 2306 	mov	r3,dpl
      000465 D0 04            [24] 2307 	pop	ar4
      000467 D0 05            [24] 2308 	pop	ar5
      000469 D0 06            [24] 2309 	pop	ar6
      00046B D0 07            [24] 2310 	pop	ar7
      00046D 8C 82            [24] 2311 	mov	dpl,r4
      00046F 8D 83            [24] 2312 	mov	dph,r5
      000471 8E F0            [24] 2313 	mov	b,r6
      000473 EB               [12] 2314 	mov	a,r3
      000474 12r00r00         [24] 2315 	lcall	__gptrput
                           000477  2316 	C$i2c.h$277$1$108 ==.
                                   2317 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      000477 0F               [12] 2318 	inc	r7
      000478 80 B6            [24] 2319 	sjmp	00103$
      00047A                       2320 00101$:
                           00047A  2321 	C$i2c.h$282$1$108 ==.
                                   2322 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:282: AA = 0;
      00047A C2 C2            [12] 2323 	clr	_AA
                           00047C  2324 	C$i2c.h$283$1$108 ==.
                                   2325 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00047C AE*13            [24] 2326 	mov	r6,_i2c_read_data_PARM_4
      00047E 7F 00            [12] 2327 	mov	r7,#0x00
      000480 1E               [12] 2328 	dec	r6
      000481 BE FF 01         [24] 2329 	cjne	r6,#0xff,00116$
      000484 1F               [12] 2330 	dec	r7
      000485                       2331 00116$:
      000485 EE               [12] 2332 	mov	a,r6
      000486 25*10            [12] 2333 	add	a,_i2c_read_data_PARM_3
      000488 FE               [12] 2334 	mov	r6,a
      000489 EF               [12] 2335 	mov	a,r7
      00048A 35*11            [12] 2336 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00048C FF               [12] 2337 	mov	r7,a
      00048D AD*12            [24] 2338 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      00048F C0 07            [24] 2339 	push	ar7
      000491 C0 06            [24] 2340 	push	ar6
      000493 C0 05            [24] 2341 	push	ar5
      000495 12r03r7B         [24] 2342 	lcall	_i2c_read_and_stop
      000498 AC 82            [24] 2343 	mov	r4,dpl
      00049A D0 05            [24] 2344 	pop	ar5
      00049C D0 06            [24] 2345 	pop	ar6
      00049E D0 07            [24] 2346 	pop	ar7
      0004A0 8E 82            [24] 2347 	mov	dpl,r6
      0004A2 8F 83            [24] 2348 	mov	dph,r7
      0004A4 8D F0            [24] 2349 	mov	b,r5
      0004A6 EC               [12] 2350 	mov	a,r4
      0004A7 12r00r00         [24] 2351 	lcall	__gptrput
                           0004AA  2352 	C$i2c.h$284$1$108 ==.
                                   2353 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:284: EA = 1;                     //Re-Enable interrupts
      0004AA D2 AF            [12] 2354 	setb	_EA
                           0004AC  2355 	C$i2c.h$285$1$108 ==.
                           0004AC  2356 	XG$i2c_read_data$0$0 ==.
      0004AC 22               [24] 2357 	ret
                                   2358 ;------------------------------------------------------------
                                   2359 ;Allocation info for local variables in function 'Accel_Init'
                                   2360 ;------------------------------------------------------------
                           0004AD  2361 	G$Accel_Init$0$0 ==.
                           0004AD  2362 	C$i2c.h$294$1$108 ==.
                                   2363 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: void Accel_Init(void)
                                   2364 ;	-----------------------------------------
                                   2365 ;	 function Accel_Init
                                   2366 ;	-----------------------------------------
      0004AD                       2367 _Accel_Init:
                           0004AD  2368 	C$i2c.h$298$1$111 ==.
                                   2369 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:298: Data2[0]=0x23;  //normal power mode, 50Hz ODR, y & x axes enabled
      0004AD 75*00 23         [24] 2370 	mov	_Data2,#0x23
                           0004B0  2371 	C$i2c.h$300$1$111 ==.
                                   2372 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:300: Data2[1]=0x00;  //default - no filtering
      0004B0 75*01 00         [24] 2373 	mov	(_Data2 + 0x0001),#0x00
                           0004B3  2374 	C$i2c.h$301$1$111 ==.
                                   2375 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:301: Data2[1]=0x10;  //filtered data selected, HPF = 1.0->0.125Hz
      0004B3 75*01 10         [24] 2376 	mov	(_Data2 + 0x0001),#0x10
                           0004B6  2377 	C$i2c.h$302$1$111 ==.
                                   2378 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:302: Data2[2]=0x00;  //default - no interrupts enabled
      0004B6 75*02 00         [24] 2379 	mov	(_Data2 + 0x0002),#0x00
                           0004B9  2380 	C$i2c.h$304$1$111 ==.
                                   2381 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:304: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004B9 75*0Br00         [24] 2382 	mov	_i2c_write_data_PARM_3,#_Data2
      0004BC 75*0C 00         [24] 2383 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004BF 75*0D 40         [24] 2384 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C2 75*0A 20         [24] 2385 	mov	_i2c_write_data_PARM_2,#0x20
      0004C5 75*0E 01         [24] 2386 	mov	_i2c_write_data_PARM_4,#0x01
      0004C8 75 82 30         [24] 2387 	mov	dpl,#0x30
      0004CB 12r03r8C         [24] 2388 	lcall	_i2c_write_data
                           0004CE  2389 	C$i2c.h$310$1$111 ==.
                           0004CE  2390 	XG$Accel_Init$0$0 ==.
      0004CE 22               [24] 2391 	ret
                                   2392 ;------------------------------------------------------------
                                   2393 ;Allocation info for local variables in function 'Accel_Init_C'
                                   2394 ;------------------------------------------------------------
                           0004CF  2395 	G$Accel_Init_C$0$0 ==.
                           0004CF  2396 	C$i2c.h$313$1$111 ==.
                                   2397 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:313: void Accel_Init_C(void)
                                   2398 ;	-----------------------------------------
                                   2399 ;	 function Accel_Init_C
                                   2400 ;	-----------------------------------------
      0004CF                       2401 _Accel_Init_C:
                           0004CF  2402 	C$i2c.h$318$1$113 ==.
                                   2403 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:318: Data2[0]=0x04;  //set register address auto increment bit
      0004CF 75*00 04         [24] 2404 	mov	_Data2,#0x04
                           0004D2  2405 	C$i2c.h$319$1$113 ==.
                                   2406 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:319: i2c_write_data(addr_accelC, 0x23, Data2, 1);
      0004D2 75*0Br00         [24] 2407 	mov	_i2c_write_data_PARM_3,#_Data2
      0004D5 75*0C 00         [24] 2408 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004D8 75*0D 40         [24] 2409 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004DB 75*0A 23         [24] 2410 	mov	_i2c_write_data_PARM_2,#0x23
      0004DE 75*0E 01         [24] 2411 	mov	_i2c_write_data_PARM_4,#0x01
      0004E1 75 82 3A         [24] 2412 	mov	dpl,#0x3a
      0004E4 12r03r8C         [24] 2413 	lcall	_i2c_write_data
                           0004E7  2414 	C$i2c.h$321$1$113 ==.
                                   2415 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:321: Data2[0]=0x6B;  //R20 normal power mode, 800Hz ODR, y & x axes enabled
      0004E7 75*00 6B         [24] 2416 	mov	_Data2,#0x6b
                           0004EA  2417 	C$i2c.h$323$1$113 ==.
                                   2418 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:323: Data2[1]=0x00;  //R21 Default - no HP filtering
      0004EA 75*01 00         [24] 2419 	mov	(_Data2 + 0x0001),#0x00
                           0004ED  2420 	C$i2c.h$325$1$113 ==.
                                   2421 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:325: Data2[2]=0x00;  //R22 Default - no interrupts enabled
      0004ED 75*02 00         [24] 2422 	mov	(_Data2 + 0x0002),#0x00
                           0004F0  2423 	C$i2c.h$326$1$113 ==.
                                   2424 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:326: i2c_write_data(addr_accelC, 0x20, Data2, 1);
      0004F0 75*0Br00         [24] 2425 	mov	_i2c_write_data_PARM_3,#_Data2
      0004F3 75*0C 00         [24] 2426 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004F6 75*0D 40         [24] 2427 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004F9 75*0A 20         [24] 2428 	mov	_i2c_write_data_PARM_2,#0x20
      0004FC 75*0E 01         [24] 2429 	mov	_i2c_write_data_PARM_4,#0x01
      0004FF 75 82 3A         [24] 2430 	mov	dpl,#0x3a
      000502 12r03r8C         [24] 2431 	lcall	_i2c_write_data
                           000505  2432 	C$i2c.h$328$1$113 ==.
                           000505  2433 	XG$Accel_Init_C$0$0 ==.
      000505 22               [24] 2434 	ret
                                   2435 ;------------------------------------------------------------
                                   2436 ;Allocation info for local variables in function 'main'
                                   2437 ;------------------------------------------------------------
                           000506  2438 	G$main$0$0 ==.
                           000506  2439 	C$lab3_3k.c$67$1$113 ==.
                                   2440 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:67: void main(void)
                                   2441 ;	-----------------------------------------
                                   2442 ;	 function main
                                   2443 ;	-----------------------------------------
      000506                       2444 _main:
                           000506  2445 	C$lab3_3k.c$70$1$126 ==.
                                   2446 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:70: Sys_Init();
      000506 12r00r37         [24] 2447 	lcall	_Sys_Init
                           000509  2448 	C$lab3_3k.c$71$1$126 ==.
                                   2449 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:71: putchar(' '); //the quotes in this line may not format correctly
      000509 75 82 20         [24] 2450 	mov	dpl,#0x20
      00050C 12r00r4A         [24] 2451 	lcall	_putchar
                           00050F  2452 	C$lab3_3k.c$72$1$126 ==.
                                   2453 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:72: Port_Init();
      00050F 12r05rD4         [24] 2454 	lcall	_Port_Init
                           000512  2455 	C$lab3_3k.c$73$1$126 ==.
                                   2456 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:73: XBR0_Init();//!!!!!!!!!!!!!!Done set the crossbar to accomodate untrasonic ranger
      000512 12r05rDE         [24] 2457 	lcall	_XBR0_Init
                           000515  2458 	C$lab3_3k.c$74$1$126 ==.
                                   2459 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:74: PCA_Init();
      000515 12r05rE2         [24] 2460 	lcall	_PCA_Init
                           000518  2461 	C$lab3_3k.c$75$1$126 ==.
                                   2462 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:75: SMB_Init();
      000518 12r05rF7         [24] 2463 	lcall	_SMB_Init
                           00051B  2464 	C$lab3_3k.c$78$1$126 ==.
                                   2465 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:78: printf("Embedded Control Pulsewidth Calibration\r\n");
      00051B 74r29            [12] 2466 	mov	a,#___str_3
      00051D C0 E0            [24] 2467 	push	acc
      00051F 74s00            [12] 2468 	mov	a,#(___str_3 >> 8)
      000521 C0 E0            [24] 2469 	push	acc
      000523 74 80            [12] 2470 	mov	a,#0x80
      000525 C0 E0            [24] 2471 	push	acc
      000527 12r00r00         [24] 2472 	lcall	_printf
      00052A 15 81            [12] 2473 	dec	sp
      00052C 15 81            [12] 2474 	dec	sp
      00052E 15 81            [12] 2475 	dec	sp
                           000530  2476 	C$lab3_3k.c$83$1$126 ==.
                                   2477 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:83: sPW = sPW_CENTER;
      000530 90r00r00         [24] 2478 	mov	dptr,#_sPW_CENTER
      000533 E0               [24] 2479 	movx	a,@dptr
      000534 F5*16            [12] 2480 	mov	_sPW,a
      000536 A3               [24] 2481 	inc	dptr
      000537 E0               [24] 2482 	movx	a,@dptr
      000538 F5*17            [12] 2483 	mov	(_sPW + 1),a
                           00053A  2484 	C$lab3_3k.c$84$1$126 ==.
                                   2485 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:84: PCA0CP0 = 65535 - sPW;
      00053A AC*16            [24] 2486 	mov	r4,_sPW
      00053C AD*17            [24] 2487 	mov	r5,(_sPW + 1)
      00053E E4               [12] 2488 	clr	a
      00053F FE               [12] 2489 	mov	r6,a
      000540 FF               [12] 2490 	mov	r7,a
      000541 74 FF            [12] 2491 	mov	a,#0xff
      000543 C3               [12] 2492 	clr	c
      000544 9C               [12] 2493 	subb	a,r4
      000545 FC               [12] 2494 	mov	r4,a
      000546 74 FF            [12] 2495 	mov	a,#0xff
      000548 9D               [12] 2496 	subb	a,r5
      000549 FD               [12] 2497 	mov	r5,a
      00054A E4               [12] 2498 	clr	a
      00054B 9E               [12] 2499 	subb	a,r6
      00054C E4               [12] 2500 	clr	a
      00054D 9F               [12] 2501 	subb	a,r7
      00054E 8C EA            [24] 2502 	mov	((_PCA0CP0 >> 0) & 0xFF),r4
      000550 8D FA            [24] 2503 	mov	((_PCA0CP0 >> 8) & 0xFF),r5
                           000552  2504 	C$lab3_3k.c$85$1$126 ==.
                                   2505 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:85: mPW = mPW_CENTER;
      000552 90r00r06         [24] 2506 	mov	dptr,#_mPW_CENTER
      000555 E0               [24] 2507 	movx	a,@dptr
      000556 F5*18            [12] 2508 	mov	_mPW,a
      000558 A3               [24] 2509 	inc	dptr
      000559 E0               [24] 2510 	movx	a,@dptr
      00055A F5*19            [12] 2511 	mov	(_mPW + 1),a
                           00055C  2512 	C$lab3_3k.c$86$1$126 ==.
                                   2513 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:86: PCA0CP2 = 65535 - mPW;
      00055C AC*18            [24] 2514 	mov	r4,_mPW
      00055E AD*19            [24] 2515 	mov	r5,(_mPW + 1)
      000560 E4               [12] 2516 	clr	a
      000561 FE               [12] 2517 	mov	r6,a
      000562 FF               [12] 2518 	mov	r7,a
      000563 74 FF            [12] 2519 	mov	a,#0xff
      000565 C3               [12] 2520 	clr	c
      000566 9C               [12] 2521 	subb	a,r4
      000567 FC               [12] 2522 	mov	r4,a
      000568 74 FF            [12] 2523 	mov	a,#0xff
      00056A 9D               [12] 2524 	subb	a,r5
      00056B FD               [12] 2525 	mov	r5,a
      00056C E4               [12] 2526 	clr	a
      00056D 9E               [12] 2527 	subb	a,r6
      00056E FE               [12] 2528 	mov	r6,a
      00056F E4               [12] 2529 	clr	a
      000570 9F               [12] 2530 	subb	a,r7
      000571 FF               [12] 2531 	mov	r7,a
      000572 8C EC            [24] 2532 	mov	((_PCA0CP2 >> 0) & 0xFF),r4
      000574 8D FC            [24] 2533 	mov	((_PCA0CP2 >> 8) & 0xFF),r5
                           000576  2534 	C$lab3_3k.c$87$1$126 ==.
                                   2535 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:87: while(Counts < 50);//wait for 1 sec
      000576                       2536 00101$:
      000576 C3               [12] 2537 	clr	c
      000577 E5*14            [12] 2538 	mov	a,_Counts
      000579 94 32            [12] 2539 	subb	a,#0x32
      00057B E5*15            [12] 2540 	mov	a,(_Counts + 1)
      00057D 94 00            [12] 2541 	subb	a,#0x00
      00057F 40 F5            [24] 2542 	jc	00101$
                           000581  2543 	C$lab3_3k.c$88$1$126 ==.
                                   2544 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:88: printf("Steering Calibration finished. %u \r\n",sPW);
      000581 C0*16            [24] 2545 	push	_sPW
      000583 C0*17            [24] 2546 	push	(_sPW + 1)
      000585 74r53            [12] 2547 	mov	a,#___str_4
      000587 C0 E0            [24] 2548 	push	acc
      000589 74s00            [12] 2549 	mov	a,#(___str_4 >> 8)
      00058B C0 E0            [24] 2550 	push	acc
      00058D 74 80            [12] 2551 	mov	a,#0x80
      00058F C0 E0            [24] 2552 	push	acc
      000591 12r00r00         [24] 2553 	lcall	_printf
      000594 E5 81            [12] 2554 	mov	a,sp
      000596 24 FB            [12] 2555 	add	a,#0xfb
      000598 F5 81            [12] 2556 	mov	sp,a
                           00059A  2557 	C$lab3_3k.c$89$1$126 ==.
                                   2558 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:89: printf("Motor Calibration finished. %u \r\n",mPW);
      00059A C0*18            [24] 2559 	push	_mPW
      00059C C0*19            [24] 2560 	push	(_mPW + 1)
      00059E 74r78            [12] 2561 	mov	a,#___str_5
      0005A0 C0 E0            [24] 2562 	push	acc
      0005A2 74s00            [12] 2563 	mov	a,#(___str_5 >> 8)
      0005A4 C0 E0            [24] 2564 	push	acc
      0005A6 74 80            [12] 2565 	mov	a,#0x80
      0005A8 C0 E0            [24] 2566 	push	acc
      0005AA 12r00r00         [24] 2567 	lcall	_printf
      0005AD E5 81            [12] 2568 	mov	a,sp
      0005AF 24 FB            [12] 2569 	add	a,#0xfb
      0005B1 F5 81            [12] 2570 	mov	sp,a
                           0005B3  2571 	C$lab3_3k.c$91$1$126 ==.
                                   2572 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:91: lcd_clear();
      0005B3 12r01r00         [24] 2573 	lcall	_lcd_clear
                           0005B6  2574 	C$lab3_3k.c$92$1$126 ==.
                                   2575 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:92: lcd_print("Calibration:\nHello world!\n");
      0005B6 74r9A            [12] 2576 	mov	a,#___str_6
      0005B8 C0 E0            [24] 2577 	push	acc
      0005BA 74s00            [12] 2578 	mov	a,#(___str_6 >> 8)
      0005BC C0 E0            [24] 2579 	push	acc
      0005BE 74 80            [12] 2580 	mov	a,#0x80
      0005C0 C0 E0            [24] 2581 	push	acc
      0005C2 12r00r7B         [24] 2582 	lcall	_lcd_print
      0005C5 15 81            [12] 2583 	dec	sp
      0005C7 15 81            [12] 2584 	dec	sp
      0005C9 15 81            [12] 2585 	dec	sp
                           0005CB  2586 	C$lab3_3k.c$95$1$126 ==.
                                   2587 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:95: getchar();
      0005CB 12r00r54         [24] 2588 	lcall	_getchar
                           0005CE  2589 	C$lab3_3k.c$97$1$126 ==.
                                   2590 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:97: while(1)
      0005CE                       2591 00105$:
                           0005CE  2592 	C$lab3_3k.c$99$2$127 ==.
                                   2593 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:99: CarControl();
      0005CE 12r06r38         [24] 2594 	lcall	_CarControl
      0005D1 80 FB            [24] 2595 	sjmp	00105$
                           0005D3  2596 	C$lab3_3k.c$101$1$126 ==.
                           0005D3  2597 	XG$main$0$0 ==.
      0005D3 22               [24] 2598 	ret
                                   2599 ;------------------------------------------------------------
                                   2600 ;Allocation info for local variables in function 'Port_Init'
                                   2601 ;------------------------------------------------------------
                           0005D4  2602 	G$Port_Init$0$0 ==.
                           0005D4  2603 	C$lab3_3k.c$109$1$126 ==.
                                   2604 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:109: void Port_Init()
                                   2605 ;	-----------------------------------------
                                   2606 ;	 function Port_Init
                                   2607 ;	-----------------------------------------
      0005D4                       2608 _Port_Init:
                           0005D4  2609 	C$lab3_3k.c$111$1$128 ==.
                                   2610 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:111: P1MDOUT |= 0x0C;  //set output pin for CEX0 or CEX2 in push-pull mode on p1.0-steering, p1.2-motor
      0005D4 43 A5 0C         [24] 2611 	orl	_P1MDOUT,#0x0c
                           0005D7  2612 	C$lab3_3k.c$112$1$128 ==.
                                   2613 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:112: P3MDOUT &= ~0x80; //set input pin open-drain for slide switch on p3.5, p3.6, p3.7
      0005D7 53 A7 7F         [24] 2614 	anl	_P3MDOUT,#0x7f
                           0005DA  2615 	C$lab3_3k.c$113$1$128 ==.
                                   2616 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:113: P3 |= 0x80; //set input pin in high-impedience
      0005DA 43 B0 80         [24] 2617 	orl	_P3,#0x80
                           0005DD  2618 	C$lab3_3k.c$114$1$128 ==.
                           0005DD  2619 	XG$Port_Init$0$0 ==.
      0005DD 22               [24] 2620 	ret
                                   2621 ;------------------------------------------------------------
                                   2622 ;Allocation info for local variables in function 'XBR0_Init'
                                   2623 ;------------------------------------------------------------
                           0005DE  2624 	G$XBR0_Init$0$0 ==.
                           0005DE  2625 	C$lab3_3k.c$122$1$128 ==.
                                   2626 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:122: void XBR0_Init()
                                   2627 ;	-----------------------------------------
                                   2628 ;	 function XBR0_Init
                                   2629 ;	-----------------------------------------
      0005DE                       2630 _XBR0_Init:
                           0005DE  2631 	C$lab3_3k.c$124$1$129 ==.
                                   2632 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:124: XBR0 = 0x27;  //configure crossbar as directed in the laboratory
      0005DE 75 E1 27         [24] 2633 	mov	_XBR0,#0x27
                           0005E1  2634 	C$lab3_3k.c$126$1$129 ==.
                           0005E1  2635 	XG$XBR0_Init$0$0 ==.
      0005E1 22               [24] 2636 	ret
                                   2637 ;------------------------------------------------------------
                                   2638 ;Allocation info for local variables in function 'PCA_Init'
                                   2639 ;------------------------------------------------------------
                           0005E2  2640 	G$PCA_Init$0$0 ==.
                           0005E2  2641 	C$lab3_3k.c$134$1$129 ==.
                                   2642 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:134: void PCA_Init(void)
                                   2643 ;	-----------------------------------------
                                   2644 ;	 function PCA_Init
                                   2645 ;	-----------------------------------------
      0005E2                       2646 _PCA_Init:
                           0005E2  2647 	C$lab3_3k.c$138$1$131 ==.
                                   2648 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:138: PCA0CN = 0x40;
      0005E2 75 D8 40         [24] 2649 	mov	_PCA0CN,#0x40
                           0005E5  2650 	C$lab3_3k.c$139$1$131 ==.
                                   2651 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:139: PCA0MD = 0x81;
      0005E5 75 D9 81         [24] 2652 	mov	_PCA0MD,#0x81
                           0005E8  2653 	C$lab3_3k.c$140$1$131 ==.
                                   2654 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:140: EIE1 |= 0x08;
      0005E8 43 E6 08         [24] 2655 	orl	_EIE1,#0x08
                           0005EB  2656 	C$lab3_3k.c$141$1$131 ==.
                                   2657 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:141: EA = 1;
      0005EB D2 AF            [12] 2658 	setb	_EA
                           0005ED  2659 	C$lab3_3k.c$143$1$131 ==.
                                   2660 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:143: PCA0CPM0 = PCA0CPM2 = PCA0CPM3 = 0xC2;
      0005ED 75 DD C2         [24] 2661 	mov	_PCA0CPM3,#0xc2
      0005F0 75 DC C2         [24] 2662 	mov	_PCA0CPM2,#0xc2
      0005F3 75 DA C2         [24] 2663 	mov	_PCA0CPM0,#0xc2
                           0005F6  2664 	C$lab3_3k.c$144$1$131 ==.
                           0005F6  2665 	XG$PCA_Init$0$0 ==.
      0005F6 22               [24] 2666 	ret
                                   2667 ;------------------------------------------------------------
                                   2668 ;Allocation info for local variables in function 'SMB_Init'
                                   2669 ;------------------------------------------------------------
                           0005F7  2670 	G$SMB_Init$0$0 ==.
                           0005F7  2671 	C$lab3_3k.c$148$1$131 ==.
                                   2672 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:148: void SMB_Init(void)
                                   2673 ;	-----------------------------------------
                                   2674 ;	 function SMB_Init
                                   2675 ;	-----------------------------------------
      0005F7                       2676 _SMB_Init:
                           0005F7  2677 	C$lab3_3k.c$150$1$133 ==.
                                   2678 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:150: SMB0CR = 0x93;
      0005F7 75 CF 93         [24] 2679 	mov	_SMB0CR,#0x93
                           0005FA  2680 	C$lab3_3k.c$151$1$133 ==.
                                   2681 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:151: ENSMB = 1; 
      0005FA D2 C6            [12] 2682 	setb	_ENSMB
                           0005FC  2683 	C$lab3_3k.c$152$1$133 ==.
                           0005FC  2684 	XG$SMB_Init$0$0 ==.
      0005FC 22               [24] 2685 	ret
                                   2686 ;------------------------------------------------------------
                                   2687 ;Allocation info for local variables in function 'PCA_ISR'
                                   2688 ;------------------------------------------------------------
                           0005FD  2689 	G$PCA_ISR$0$0 ==.
                           0005FD  2690 	C$lab3_3k.c$159$1$133 ==.
                                   2691 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:159: void PCA_ISR ( void ) __interrupt 9
                                   2692 ;	-----------------------------------------
                                   2693 ;	 function PCA_ISR
                                   2694 ;	-----------------------------------------
      0005FD                       2695 _PCA_ISR:
      0005FD C0 E0            [24] 2696 	push	acc
      0005FF C0 D0            [24] 2697 	push	psw
                           000601  2698 	C$lab3_3k.c$161$1$135 ==.
                                   2699 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:161: Counts ++;
      000601 05*14            [12] 2700 	inc	_Counts
      000603 E4               [12] 2701 	clr	a
      000604 B5*14 02         [24] 2702 	cjne	a,_Counts,00118$
      000607 05*15            [12] 2703 	inc	(_Counts + 1)
      000609                       2704 00118$:
                           000609  2705 	C$lab3_3k.c$162$1$135 ==.
                                   2706 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:162: if(CF)
      000609 30 DF 24         [24] 2707 	jnb	_CF,00106$
                           00060C  2708 	C$lab3_3k.c$164$2$136 ==.
                                   2709 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:164: r_Counts++;
      00060C 05*20            [12] 2710 	inc	_r_Counts
                           00060E  2711 	C$lab3_3k.c$165$2$136 ==.
                                   2712 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:165: h_Counts++;
      00060E 05*27            [12] 2713 	inc	_h_Counts
                           000610  2714 	C$lab3_3k.c$168$2$136 ==.
                                   2715 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:168: PCA0 = 65535 - 36864;
      000610 75 E9 FF         [24] 2716 	mov	((_PCA0 >> 0) & 0xFF),#0xff
      000613 75 F9 6F         [24] 2717 	mov	((_PCA0 >> 8) & 0xFF),#0x6f
                           000616  2718 	C$lab3_3k.c$170$2$136 ==.
                                   2719 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:170: CF=0;//CF 
      000616 C2 DF            [12] 2720 	clr	_CF
                           000618  2721 	C$lab3_3k.c$172$2$136 ==.
                                   2722 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:172: if(r_Counts>=4)//4 overflows, 80 ms
      000618 74 FC            [12] 2723 	mov	a,#0x100 - 0x04
      00061A 25*20            [12] 2724 	add	a,_r_Counts
      00061C 50 06            [24] 2725 	jnc	00102$
                           00061E  2726 	C$lab3_3k.c$174$3$137 ==.
                                   2727 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:174: new_range = 1;
      00061E 75*21 01         [24] 2728 	mov	_new_range,#0x01
                           000621  2729 	C$lab3_3k.c$175$3$137 ==.
                                   2730 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:175: r_Counts = 0;
      000621 75*20 00         [24] 2731 	mov	_r_Counts,#0x00
      000624                       2732 00102$:
                           000624  2733 	C$lab3_3k.c$178$2$136 ==.
                                   2734 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:178: if(h_Counts>=2)//40ms
      000624 74 FE            [12] 2735 	mov	a,#0x100 - 0x02
      000626 25*27            [12] 2736 	add	a,_h_Counts
      000628 50 06            [24] 2737 	jnc	00106$
                           00062A  2738 	C$lab3_3k.c$180$3$138 ==.
                                   2739 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:180: new_heading = 1;
      00062A 75*28 01         [24] 2740 	mov	_new_heading,#0x01
                           00062D  2741 	C$lab3_3k.c$181$3$138 ==.
                                   2742 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:181: h_Counts = 0;
      00062D 75*27 00         [24] 2743 	mov	_h_Counts,#0x00
      000630                       2744 00106$:
                           000630  2745 	C$lab3_3k.c$185$1$135 ==.
                                   2746 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:185: PCA0CN &= 0x40;	
      000630 53 D8 40         [24] 2747 	anl	_PCA0CN,#0x40
      000633 D0 D0            [24] 2748 	pop	psw
      000635 D0 E0            [24] 2749 	pop	acc
                           000637  2750 	C$lab3_3k.c$186$1$135 ==.
                           000637  2751 	XG$PCA_ISR$0$0 ==.
      000637 32               [24] 2752 	reti
                                   2753 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2754 ;	eliminated unneeded push/pop dpl
                                   2755 ;	eliminated unneeded push/pop dph
                                   2756 ;	eliminated unneeded push/pop b
                                   2757 ;------------------------------------------------------------
                                   2758 ;Allocation info for local variables in function 'CarControl'
                                   2759 ;------------------------------------------------------------
                           000638  2760 	G$CarControl$0$0 ==.
                           000638  2761 	C$lab3_3k.c$188$1$135 ==.
                                   2762 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:188: void CarControl()
                                   2763 ;	-----------------------------------------
                                   2764 ;	 function CarControl
                                   2765 ;	-----------------------------------------
      000638                       2766 _CarControl:
                           000638  2767 	C$lab3_3k.c$190$3$141 ==.
                                   2768 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:190: while(!mSS)
      000638                       2769 00112$:
      000638 30 B7 03         [24] 2770 	jnb	_mSS,00189$
      00063B 02r06rF7         [24] 2771 	ljmp	00151$
      00063E                       2772 00189$:
                           00063E  2773 	C$lab3_3k.c$192$2$140 ==.
                                   2774 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:192: Set_Pulsewidth();
      00063E 12r07rFC         [24] 2775 	lcall	_Set_Pulsewidth
                           000641  2776 	C$lab3_3k.c$193$2$140 ==.
                                   2777 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:193: if(new_range)
      000641 E5*21            [12] 2778 	mov	a,_new_range
      000643 60 62            [24] 2779 	jz	00106$
                           000645  2780 	C$lab3_3k.c$195$3$141 ==.
                                   2781 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:195: dist = ReadRanger();
      000645 12r0DrD6         [24] 2782 	lcall	_ReadRanger
      000648 AE 82            [24] 2783 	mov	r6,dpl
      00064A 8E*1A            [24] 2784 	mov	_dist,r6
                           00064C  2785 	C$lab3_3k.c$196$3$141 ==.
                                   2786 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:196: r_Data[0] = 0x51;//reading in cm
      00064C 75*1B 51         [24] 2787 	mov	_r_Data,#0x51
                           00064F  2788 	C$lab3_3k.c$197$3$141 ==.
                                   2789 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:197: i2c_write_data(r_addr,0,r_Data,1);
      00064F 75*0Br1B         [24] 2790 	mov	_i2c_write_data_PARM_3,#_r_Data
      000652 75*0C 00         [24] 2791 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000655 75*0D 40         [24] 2792 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000658 75*0A 00         [24] 2793 	mov	_i2c_write_data_PARM_2,#0x00
      00065B 75*0E 01         [24] 2794 	mov	_i2c_write_data_PARM_4,#0x01
      00065E 85*1F 82         [24] 2795 	mov	dpl,_r_addr
      000661 12r03r8C         [24] 2796 	lcall	_i2c_write_data
                           000664  2797 	C$lab3_3k.c$198$3$141 ==.
                                   2798 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:198: new_range = 0;
      000664 75*21 00         [24] 2799 	mov	_new_range,#0x00
                           000667  2800 	C$lab3_3k.c$199$3$141 ==.
                                   2801 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:199: printf("distance is %u \r\n",dist);
      000667 AE*1A            [24] 2802 	mov	r6,_dist
      000669 7F 00            [12] 2803 	mov	r7,#0x00
      00066B C0 06            [24] 2804 	push	ar6
      00066D C0 07            [24] 2805 	push	ar7
      00066F 74rB5            [12] 2806 	mov	a,#___str_7
      000671 C0 E0            [24] 2807 	push	acc
      000673 74s00            [12] 2808 	mov	a,#(___str_7 >> 8)
      000675 C0 E0            [24] 2809 	push	acc
      000677 74 80            [12] 2810 	mov	a,#0x80
      000679 C0 E0            [24] 2811 	push	acc
      00067B 12r00r00         [24] 2812 	lcall	_printf
      00067E E5 81            [12] 2813 	mov	a,sp
      000680 24 FB            [12] 2814 	add	a,#0xfb
      000682 F5 81            [12] 2815 	mov	sp,a
                           000684  2816 	C$lab3_3k.c$200$3$141 ==.
                                   2817 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:200: if(dist <= 80)
      000684 E5*1A            [12] 2818 	mov	a,_dist
      000686 24 AF            [12] 2819 	add	a,#0xff - 0x50
      000688 40 02            [24] 2820 	jc	00102$
                           00068A  2821 	C$lab3_3k.c$202$4$142 ==.
                                   2822 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:202: LED = 0;
      00068A C2 94            [12] 2823 	clr	_LED
      00068C                       2824 00102$:
                           00068C  2825 	C$lab3_3k.c$204$3$141 ==.
                                   2826 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:204: if(mSS)
      00068C 30 B7 18         [24] 2827 	jnb	_mSS,00106$
                           00068F  2828 	C$lab3_3k.c$206$4$143 ==.
                                   2829 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:206: mPW = mPW_CENTER;
      00068F 90r00r06         [24] 2830 	mov	dptr,#_mPW_CENTER
      000692 E0               [24] 2831 	movx	a,@dptr
      000693 F5*18            [12] 2832 	mov	_mPW,a
      000695 A3               [24] 2833 	inc	dptr
      000696 E0               [24] 2834 	movx	a,@dptr
      000697 F5*19            [12] 2835 	mov	(_mPW + 1),a
                           000699  2836 	C$lab3_3k.c$207$4$143 ==.
                                   2837 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:207: sPW = sPW_CENTER;
      000699 90r00r00         [24] 2838 	mov	dptr,#_sPW_CENTER
      00069C E0               [24] 2839 	movx	a,@dptr
      00069D F5*16            [12] 2840 	mov	_sPW,a
      00069F A3               [24] 2841 	inc	dptr
      0006A0 E0               [24] 2842 	movx	a,@dptr
      0006A1 F5*17            [12] 2843 	mov	(_sPW + 1),a
                           0006A3  2844 	C$lab3_3k.c$208$4$143 ==.
                                   2845 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:208: LED = 1;
      0006A3 D2 94            [12] 2846 	setb	_LED
                           0006A5  2847 	C$lab3_3k.c$209$4$143 ==.
                                   2848 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:209: break;
      0006A5 80 50            [24] 2849 	sjmp	00151$
      0006A7                       2850 00106$:
                           0006A7  2851 	C$lab3_3k.c$213$2$140 ==.
                                   2852 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:213: if(new_heading && dist > 80) 
      0006A7 E5*28            [12] 2853 	mov	a,_new_heading
      0006A9 60 8D            [24] 2854 	jz	00112$
      0006AB E5*1A            [12] 2855 	mov	a,_dist
      0006AD 24 AF            [12] 2856 	add	a,#0xff - 0x50
      0006AF 40 03            [24] 2857 	jc	00194$
      0006B1 02r06r38         [24] 2858 	ljmp	00112$
      0006B4                       2859 00194$:
                           0006B4  2860 	C$lab3_3k.c$215$3$144 ==.
                                   2861 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:215: LED = 1;
      0006B4 D2 94            [12] 2862 	setb	_LED
                           0006B6  2863 	C$lab3_3k.c$216$3$144 ==.
                                   2864 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:216: heading = ReadCompass();
      0006B6 12r0Er02         [24] 2865 	lcall	_ReadCompass
      0006B9 85 82*25         [24] 2866 	mov	_heading,dpl
      0006BC 85 83*26         [24] 2867 	mov	(_heading + 1),dph
                           0006BF  2868 	C$lab3_3k.c$217$3$144 ==.
                                   2869 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:217: printf("heading towards %u \n",heading);
      0006BF C0*25            [24] 2870 	push	_heading
      0006C1 C0*26            [24] 2871 	push	(_heading + 1)
      0006C3 74rC7            [12] 2872 	mov	a,#___str_8
      0006C5 C0 E0            [24] 2873 	push	acc
      0006C7 74s00            [12] 2874 	mov	a,#(___str_8 >> 8)
      0006C9 C0 E0            [24] 2875 	push	acc
      0006CB 74 80            [12] 2876 	mov	a,#0x80
      0006CD C0 E0            [24] 2877 	push	acc
      0006CF 12r00r00         [24] 2878 	lcall	_printf
      0006D2 E5 81            [12] 2879 	mov	a,sp
      0006D4 24 FB            [12] 2880 	add	a,#0xfb
      0006D6 F5 81            [12] 2881 	mov	sp,a
                           0006D8  2882 	C$lab3_3k.c$218$3$144 ==.
                                   2883 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:218: new_heading = 0;
      0006D8 75*28 00         [24] 2884 	mov	_new_heading,#0x00
                           0006DB  2885 	C$lab3_3k.c$219$3$144 ==.
                                   2886 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:219: if(mSS)
      0006DB 20 B7 03         [24] 2887 	jb	_mSS,00195$
      0006DE 02r06r38         [24] 2888 	ljmp	00112$
      0006E1                       2889 00195$:
                           0006E1  2890 	C$lab3_3k.c$221$4$145 ==.
                                   2891 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:221: sPW = sPW_CENTER;
      0006E1 90r00r00         [24] 2892 	mov	dptr,#_sPW_CENTER
      0006E4 E0               [24] 2893 	movx	a,@dptr
      0006E5 F5*16            [12] 2894 	mov	_sPW,a
      0006E7 A3               [24] 2895 	inc	dptr
      0006E8 E0               [24] 2896 	movx	a,@dptr
      0006E9 F5*17            [12] 2897 	mov	(_sPW + 1),a
                           0006EB  2898 	C$lab3_3k.c$222$4$145 ==.
                                   2899 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:222: mPW = mPW_CENTER;
      0006EB 90r00r06         [24] 2900 	mov	dptr,#_mPW_CENTER
      0006EE E0               [24] 2901 	movx	a,@dptr
      0006EF F5*18            [12] 2902 	mov	_mPW,a
      0006F1 A3               [24] 2903 	inc	dptr
      0006F2 E0               [24] 2904 	movx	a,@dptr
      0006F3 F5*19            [12] 2905 	mov	(_mPW + 1),a
                           0006F5  2906 	C$lab3_3k.c$223$4$145 ==.
                                   2907 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:223: LED = 1;
      0006F5 D2 94            [12] 2908 	setb	_LED
                           0006F7  2909 	C$lab3_3k.c$231$1$139 ==.
                                   2910 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:231: do
      0006F7                       2911 00151$:
      0006F7                       2912 00130$:
                           0006F7  2913 	C$lab3_3k.c$234$2$146 ==.
                                   2914 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:234: if(new_range && mSS)
      0006F7 E5*21            [12] 2915 	mov	a,_new_range
      0006F9 60 4F            [24] 2916 	jz	00120$
      0006FB 30 B7 4C         [24] 2917 	jnb	_mSS,00120$
                           0006FE  2918 	C$lab3_3k.c$236$3$147 ==.
                                   2919 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:236: dist = ReadRanger();
      0006FE 12r0DrD6         [24] 2920 	lcall	_ReadRanger
      000701 AE 82            [24] 2921 	mov	r6,dpl
      000703 8E*1A            [24] 2922 	mov	_dist,r6
                           000705  2923 	C$lab3_3k.c$237$3$147 ==.
                                   2924 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:237: r_Data[0] = 0x51;//reading in cm
      000705 75*1B 51         [24] 2925 	mov	_r_Data,#0x51
                           000708  2926 	C$lab3_3k.c$238$3$147 ==.
                                   2927 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:238: i2c_write_data(r_addr,0,r_Data,1);
      000708 75*0Br1B         [24] 2928 	mov	_i2c_write_data_PARM_3,#_r_Data
      00070B 75*0C 00         [24] 2929 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00070E 75*0D 40         [24] 2930 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000711 75*0A 00         [24] 2931 	mov	_i2c_write_data_PARM_2,#0x00
      000714 75*0E 01         [24] 2932 	mov	_i2c_write_data_PARM_4,#0x01
      000717 85*1F 82         [24] 2933 	mov	dpl,_r_addr
      00071A 12r03r8C         [24] 2934 	lcall	_i2c_write_data
                           00071D  2935 	C$lab3_3k.c$239$3$147 ==.
                                   2936 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:239: new_range = 0;
      00071D 75*21 00         [24] 2937 	mov	_new_range,#0x00
                           000720  2938 	C$lab3_3k.c$240$3$147 ==.
                                   2939 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:240: printf("distance is %u \r\n",dist);
      000720 AE*1A            [24] 2940 	mov	r6,_dist
      000722 7F 00            [12] 2941 	mov	r7,#0x00
      000724 C0 06            [24] 2942 	push	ar6
      000726 C0 07            [24] 2943 	push	ar7
      000728 74rB5            [12] 2944 	mov	a,#___str_7
      00072A C0 E0            [24] 2945 	push	acc
      00072C 74s00            [12] 2946 	mov	a,#(___str_7 >> 8)
      00072E C0 E0            [24] 2947 	push	acc
      000730 74 80            [12] 2948 	mov	a,#0x80
      000732 C0 E0            [24] 2949 	push	acc
      000734 12r00r00         [24] 2950 	lcall	_printf
      000737 E5 81            [12] 2951 	mov	a,sp
      000739 24 FB            [12] 2952 	add	a,#0xfb
      00073B F5 81            [12] 2953 	mov	sp,a
                           00073D  2954 	C$lab3_3k.c$241$3$147 ==.
                                   2955 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:241: if(dist <= 80)
      00073D E5*1A            [12] 2956 	mov	a,_dist
      00073F 24 AF            [12] 2957 	add	a,#0xff - 0x50
      000741 40 20            [24] 2958 	jc	00121$
                           000743  2959 	C$lab3_3k.c$243$4$148 ==.
                                   2960 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:243: LED = 0;
      000743 C2 94            [12] 2961 	clr	_LED
                           000745  2962 	C$lab3_3k.c$244$4$148 ==.
                                   2963 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:244: Set_Overide();//overide heading
      000745 12r08rF8         [24] 2964 	lcall	_Set_Overide
      000748 80 19            [24] 2965 	sjmp	00121$
      00074A                       2966 00120$:
                           00074A  2967 	C$lab3_3k.c$247$2$146 ==.
                                   2968 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:247: else if(!mSS)
      00074A 20 B7 16         [24] 2969 	jb	_mSS,00121$
                           00074D  2970 	C$lab3_3k.c$249$3$149 ==.
                                   2971 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:249: sPW = sPW_CENTER;
      00074D 90r00r00         [24] 2972 	mov	dptr,#_sPW_CENTER
      000750 E0               [24] 2973 	movx	a,@dptr
      000751 F5*16            [12] 2974 	mov	_sPW,a
      000753 A3               [24] 2975 	inc	dptr
      000754 E0               [24] 2976 	movx	a,@dptr
      000755 F5*17            [12] 2977 	mov	(_sPW + 1),a
                           000757  2978 	C$lab3_3k.c$250$3$149 ==.
                                   2979 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:250: mPW = mPW_CENTER;
      000757 90r00r06         [24] 2980 	mov	dptr,#_mPW_CENTER
      00075A E0               [24] 2981 	movx	a,@dptr
      00075B F5*18            [12] 2982 	mov	_mPW,a
      00075D A3               [24] 2983 	inc	dptr
      00075E E0               [24] 2984 	movx	a,@dptr
      00075F F5*19            [12] 2985 	mov	(_mPW + 1),a
                           000761  2986 	C$lab3_3k.c$251$3$149 ==.
                                   2987 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:251: LED = 1;
      000761 D2 94            [12] 2988 	setb	_LED
      000763                       2989 00121$:
                           000763  2990 	C$lab3_3k.c$254$2$146 ==.
                                   2991 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:254: if(dist > 80 && new_heading && mSS) 
      000763 E5*1A            [12] 2992 	mov	a,_dist
      000765 24 AF            [12] 2993 	add	a,#0xff - 0x50
      000767 50 33            [24] 2994 	jnc	00126$
      000769 E5*28            [12] 2995 	mov	a,_new_heading
      00076B 60 2F            [24] 2996 	jz	00126$
      00076D 30 B7 2C         [24] 2997 	jnb	_mSS,00126$
                           000770  2998 	C$lab3_3k.c$256$3$150 ==.
                                   2999 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:256: LED = 1;
      000770 D2 94            [12] 3000 	setb	_LED
                           000772  3001 	C$lab3_3k.c$257$3$150 ==.
                                   3002 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:257: heading = ReadCompass();
      000772 12r0Er02         [24] 3003 	lcall	_ReadCompass
      000775 85 82*25         [24] 3004 	mov	_heading,dpl
      000778 85 83*26         [24] 3005 	mov	(_heading + 1),dph
                           00077B  3006 	C$lab3_3k.c$258$3$150 ==.
                                   3007 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:258: printf("heading towards %u \n",heading);
      00077B C0*25            [24] 3008 	push	_heading
      00077D C0*26            [24] 3009 	push	(_heading + 1)
      00077F 74rC7            [12] 3010 	mov	a,#___str_8
      000781 C0 E0            [24] 3011 	push	acc
      000783 74s00            [12] 3012 	mov	a,#(___str_8 >> 8)
      000785 C0 E0            [24] 3013 	push	acc
      000787 74 80            [12] 3014 	mov	a,#0x80
      000789 C0 E0            [24] 3015 	push	acc
      00078B 12r00r00         [24] 3016 	lcall	_printf
      00078E E5 81            [12] 3017 	mov	a,sp
      000790 24 FB            [12] 3018 	add	a,#0xfb
      000792 F5 81            [12] 3019 	mov	sp,a
                           000794  3020 	C$lab3_3k.c$259$3$150 ==.
                                   3021 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:259: new_heading = 0;
      000794 75*28 00         [24] 3022 	mov	_new_heading,#0x00
                           000797  3023 	C$lab3_3k.c$260$3$150 ==.
                                   3024 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:260: Set_Heading();
      000797 12r0Br40         [24] 3025 	lcall	_Set_Heading
      00079A 80 19            [24] 3026 	sjmp	00127$
      00079C                       3027 00126$:
                           00079C  3028 	C$lab3_3k.c$262$2$146 ==.
                                   3029 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:262: else if(!mSS)
      00079C 20 B7 16         [24] 3030 	jb	_mSS,00127$
                           00079F  3031 	C$lab3_3k.c$264$3$151 ==.
                                   3032 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:264: sPW = sPW_CENTER;
      00079F 90r00r00         [24] 3033 	mov	dptr,#_sPW_CENTER
      0007A2 E0               [24] 3034 	movx	a,@dptr
      0007A3 F5*16            [12] 3035 	mov	_sPW,a
      0007A5 A3               [24] 3036 	inc	dptr
      0007A6 E0               [24] 3037 	movx	a,@dptr
      0007A7 F5*17            [12] 3038 	mov	(_sPW + 1),a
                           0007A9  3039 	C$lab3_3k.c$265$3$151 ==.
                                   3040 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:265: mPW = mPW_CENTER;
      0007A9 90r00r06         [24] 3041 	mov	dptr,#_mPW_CENTER
      0007AC E0               [24] 3042 	movx	a,@dptr
      0007AD F5*18            [12] 3043 	mov	_mPW,a
      0007AF A3               [24] 3044 	inc	dptr
      0007B0 E0               [24] 3045 	movx	a,@dptr
      0007B1 F5*19            [12] 3046 	mov	(_mPW + 1),a
                           0007B3  3047 	C$lab3_3k.c$266$3$151 ==.
                                   3048 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:266: LED = 1;
      0007B3 D2 94            [12] 3049 	setb	_LED
      0007B5                       3050 00127$:
                           0007B5  3051 	C$lab3_3k.c$269$2$146 ==.
                                   3052 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:269: Set_Speed();
      0007B5 12r0ArBF         [24] 3053 	lcall	_Set_Speed
                           0007B8  3054 	C$lab3_3k.c$271$1$139 ==.
                                   3055 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:271: }while(mSS);
      0007B8 30 B7 03         [24] 3056 	jnb	_mSS,00204$
      0007BB 02r06rF7         [24] 3057 	ljmp	00130$
      0007BE                       3058 00204$:
                           0007BE  3059 	C$lab3_3k.c$273$1$139 ==.
                                   3060 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:273: lcd_clear();
      0007BE 12r01r00         [24] 3061 	lcall	_lcd_clear
                           0007C1  3062 	C$lab3_3k.c$274$1$139 ==.
                                   3063 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:274: lcd_print("\n\rHeading %u,\n\r Reading %u", heading, range);  
      0007C1 C0*1D            [24] 3064 	push	_range
      0007C3 C0*1E            [24] 3065 	push	(_range + 1)
      0007C5 C0*25            [24] 3066 	push	_heading
      0007C7 C0*26            [24] 3067 	push	(_heading + 1)
      0007C9 74rDC            [12] 3068 	mov	a,#___str_9
      0007CB C0 E0            [24] 3069 	push	acc
      0007CD 74s00            [12] 3070 	mov	a,#(___str_9 >> 8)
      0007CF C0 E0            [24] 3071 	push	acc
      0007D1 74 80            [12] 3072 	mov	a,#0x80
      0007D3 C0 E0            [24] 3073 	push	acc
      0007D5 12r00r7B         [24] 3074 	lcall	_lcd_print
      0007D8 E5 81            [12] 3075 	mov	a,sp
      0007DA 24 F9            [12] 3076 	add	a,#0xf9
      0007DC F5 81            [12] 3077 	mov	sp,a
                           0007DE  3078 	C$lab3_3k.c$275$1$139 ==.
                                   3079 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:275: printf("\n\rHeading %u,\n\r ranger %u", heading, range);
      0007DE C0*1D            [24] 3080 	push	_range
      0007E0 C0*1E            [24] 3081 	push	(_range + 1)
      0007E2 C0*25            [24] 3082 	push	_heading
      0007E4 C0*26            [24] 3083 	push	(_heading + 1)
      0007E6 74rF7            [12] 3084 	mov	a,#___str_10
      0007E8 C0 E0            [24] 3085 	push	acc
      0007EA 74s00            [12] 3086 	mov	a,#(___str_10 >> 8)
      0007EC C0 E0            [24] 3087 	push	acc
      0007EE 74 80            [12] 3088 	mov	a,#0x80
      0007F0 C0 E0            [24] 3089 	push	acc
      0007F2 12r00r00         [24] 3090 	lcall	_printf
      0007F5 E5 81            [12] 3091 	mov	a,sp
      0007F7 24 F9            [12] 3092 	add	a,#0xf9
      0007F9 F5 81            [12] 3093 	mov	sp,a
                           0007FB  3094 	C$lab3_3k.c$277$1$139 ==.
                           0007FB  3095 	XG$CarControl$0$0 ==.
      0007FB 22               [24] 3096 	ret
                                   3097 ;------------------------------------------------------------
                                   3098 ;Allocation info for local variables in function 'Set_Pulsewidth'
                                   3099 ;------------------------------------------------------------
                                   3100 ;input                     Allocated to registers r7 
                                   3101 ;------------------------------------------------------------
                           0007FC  3102 	G$Set_Pulsewidth$0$0 ==.
                           0007FC  3103 	C$lab3_3k.c$279$1$139 ==.
                                   3104 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:279: void Set_Pulsewidth()
                                   3105 ;	-----------------------------------------
                                   3106 ;	 function Set_Pulsewidth
                                   3107 ;	-----------------------------------------
      0007FC                       3108 _Set_Pulsewidth:
                           0007FC  3109 	C$lab3_3k.c$283$1$152 ==.
                                   3110 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:283: input = getchar();
      0007FC 12r00r54         [24] 3111 	lcall	_getchar
      0007FF AF 82            [24] 3112 	mov	r7,dpl
                           000801  3113 	C$lab3_3k.c$284$1$152 ==.
                                   3114 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:284: if(input == 'w')  // single character input to increase the pulsewidth
      000801 BF 77 28         [24] 3115 	cjne	r7,#0x77,00108$
                           000804  3116 	C$lab3_3k.c$286$2$153 ==.
                                   3117 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:286: mPW += 50;
      000804 74 32            [12] 3118 	mov	a,#0x32
      000806 25*18            [12] 3119 	add	a,_mPW
      000808 F5*18            [12] 3120 	mov	_mPW,a
      00080A E4               [12] 3121 	clr	a
      00080B 35*19            [12] 3122 	addc	a,(_mPW + 1)
      00080D F5*19            [12] 3123 	mov	(_mPW + 1),a
                           00080F  3124 	C$lab3_3k.c$287$2$153 ==.
                                   3125 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:287: if(mPW > mPW_MAX)  // check if greater than pulsewidth maximum
      00080F 90r00r0A         [24] 3126 	mov	dptr,#_mPW_MAX
      000812 E0               [24] 3127 	movx	a,@dptr
      000813 FD               [12] 3128 	mov	r5,a
      000814 A3               [24] 3129 	inc	dptr
      000815 E0               [24] 3130 	movx	a,@dptr
      000816 FE               [12] 3131 	mov	r6,a
      000817 C3               [12] 3132 	clr	c
      000818 ED               [12] 3133 	mov	a,r5
      000819 95*18            [12] 3134 	subb	a,_mPW
      00081B EE               [12] 3135 	mov	a,r6
      00081C 95*19            [12] 3136 	subb	a,(_mPW + 1)
      00081E 50 36            [24] 3137 	jnc	00109$
                           000820  3138 	C$lab3_3k.c$288$2$153 ==.
                                   3139 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:288: mPW = mPW_MAX;    // set PW to the maximum value
      000820 90r00r0A         [24] 3140 	mov	dptr,#_mPW_MAX
      000823 E0               [24] 3141 	movx	a,@dptr
      000824 F5*18            [12] 3142 	mov	_mPW,a
      000826 A3               [24] 3143 	inc	dptr
      000827 E0               [24] 3144 	movx	a,@dptr
      000828 F5*19            [12] 3145 	mov	(_mPW + 1),a
      00082A 80 2A            [24] 3146 	sjmp	00109$
      00082C                       3147 00108$:
                           00082C  3148 	C$lab3_3k.c$290$1$152 ==.
                                   3149 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:290: else if(input == 's')  // single character input to decrease the pulsewidth
      00082C BF 73 27         [24] 3150 	cjne	r7,#0x73,00109$
                           00082F  3151 	C$lab3_3k.c$292$2$154 ==.
                                   3152 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:292: mPW -= 50;
      00082F E5*18            [12] 3153 	mov	a,_mPW
      000831 24 CE            [12] 3154 	add	a,#0xce
      000833 F5*18            [12] 3155 	mov	_mPW,a
      000835 E5*19            [12] 3156 	mov	a,(_mPW + 1)
      000837 34 FF            [12] 3157 	addc	a,#0xff
      000839 F5*19            [12] 3158 	mov	(_mPW + 1),a
                           00083B  3159 	C$lab3_3k.c$293$2$154 ==.
                                   3160 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:293: if(mPW < mPW_MIN)  // check if less than pulsewidth minimum
      00083B 90r00r08         [24] 3161 	mov	dptr,#_mPW_MIN
      00083E E0               [24] 3162 	movx	a,@dptr
      00083F FD               [12] 3163 	mov	r5,a
      000840 A3               [24] 3164 	inc	dptr
      000841 E0               [24] 3165 	movx	a,@dptr
      000842 FE               [12] 3166 	mov	r6,a
      000843 C3               [12] 3167 	clr	c
      000844 E5*18            [12] 3168 	mov	a,_mPW
      000846 9D               [12] 3169 	subb	a,r5
      000847 E5*19            [12] 3170 	mov	a,(_mPW + 1)
      000849 9E               [12] 3171 	subb	a,r6
      00084A 50 0A            [24] 3172 	jnc	00109$
                           00084C  3173 	C$lab3_3k.c$294$2$154 ==.
                                   3174 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:294: mPW = mPW_MIN;     // set PW to the minimum value
      00084C 90r00r08         [24] 3175 	mov	dptr,#_mPW_MIN
      00084F E0               [24] 3176 	movx	a,@dptr
      000850 F5*18            [12] 3177 	mov	_mPW,a
      000852 A3               [24] 3178 	inc	dptr
      000853 E0               [24] 3179 	movx	a,@dptr
      000854 F5*19            [12] 3180 	mov	(_mPW + 1),a
      000856                       3181 00109$:
                           000856  3182 	C$lab3_3k.c$296$1$152 ==.
                                   3183 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:296: if(input == 'd')
      000856 BF 64 28         [24] 3184 	cjne	r7,#0x64,00117$
                           000859  3185 	C$lab3_3k.c$298$2$155 ==.
                                   3186 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:298: sPW += 20;
      000859 74 14            [12] 3187 	mov	a,#0x14
      00085B 25*16            [12] 3188 	add	a,_sPW
      00085D F5*16            [12] 3189 	mov	_sPW,a
      00085F E4               [12] 3190 	clr	a
      000860 35*17            [12] 3191 	addc	a,(_sPW + 1)
      000862 F5*17            [12] 3192 	mov	(_sPW + 1),a
                           000864  3193 	C$lab3_3k.c$299$2$155 ==.
                                   3194 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:299: if(sPW > sPW_MAX)  // check if greater than pulsewidth maximum
      000864 90r00r04         [24] 3195 	mov	dptr,#_sPW_MAX
      000867 E0               [24] 3196 	movx	a,@dptr
      000868 FD               [12] 3197 	mov	r5,a
      000869 A3               [24] 3198 	inc	dptr
      00086A E0               [24] 3199 	movx	a,@dptr
      00086B FE               [12] 3200 	mov	r6,a
      00086C C3               [12] 3201 	clr	c
      00086D ED               [12] 3202 	mov	a,r5
      00086E 95*16            [12] 3203 	subb	a,_sPW
      000870 EE               [12] 3204 	mov	a,r6
      000871 95*17            [12] 3205 	subb	a,(_sPW + 1)
      000873 50 36            [24] 3206 	jnc	00118$
                           000875  3207 	C$lab3_3k.c$300$2$155 ==.
                                   3208 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:300: sPW = sPW_MAX;    // set PW to the maximum value
      000875 90r00r04         [24] 3209 	mov	dptr,#_sPW_MAX
      000878 E0               [24] 3210 	movx	a,@dptr
      000879 F5*16            [12] 3211 	mov	_sPW,a
      00087B A3               [24] 3212 	inc	dptr
      00087C E0               [24] 3213 	movx	a,@dptr
      00087D F5*17            [12] 3214 	mov	(_sPW + 1),a
      00087F 80 2A            [24] 3215 	sjmp	00118$
      000881                       3216 00117$:
                           000881  3217 	C$lab3_3k.c$302$1$152 ==.
                                   3218 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:302: else if(input == 'a')  // single character input to decrease the pulsewidth
      000881 BF 61 27         [24] 3219 	cjne	r7,#0x61,00118$
                           000884  3220 	C$lab3_3k.c$304$2$156 ==.
                                   3221 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:304: sPW -= 20;
      000884 E5*16            [12] 3222 	mov	a,_sPW
      000886 24 EC            [12] 3223 	add	a,#0xec
      000888 F5*16            [12] 3224 	mov	_sPW,a
      00088A E5*17            [12] 3225 	mov	a,(_sPW + 1)
      00088C 34 FF            [12] 3226 	addc	a,#0xff
      00088E F5*17            [12] 3227 	mov	(_sPW + 1),a
                           000890  3228 	C$lab3_3k.c$305$2$156 ==.
                                   3229 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:305: if(sPW < sPW_MIN)  // check if less than pulsewidth minimum
      000890 90r00r02         [24] 3230 	mov	dptr,#_sPW_MIN
      000893 E0               [24] 3231 	movx	a,@dptr
      000894 FE               [12] 3232 	mov	r6,a
      000895 A3               [24] 3233 	inc	dptr
      000896 E0               [24] 3234 	movx	a,@dptr
      000897 FF               [12] 3235 	mov	r7,a
      000898 C3               [12] 3236 	clr	c
      000899 E5*16            [12] 3237 	mov	a,_sPW
      00089B 9E               [12] 3238 	subb	a,r6
      00089C E5*17            [12] 3239 	mov	a,(_sPW + 1)
      00089E 9F               [12] 3240 	subb	a,r7
      00089F 50 0A            [24] 3241 	jnc	00118$
                           0008A1  3242 	C$lab3_3k.c$306$2$156 ==.
                                   3243 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:306: sPW = sPW_MIN;     // set PW to the minimum value
      0008A1 90r00r02         [24] 3244 	mov	dptr,#_sPW_MIN
      0008A4 E0               [24] 3245 	movx	a,@dptr
      0008A5 F5*16            [12] 3246 	mov	_sPW,a
      0008A7 A3               [24] 3247 	inc	dptr
      0008A8 E0               [24] 3248 	movx	a,@dptr
      0008A9 F5*17            [12] 3249 	mov	(_sPW + 1),a
      0008AB                       3250 00118$:
                           0008AB  3251 	C$lab3_3k.c$308$1$152 ==.
                                   3252 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:308: printf("motor PW: %u\n", mPW);
      0008AB C0*18            [24] 3253 	push	_mPW
      0008AD C0*19            [24] 3254 	push	(_mPW + 1)
      0008AF 74r11            [12] 3255 	mov	a,#___str_11
      0008B1 C0 E0            [24] 3256 	push	acc
      0008B3 74s01            [12] 3257 	mov	a,#(___str_11 >> 8)
      0008B5 C0 E0            [24] 3258 	push	acc
      0008B7 74 80            [12] 3259 	mov	a,#0x80
      0008B9 C0 E0            [24] 3260 	push	acc
      0008BB 12r00r00         [24] 3261 	lcall	_printf
      0008BE E5 81            [12] 3262 	mov	a,sp
      0008C0 24 FB            [12] 3263 	add	a,#0xfb
      0008C2 F5 81            [12] 3264 	mov	sp,a
                           0008C4  3265 	C$lab3_3k.c$309$1$152 ==.
                                   3266 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:309: PCA0CP2 = 0xFFFF - mPW;
      0008C4 74 FF            [12] 3267 	mov	a,#0xff
      0008C6 C3               [12] 3268 	clr	c
      0008C7 95*18            [12] 3269 	subb	a,_mPW
      0008C9 F5 EC            [12] 3270 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      0008CB 74 FF            [12] 3271 	mov	a,#0xff
      0008CD 95*19            [12] 3272 	subb	a,(_mPW + 1)
      0008CF F5 FC            [12] 3273 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           0008D1  3274 	C$lab3_3k.c$310$1$152 ==.
                                   3275 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:310: printf("stering PW: %u\n", sPW);
      0008D1 C0*16            [24] 3276 	push	_sPW
      0008D3 C0*17            [24] 3277 	push	(_sPW + 1)
      0008D5 74r1F            [12] 3278 	mov	a,#___str_12
      0008D7 C0 E0            [24] 3279 	push	acc
      0008D9 74s01            [12] 3280 	mov	a,#(___str_12 >> 8)
      0008DB C0 E0            [24] 3281 	push	acc
      0008DD 74 80            [12] 3282 	mov	a,#0x80
      0008DF C0 E0            [24] 3283 	push	acc
      0008E1 12r00r00         [24] 3284 	lcall	_printf
      0008E4 E5 81            [12] 3285 	mov	a,sp
      0008E6 24 FB            [12] 3286 	add	a,#0xfb
      0008E8 F5 81            [12] 3287 	mov	sp,a
                           0008EA  3288 	C$lab3_3k.c$311$1$152 ==.
                                   3289 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:311: PCA0CP0 = 0xFFFF - sPW;
      0008EA 74 FF            [12] 3290 	mov	a,#0xff
      0008EC C3               [12] 3291 	clr	c
      0008ED 95*16            [12] 3292 	subb	a,_sPW
      0008EF F5 EA            [12] 3293 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      0008F1 74 FF            [12] 3294 	mov	a,#0xff
      0008F3 95*17            [12] 3295 	subb	a,(_sPW + 1)
      0008F5 F5 FA            [12] 3296 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           0008F7  3297 	C$lab3_3k.c$313$1$152 ==.
                           0008F7  3298 	XG$Set_Pulsewidth$0$0 ==.
      0008F7 22               [24] 3299 	ret
                                   3300 ;------------------------------------------------------------
                                   3301 ;Allocation info for local variables in function 'Set_Overide'
                                   3302 ;------------------------------------------------------------
                           0008F8  3303 	G$Set_Overide$0$0 ==.
                           0008F8  3304 	C$lab3_3k.c$315$1$152 ==.
                                   3305 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:315: void Set_Overide()
                                   3306 ;	-----------------------------------------
                                   3307 ;	 function Set_Overide
                                   3308 ;	-----------------------------------------
      0008F8                       3309 _Set_Overide:
                           0008F8  3310 	C$lab3_3k.c$317$1$157 ==.
                                   3311 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:317: if(dist < 10)
      0008F8 74 F6            [12] 3312 	mov	a,#0x100 - 0x0a
      0008FA 25*1A            [12] 3313 	add	a,_dist
      0008FC 40 0D            [24] 3314 	jc	00116$
                           0008FE  3315 	C$lab3_3k.c$318$1$157 ==.
                                   3316 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:318: sPW = sPW_MIN;
      0008FE 90r00r02         [24] 3317 	mov	dptr,#_sPW_MIN
      000901 E0               [24] 3318 	movx	a,@dptr
      000902 F5*16            [12] 3319 	mov	_sPW,a
      000904 A3               [24] 3320 	inc	dptr
      000905 E0               [24] 3321 	movx	a,@dptr
      000906 F5*17            [12] 3322 	mov	(_sPW + 1),a
      000908 02r0Ar87         [24] 3323 	ljmp	00117$
      00090B                       3324 00116$:
                           00090B  3325 	C$lab3_3k.c$319$1$157 ==.
                                   3326 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:319: else if(dist > 80)
      00090B E5*1A            [12] 3327 	mov	a,_dist
      00090D 24 AF            [12] 3328 	add	a,#0xff - 0x50
      00090F 50 0D            [24] 3329 	jnc	00113$
                           000911  3330 	C$lab3_3k.c$320$1$157 ==.
                                   3331 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:320: sPW = sPW_MAX;
      000911 90r00r04         [24] 3332 	mov	dptr,#_sPW_MAX
      000914 E0               [24] 3333 	movx	a,@dptr
      000915 F5*16            [12] 3334 	mov	_sPW,a
      000917 A3               [24] 3335 	inc	dptr
      000918 E0               [24] 3336 	movx	a,@dptr
      000919 F5*17            [12] 3337 	mov	(_sPW + 1),a
      00091B 02r0Ar87         [24] 3338 	ljmp	00117$
      00091E                       3339 00113$:
                           00091E  3340 	C$lab3_3k.c$323$2$158 ==.
                                   3341 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:323: if(dist < 45)
      00091E 74 D3            [12] 3342 	mov	a,#0x100 - 0x2d
      000920 25*1A            [12] 3343 	add	a,_dist
      000922 50 03            [24] 3344 	jnc	00140$
      000924 02r09rB7         [24] 3345 	ljmp	00110$
      000927                       3346 00140$:
                           000927  3347 	C$lab3_3k.c$324$2$158 ==.
                                   3348 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:324: sPW = sPW_CENTER - 18.57*(45 - dist);
      000927 AE*1A            [24] 3349 	mov	r6,_dist
      000929 7F 00            [12] 3350 	mov	r7,#0x00
      00092B 74 2D            [12] 3351 	mov	a,#0x2d
      00092D C3               [12] 3352 	clr	c
      00092E 9E               [12] 3353 	subb	a,r6
      00092F F5 82            [12] 3354 	mov	dpl,a
      000931 E4               [12] 3355 	clr	a
      000932 9F               [12] 3356 	subb	a,r7
      000933 F5 83            [12] 3357 	mov	dph,a
      000935 12r00r00         [24] 3358 	lcall	___sint2fs
      000938 AC 82            [24] 3359 	mov	r4,dpl
      00093A AD 83            [24] 3360 	mov	r5,dph
      00093C AE F0            [24] 3361 	mov	r6,b
      00093E FF               [12] 3362 	mov	r7,a
      00093F C0 04            [24] 3363 	push	ar4
      000941 C0 05            [24] 3364 	push	ar5
      000943 C0 06            [24] 3365 	push	ar6
      000945 C0 07            [24] 3366 	push	ar7
      000947 90 8F 5C         [24] 3367 	mov	dptr,#0x8f5c
      00094A 75 F0 94         [24] 3368 	mov	b,#0x94
      00094D 74 41            [12] 3369 	mov	a,#0x41
      00094F 12r00r00         [24] 3370 	lcall	___fsmul
      000952 AC 82            [24] 3371 	mov	r4,dpl
      000954 AD 83            [24] 3372 	mov	r5,dph
      000956 AE F0            [24] 3373 	mov	r6,b
      000958 FF               [12] 3374 	mov	r7,a
      000959 E5 81            [12] 3375 	mov	a,sp
      00095B 24 FC            [12] 3376 	add	a,#0xfc
      00095D F5 81            [12] 3377 	mov	sp,a
      00095F 90r00r00         [24] 3378 	mov	dptr,#_sPW_CENTER
      000962 E0               [24] 3379 	movx	a,@dptr
      000963 FA               [12] 3380 	mov	r2,a
      000964 A3               [24] 3381 	inc	dptr
      000965 E0               [24] 3382 	movx	a,@dptr
      000966 FB               [12] 3383 	mov	r3,a
      000967 8A 82            [24] 3384 	mov	dpl,r2
      000969 8B 83            [24] 3385 	mov	dph,r3
      00096B C0 07            [24] 3386 	push	ar7
      00096D C0 06            [24] 3387 	push	ar6
      00096F C0 05            [24] 3388 	push	ar5
      000971 C0 04            [24] 3389 	push	ar4
      000973 12r00r00         [24] 3390 	lcall	___uint2fs
      000976 A8 82            [24] 3391 	mov	r0,dpl
      000978 A9 83            [24] 3392 	mov	r1,dph
      00097A AA F0            [24] 3393 	mov	r2,b
      00097C FB               [12] 3394 	mov	r3,a
      00097D D0 04            [24] 3395 	pop	ar4
      00097F D0 05            [24] 3396 	pop	ar5
      000981 D0 06            [24] 3397 	pop	ar6
      000983 D0 07            [24] 3398 	pop	ar7
      000985 C0 04            [24] 3399 	push	ar4
      000987 C0 05            [24] 3400 	push	ar5
      000989 C0 06            [24] 3401 	push	ar6
      00098B C0 07            [24] 3402 	push	ar7
      00098D 88 82            [24] 3403 	mov	dpl,r0
      00098F 89 83            [24] 3404 	mov	dph,r1
      000991 8A F0            [24] 3405 	mov	b,r2
      000993 EB               [12] 3406 	mov	a,r3
      000994 12r00r00         [24] 3407 	lcall	___fssub
      000997 AC 82            [24] 3408 	mov	r4,dpl
      000999 AD 83            [24] 3409 	mov	r5,dph
      00099B AE F0            [24] 3410 	mov	r6,b
      00099D FF               [12] 3411 	mov	r7,a
      00099E E5 81            [12] 3412 	mov	a,sp
      0009A0 24 FC            [12] 3413 	add	a,#0xfc
      0009A2 F5 81            [12] 3414 	mov	sp,a
      0009A4 8C 82            [24] 3415 	mov	dpl,r4
      0009A6 8D 83            [24] 3416 	mov	dph,r5
      0009A8 8E F0            [24] 3417 	mov	b,r6
      0009AA EF               [12] 3418 	mov	a,r7
      0009AB 12r00r00         [24] 3419 	lcall	___fs2uint
      0009AE 85 82*16         [24] 3420 	mov	_sPW,dpl
      0009B1 85 83*17         [24] 3421 	mov	(_sPW + 1),dph
      0009B4 02r0Ar87         [24] 3422 	ljmp	00117$
      0009B7                       3423 00110$:
                           0009B7  3424 	C$lab3_3k.c$325$2$158 ==.
                                   3425 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:325: else if(dist > 45)
      0009B7 E5*1A            [12] 3426 	mov	a,_dist
      0009B9 24 D2            [12] 3427 	add	a,#0xff - 0x2d
      0009BB 40 03            [24] 3428 	jc	00141$
      0009BD 02r0Ar4F         [24] 3429 	ljmp	00107$
      0009C0                       3430 00141$:
                           0009C0  3431 	C$lab3_3k.c$326$2$158 ==.
                                   3432 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:326: sPW = 18.57*(dist - 45) + sPW_CENTER;
      0009C0 AE*1A            [24] 3433 	mov	r6,_dist
      0009C2 7F 00            [12] 3434 	mov	r7,#0x00
      0009C4 EE               [12] 3435 	mov	a,r6
      0009C5 24 D3            [12] 3436 	add	a,#0xd3
      0009C7 F5 82            [12] 3437 	mov	dpl,a
      0009C9 EF               [12] 3438 	mov	a,r7
      0009CA 34 FF            [12] 3439 	addc	a,#0xff
      0009CC F5 83            [12] 3440 	mov	dph,a
      0009CE 12r00r00         [24] 3441 	lcall	___sint2fs
      0009D1 AC 82            [24] 3442 	mov	r4,dpl
      0009D3 AD 83            [24] 3443 	mov	r5,dph
      0009D5 AE F0            [24] 3444 	mov	r6,b
      0009D7 FF               [12] 3445 	mov	r7,a
      0009D8 C0 04            [24] 3446 	push	ar4
      0009DA C0 05            [24] 3447 	push	ar5
      0009DC C0 06            [24] 3448 	push	ar6
      0009DE C0 07            [24] 3449 	push	ar7
      0009E0 90 8F 5C         [24] 3450 	mov	dptr,#0x8f5c
      0009E3 75 F0 94         [24] 3451 	mov	b,#0x94
      0009E6 74 41            [12] 3452 	mov	a,#0x41
      0009E8 12r00r00         [24] 3453 	lcall	___fsmul
      0009EB AC 82            [24] 3454 	mov	r4,dpl
      0009ED AD 83            [24] 3455 	mov	r5,dph
      0009EF AE F0            [24] 3456 	mov	r6,b
      0009F1 FF               [12] 3457 	mov	r7,a
      0009F2 E5 81            [12] 3458 	mov	a,sp
      0009F4 24 FC            [12] 3459 	add	a,#0xfc
      0009F6 F5 81            [12] 3460 	mov	sp,a
      0009F8 90r00r00         [24] 3461 	mov	dptr,#_sPW_CENTER
      0009FB E0               [24] 3462 	movx	a,@dptr
      0009FC FA               [12] 3463 	mov	r2,a
      0009FD A3               [24] 3464 	inc	dptr
      0009FE E0               [24] 3465 	movx	a,@dptr
      0009FF FB               [12] 3466 	mov	r3,a
      000A00 8A 82            [24] 3467 	mov	dpl,r2
      000A02 8B 83            [24] 3468 	mov	dph,r3
      000A04 C0 07            [24] 3469 	push	ar7
      000A06 C0 06            [24] 3470 	push	ar6
      000A08 C0 05            [24] 3471 	push	ar5
      000A0A C0 04            [24] 3472 	push	ar4
      000A0C 12r00r00         [24] 3473 	lcall	___uint2fs
      000A0F A8 82            [24] 3474 	mov	r0,dpl
      000A11 A9 83            [24] 3475 	mov	r1,dph
      000A13 AA F0            [24] 3476 	mov	r2,b
      000A15 FB               [12] 3477 	mov	r3,a
      000A16 D0 04            [24] 3478 	pop	ar4
      000A18 D0 05            [24] 3479 	pop	ar5
      000A1A D0 06            [24] 3480 	pop	ar6
      000A1C D0 07            [24] 3481 	pop	ar7
      000A1E C0 00            [24] 3482 	push	ar0
      000A20 C0 01            [24] 3483 	push	ar1
      000A22 C0 02            [24] 3484 	push	ar2
      000A24 C0 03            [24] 3485 	push	ar3
      000A26 8C 82            [24] 3486 	mov	dpl,r4
      000A28 8D 83            [24] 3487 	mov	dph,r5
      000A2A 8E F0            [24] 3488 	mov	b,r6
      000A2C EF               [12] 3489 	mov	a,r7
      000A2D 12r00r00         [24] 3490 	lcall	___fsadd
      000A30 AC 82            [24] 3491 	mov	r4,dpl
      000A32 AD 83            [24] 3492 	mov	r5,dph
      000A34 AE F0            [24] 3493 	mov	r6,b
      000A36 FF               [12] 3494 	mov	r7,a
      000A37 E5 81            [12] 3495 	mov	a,sp
      000A39 24 FC            [12] 3496 	add	a,#0xfc
      000A3B F5 81            [12] 3497 	mov	sp,a
      000A3D 8C 82            [24] 3498 	mov	dpl,r4
      000A3F 8D 83            [24] 3499 	mov	dph,r5
      000A41 8E F0            [24] 3500 	mov	b,r6
      000A43 EF               [12] 3501 	mov	a,r7
      000A44 12r00r00         [24] 3502 	lcall	___fs2uint
      000A47 85 82*16         [24] 3503 	mov	_sPW,dpl
      000A4A 85 83*17         [24] 3504 	mov	(_sPW + 1),dph
      000A4D 80 38            [24] 3505 	sjmp	00117$
      000A4F                       3506 00107$:
                           000A4F  3507 	C$lab3_3k.c$328$2$158 ==.
                                   3508 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:328: if(sPW > sPW_MAX)
      000A4F 90r00r04         [24] 3509 	mov	dptr,#_sPW_MAX
      000A52 E0               [24] 3510 	movx	a,@dptr
      000A53 FE               [12] 3511 	mov	r6,a
      000A54 A3               [24] 3512 	inc	dptr
      000A55 E0               [24] 3513 	movx	a,@dptr
      000A56 FF               [12] 3514 	mov	r7,a
      000A57 C3               [12] 3515 	clr	c
      000A58 EE               [12] 3516 	mov	a,r6
      000A59 95*16            [12] 3517 	subb	a,_sPW
      000A5B EF               [12] 3518 	mov	a,r7
      000A5C 95*17            [12] 3519 	subb	a,(_sPW + 1)
      000A5E 50 0C            [24] 3520 	jnc	00104$
                           000A60  3521 	C$lab3_3k.c$329$2$158 ==.
                                   3522 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:329: sPW = sPW_MAX;
      000A60 90r00r04         [24] 3523 	mov	dptr,#_sPW_MAX
      000A63 E0               [24] 3524 	movx	a,@dptr
      000A64 F5*16            [12] 3525 	mov	_sPW,a
      000A66 A3               [24] 3526 	inc	dptr
      000A67 E0               [24] 3527 	movx	a,@dptr
      000A68 F5*17            [12] 3528 	mov	(_sPW + 1),a
      000A6A 80 1B            [24] 3529 	sjmp	00117$
      000A6C                       3530 00104$:
                           000A6C  3531 	C$lab3_3k.c$330$2$158 ==.
                                   3532 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:330: else if(sPW < sPW_MIN)
      000A6C 90r00r02         [24] 3533 	mov	dptr,#_sPW_MIN
      000A6F E0               [24] 3534 	movx	a,@dptr
      000A70 FE               [12] 3535 	mov	r6,a
      000A71 A3               [24] 3536 	inc	dptr
      000A72 E0               [24] 3537 	movx	a,@dptr
      000A73 FF               [12] 3538 	mov	r7,a
      000A74 C3               [12] 3539 	clr	c
      000A75 E5*16            [12] 3540 	mov	a,_sPW
      000A77 9E               [12] 3541 	subb	a,r6
      000A78 E5*17            [12] 3542 	mov	a,(_sPW + 1)
      000A7A 9F               [12] 3543 	subb	a,r7
      000A7B 50 0A            [24] 3544 	jnc	00117$
                           000A7D  3545 	C$lab3_3k.c$331$2$158 ==.
                                   3546 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:331: sPW = sPW_MIN;
      000A7D 90r00r02         [24] 3547 	mov	dptr,#_sPW_MIN
      000A80 E0               [24] 3548 	movx	a,@dptr
      000A81 F5*16            [12] 3549 	mov	_sPW,a
      000A83 A3               [24] 3550 	inc	dptr
      000A84 E0               [24] 3551 	movx	a,@dptr
      000A85 F5*17            [12] 3552 	mov	(_sPW + 1),a
      000A87                       3553 00117$:
                           000A87  3554 	C$lab3_3k.c$333$1$157 ==.
                                   3555 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:333: printf("Overide is setted to %d \n", sPW - sPW_CENTER);
      000A87 90r00r00         [24] 3556 	mov	dptr,#_sPW_CENTER
      000A8A E0               [24] 3557 	movx	a,@dptr
      000A8B FE               [12] 3558 	mov	r6,a
      000A8C A3               [24] 3559 	inc	dptr
      000A8D E0               [24] 3560 	movx	a,@dptr
      000A8E FF               [12] 3561 	mov	r7,a
      000A8F E5*16            [12] 3562 	mov	a,_sPW
      000A91 C3               [12] 3563 	clr	c
      000A92 9E               [12] 3564 	subb	a,r6
      000A93 FE               [12] 3565 	mov	r6,a
      000A94 E5*17            [12] 3566 	mov	a,(_sPW + 1)
      000A96 9F               [12] 3567 	subb	a,r7
      000A97 FF               [12] 3568 	mov	r7,a
      000A98 C0 06            [24] 3569 	push	ar6
      000A9A C0 07            [24] 3570 	push	ar7
      000A9C 74r2F            [12] 3571 	mov	a,#___str_13
      000A9E C0 E0            [24] 3572 	push	acc
      000AA0 74s01            [12] 3573 	mov	a,#(___str_13 >> 8)
      000AA2 C0 E0            [24] 3574 	push	acc
      000AA4 74 80            [12] 3575 	mov	a,#0x80
      000AA6 C0 E0            [24] 3576 	push	acc
      000AA8 12r00r00         [24] 3577 	lcall	_printf
      000AAB E5 81            [12] 3578 	mov	a,sp
      000AAD 24 FB            [12] 3579 	add	a,#0xfb
      000AAF F5 81            [12] 3580 	mov	sp,a
                           000AB1  3581 	C$lab3_3k.c$334$1$157 ==.
                                   3582 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:334: PCA0CP0 = 0xFFFF - sPW;
      000AB1 74 FF            [12] 3583 	mov	a,#0xff
      000AB3 C3               [12] 3584 	clr	c
      000AB4 95*16            [12] 3585 	subb	a,_sPW
      000AB6 F5 EA            [12] 3586 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000AB8 74 FF            [12] 3587 	mov	a,#0xff
      000ABA 95*17            [12] 3588 	subb	a,(_sPW + 1)
      000ABC F5 FA            [12] 3589 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           000ABE  3590 	C$lab3_3k.c$335$1$157 ==.
                           000ABE  3591 	XG$Set_Overide$0$0 ==.
      000ABE 22               [24] 3592 	ret
                                   3593 ;------------------------------------------------------------
                                   3594 ;Allocation info for local variables in function 'Set_Speed'
                                   3595 ;------------------------------------------------------------
                                   3596 ;input                     Allocated to registers r7 
                                   3597 ;------------------------------------------------------------
                           000ABF  3598 	G$Set_Speed$0$0 ==.
                           000ABF  3599 	C$lab3_3k.c$336$1$157 ==.
                                   3600 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:336: void Set_Speed()
                                   3601 ;	-----------------------------------------
                                   3602 ;	 function Set_Speed
                                   3603 ;	-----------------------------------------
      000ABF                       3604 _Set_Speed:
                           000ABF  3605 	C$lab3_3k.c$340$1$159 ==.
                                   3606 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:340: input = getchar_nw();
      000ABF 12r00r67         [24] 3607 	lcall	_getchar_nw
      000AC2 AF 82            [24] 3608 	mov	r7,dpl
                           000AC4  3609 	C$lab3_3k.c$341$1$159 ==.
                                   3610 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:341: if(input == '+')  // single character input to increase the pulsewidth
      000AC4 BF 2B 28         [24] 3611 	cjne	r7,#0x2b,00108$
                           000AC7  3612 	C$lab3_3k.c$343$2$160 ==.
                                   3613 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:343: mPW += 50;
      000AC7 74 32            [12] 3614 	mov	a,#0x32
      000AC9 25*18            [12] 3615 	add	a,_mPW
      000ACB F5*18            [12] 3616 	mov	_mPW,a
      000ACD E4               [12] 3617 	clr	a
      000ACE 35*19            [12] 3618 	addc	a,(_mPW + 1)
      000AD0 F5*19            [12] 3619 	mov	(_mPW + 1),a
                           000AD2  3620 	C$lab3_3k.c$344$2$160 ==.
                                   3621 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:344: if(mPW > mPW_MAX)  // check if greater than pulsewidth maximum
      000AD2 90r00r0A         [24] 3622 	mov	dptr,#_mPW_MAX
      000AD5 E0               [24] 3623 	movx	a,@dptr
      000AD6 FD               [12] 3624 	mov	r5,a
      000AD7 A3               [24] 3625 	inc	dptr
      000AD8 E0               [24] 3626 	movx	a,@dptr
      000AD9 FE               [12] 3627 	mov	r6,a
      000ADA C3               [12] 3628 	clr	c
      000ADB ED               [12] 3629 	mov	a,r5
      000ADC 95*18            [12] 3630 	subb	a,_mPW
      000ADE EE               [12] 3631 	mov	a,r6
      000ADF 95*19            [12] 3632 	subb	a,(_mPW + 1)
      000AE1 50 36            [24] 3633 	jnc	00109$
                           000AE3  3634 	C$lab3_3k.c$345$2$160 ==.
                                   3635 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:345: mPW = mPW_MAX;    // set PW to the maximum value
      000AE3 90r00r0A         [24] 3636 	mov	dptr,#_mPW_MAX
      000AE6 E0               [24] 3637 	movx	a,@dptr
      000AE7 F5*18            [12] 3638 	mov	_mPW,a
      000AE9 A3               [24] 3639 	inc	dptr
      000AEA E0               [24] 3640 	movx	a,@dptr
      000AEB F5*19            [12] 3641 	mov	(_mPW + 1),a
      000AED 80 2A            [24] 3642 	sjmp	00109$
      000AEF                       3643 00108$:
                           000AEF  3644 	C$lab3_3k.c$347$1$159 ==.
                                   3645 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:347: else if(input == '-')  // single character input to decrease the pulsewidth
      000AEF BF 2D 27         [24] 3646 	cjne	r7,#0x2d,00109$
                           000AF2  3647 	C$lab3_3k.c$349$2$161 ==.
                                   3648 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:349: mPW -= 50;
      000AF2 E5*18            [12] 3649 	mov	a,_mPW
      000AF4 24 CE            [12] 3650 	add	a,#0xce
      000AF6 F5*18            [12] 3651 	mov	_mPW,a
      000AF8 E5*19            [12] 3652 	mov	a,(_mPW + 1)
      000AFA 34 FF            [12] 3653 	addc	a,#0xff
      000AFC F5*19            [12] 3654 	mov	(_mPW + 1),a
                           000AFE  3655 	C$lab3_3k.c$350$2$161 ==.
                                   3656 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:350: if(mPW < mPW_MIN)  // check if less than pulsewidth minimum
      000AFE 90r00r08         [24] 3657 	mov	dptr,#_mPW_MIN
      000B01 E0               [24] 3658 	movx	a,@dptr
      000B02 FE               [12] 3659 	mov	r6,a
      000B03 A3               [24] 3660 	inc	dptr
      000B04 E0               [24] 3661 	movx	a,@dptr
      000B05 FF               [12] 3662 	mov	r7,a
      000B06 C3               [12] 3663 	clr	c
      000B07 E5*18            [12] 3664 	mov	a,_mPW
      000B09 9E               [12] 3665 	subb	a,r6
      000B0A E5*19            [12] 3666 	mov	a,(_mPW + 1)
      000B0C 9F               [12] 3667 	subb	a,r7
      000B0D 50 0A            [24] 3668 	jnc	00109$
                           000B0F  3669 	C$lab3_3k.c$351$2$161 ==.
                                   3670 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:351: mPW = mPW_MIN;     // set PW to the minimum value
      000B0F 90r00r08         [24] 3671 	mov	dptr,#_mPW_MIN
      000B12 E0               [24] 3672 	movx	a,@dptr
      000B13 F5*18            [12] 3673 	mov	_mPW,a
      000B15 A3               [24] 3674 	inc	dptr
      000B16 E0               [24] 3675 	movx	a,@dptr
      000B17 F5*19            [12] 3676 	mov	(_mPW + 1),a
      000B19                       3677 00109$:
                           000B19  3678 	C$lab3_3k.c$353$1$159 ==.
                                   3679 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:353: printf("motor PW: %u\n", mPW);
      000B19 C0*18            [24] 3680 	push	_mPW
      000B1B C0*19            [24] 3681 	push	(_mPW + 1)
      000B1D 74r11            [12] 3682 	mov	a,#___str_11
      000B1F C0 E0            [24] 3683 	push	acc
      000B21 74s01            [12] 3684 	mov	a,#(___str_11 >> 8)
      000B23 C0 E0            [24] 3685 	push	acc
      000B25 74 80            [12] 3686 	mov	a,#0x80
      000B27 C0 E0            [24] 3687 	push	acc
      000B29 12r00r00         [24] 3688 	lcall	_printf
      000B2C E5 81            [12] 3689 	mov	a,sp
      000B2E 24 FB            [12] 3690 	add	a,#0xfb
      000B30 F5 81            [12] 3691 	mov	sp,a
                           000B32  3692 	C$lab3_3k.c$354$1$159 ==.
                                   3693 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:354: PCA0CP2 = 0xFFFF - mPW;
      000B32 74 FF            [12] 3694 	mov	a,#0xff
      000B34 C3               [12] 3695 	clr	c
      000B35 95*18            [12] 3696 	subb	a,_mPW
      000B37 F5 EC            [12] 3697 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      000B39 74 FF            [12] 3698 	mov	a,#0xff
      000B3B 95*19            [12] 3699 	subb	a,(_mPW + 1)
      000B3D F5 FC            [12] 3700 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           000B3F  3701 	C$lab3_3k.c$355$1$159 ==.
                           000B3F  3702 	XG$Set_Speed$0$0 ==.
      000B3F 22               [24] 3703 	ret
                                   3704 ;------------------------------------------------------------
                                   3705 ;Allocation info for local variables in function 'Set_Heading'
                                   3706 ;------------------------------------------------------------
                           000B40  3707 	G$Set_Heading$0$0 ==.
                           000B40  3708 	C$lab3_3k.c$357$1$159 ==.
                                   3709 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:357: void Set_Heading()
                                   3710 ;	-----------------------------------------
                                   3711 ;	 function Set_Heading
                                   3712 ;	-----------------------------------------
      000B40                       3713 _Set_Heading:
                           000B40  3714 	C$lab3_3k.c$359$1$162 ==.
                                   3715 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:359: error = desired_heading - heading;
      000B40 E5*29            [12] 3716 	mov	a,_desired_heading
      000B42 C3               [12] 3717 	clr	c
      000B43 95*25            [12] 3718 	subb	a,_heading
      000B45 F5*2B            [12] 3719 	mov	_error,a
      000B47 E5*2A            [12] 3720 	mov	a,(_desired_heading + 1)
      000B49 95*26            [12] 3721 	subb	a,(_heading + 1)
      000B4B F5*2C            [12] 3722 	mov	(_error + 1),a
                           000B4D  3723 	C$lab3_3k.c$360$1$162 ==.
                                   3724 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:360: if(error >= 1800)
      000B4D C3               [12] 3725 	clr	c
      000B4E E5*2B            [12] 3726 	mov	a,_error
      000B50 94 08            [12] 3727 	subb	a,#0x08
      000B52 E5*2C            [12] 3728 	mov	a,(_error + 1)
      000B54 64 80            [12] 3729 	xrl	a,#0x80
      000B56 94 87            [12] 3730 	subb	a,#0x87
      000B58 40 0F            [24] 3731 	jc	00112$
                           000B5A  3732 	C$lab3_3k.c$361$1$162 ==.
                                   3733 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:361: error -= 3600;
      000B5A E5*2B            [12] 3734 	mov	a,_error
      000B5C 24 F0            [12] 3735 	add	a,#0xf0
      000B5E F5*2B            [12] 3736 	mov	_error,a
      000B60 E5*2C            [12] 3737 	mov	a,(_error + 1)
      000B62 34 F1            [12] 3738 	addc	a,#0xf1
      000B64 F5*2C            [12] 3739 	mov	(_error + 1),a
      000B66 02r0BrEE         [24] 3740 	ljmp	00113$
      000B69                       3741 00112$:
                           000B69  3742 	C$lab3_3k.c$362$1$162 ==.
                                   3743 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:362: else if(error <= -1800)
      000B69 C3               [12] 3744 	clr	c
      000B6A 74 F8            [12] 3745 	mov	a,#0xf8
      000B6C 95*2B            [12] 3746 	subb	a,_error
      000B6E 74 78            [12] 3747 	mov	a,#(0xf8 ^ 0x80)
      000B70 85*2C F0         [24] 3748 	mov	b,(_error + 1)
      000B73 63 F0 80         [24] 3749 	xrl	b,#0x80
      000B76 95 F0            [12] 3750 	subb	a,b
      000B78 40 0E            [24] 3751 	jc	00109$
                           000B7A  3752 	C$lab3_3k.c$363$1$162 ==.
                                   3753 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:363: error += 3600;
      000B7A 74 10            [12] 3754 	mov	a,#0x10
      000B7C 25*2B            [12] 3755 	add	a,_error
      000B7E F5*2B            [12] 3756 	mov	_error,a
      000B80 74 0E            [12] 3757 	mov	a,#0x0e
      000B82 35*2C            [12] 3758 	addc	a,(_error + 1)
      000B84 F5*2C            [12] 3759 	mov	(_error + 1),a
      000B86 80 66            [24] 3760 	sjmp	00113$
      000B88                       3761 00109$:
                           000B88  3762 	C$lab3_3k.c$364$1$162 ==.
                                   3763 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:364: else if(error <= 1850 && error >= 1800)
      000B88 C3               [12] 3764 	clr	c
      000B89 74 3A            [12] 3765 	mov	a,#0x3a
      000B8B 95*2B            [12] 3766 	subb	a,_error
      000B8D 74 87            [12] 3767 	mov	a,#(0x07 ^ 0x80)
      000B8F 85*2C F0         [24] 3768 	mov	b,(_error + 1)
      000B92 63 F0 80         [24] 3769 	xrl	b,#0x80
      000B95 95 F0            [12] 3770 	subb	a,b
      000B97 40 23            [24] 3771 	jc	00105$
      000B99 E5*2B            [12] 3772 	mov	a,_error
      000B9B 94 08            [12] 3773 	subb	a,#0x08
      000B9D E5*2C            [12] 3774 	mov	a,(_error + 1)
      000B9F 64 80            [12] 3775 	xrl	a,#0x80
      000BA1 94 87            [12] 3776 	subb	a,#0x87
      000BA3 40 17            [24] 3777 	jc	00105$
                           000BA5  3778 	C$lab3_3k.c$365$1$162 ==.
                                   3779 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:365: printf("Just back up \n");
      000BA5 74r49            [12] 3780 	mov	a,#___str_14
      000BA7 C0 E0            [24] 3781 	push	acc
      000BA9 74s01            [12] 3782 	mov	a,#(___str_14 >> 8)
      000BAB C0 E0            [24] 3783 	push	acc
      000BAD 74 80            [12] 3784 	mov	a,#0x80
      000BAF C0 E0            [24] 3785 	push	acc
      000BB1 12r00r00         [24] 3786 	lcall	_printf
      000BB4 15 81            [12] 3787 	dec	sp
      000BB6 15 81            [12] 3788 	dec	sp
      000BB8 15 81            [12] 3789 	dec	sp
      000BBA 80 32            [24] 3790 	sjmp	00113$
      000BBC                       3791 00105$:
                           000BBC  3792 	C$lab3_3k.c$366$1$162 ==.
                                   3793 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:366: else if(error <= -1800 && error >= -1850)
      000BBC C3               [12] 3794 	clr	c
      000BBD 74 F8            [12] 3795 	mov	a,#0xf8
      000BBF 95*2B            [12] 3796 	subb	a,_error
      000BC1 74 78            [12] 3797 	mov	a,#(0xf8 ^ 0x80)
      000BC3 85*2C F0         [24] 3798 	mov	b,(_error + 1)
      000BC6 63 F0 80         [24] 3799 	xrl	b,#0x80
      000BC9 95 F0            [12] 3800 	subb	a,b
      000BCB 40 21            [24] 3801 	jc	00113$
      000BCD E5*2B            [12] 3802 	mov	a,_error
      000BCF 94 C6            [12] 3803 	subb	a,#0xc6
      000BD1 E5*2C            [12] 3804 	mov	a,(_error + 1)
      000BD3 64 80            [12] 3805 	xrl	a,#0x80
      000BD5 94 78            [12] 3806 	subb	a,#0x78
      000BD7 40 15            [24] 3807 	jc	00113$
                           000BD9  3808 	C$lab3_3k.c$367$1$162 ==.
                                   3809 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:367: printf("Just back up \n");
      000BD9 74r49            [12] 3810 	mov	a,#___str_14
      000BDB C0 E0            [24] 3811 	push	acc
      000BDD 74s01            [12] 3812 	mov	a,#(___str_14 >> 8)
      000BDF C0 E0            [24] 3813 	push	acc
      000BE1 74 80            [12] 3814 	mov	a,#0x80
      000BE3 C0 E0            [24] 3815 	push	acc
      000BE5 12r00r00         [24] 3816 	lcall	_printf
      000BE8 15 81            [12] 3817 	dec	sp
      000BEA 15 81            [12] 3818 	dec	sp
      000BEC 15 81            [12] 3819 	dec	sp
      000BEE                       3820 00113$:
                           000BEE  3821 	C$lab3_3k.c$368$1$162 ==.
                                   3822 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:368: if(error > 50)//should turn right
      000BEE C3               [12] 3823 	clr	c
      000BEF 74 32            [12] 3824 	mov	a,#0x32
      000BF1 95*2B            [12] 3825 	subb	a,_error
      000BF3 74 80            [12] 3826 	mov	a,#(0x00 ^ 0x80)
      000BF5 85*2C F0         [24] 3827 	mov	b,(_error + 1)
      000BF8 63 F0 80         [24] 3828 	xrl	b,#0x80
      000BFB 95 F0            [12] 3829 	subb	a,b
      000BFD 40 03            [24] 3830 	jc	00162$
      000BFF 02r0Cr9F         [24] 3831 	ljmp	00118$
      000C02                       3832 00162$:
                           000C02  3833 	C$lab3_3k.c$370$1$162 ==.
                                   3834 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:370: sPW = 0.416667*error + sPW_CENTER;
      000C02 85*2B 82         [24] 3835 	mov	dpl,_error
      000C05 85*2C 83         [24] 3836 	mov	dph,(_error + 1)
      000C08 12r00r00         [24] 3837 	lcall	___sint2fs
      000C0B AC 82            [24] 3838 	mov	r4,dpl
      000C0D AD 83            [24] 3839 	mov	r5,dph
      000C0F AE F0            [24] 3840 	mov	r6,b
      000C11 FF               [12] 3841 	mov	r7,a
      000C12 C0 04            [24] 3842 	push	ar4
      000C14 C0 05            [24] 3843 	push	ar5
      000C16 C0 06            [24] 3844 	push	ar6
      000C18 C0 07            [24] 3845 	push	ar7
      000C1A 90 55 61         [24] 3846 	mov	dptr,#0x5561
      000C1D 75 F0 D5         [24] 3847 	mov	b,#0xd5
      000C20 74 3E            [12] 3848 	mov	a,#0x3e
      000C22 12r00r00         [24] 3849 	lcall	___fsmul
      000C25 AC 82            [24] 3850 	mov	r4,dpl
      000C27 AD 83            [24] 3851 	mov	r5,dph
      000C29 AE F0            [24] 3852 	mov	r6,b
      000C2B FF               [12] 3853 	mov	r7,a
      000C2C E5 81            [12] 3854 	mov	a,sp
      000C2E 24 FC            [12] 3855 	add	a,#0xfc
      000C30 F5 81            [12] 3856 	mov	sp,a
      000C32 90r00r00         [24] 3857 	mov	dptr,#_sPW_CENTER
      000C35 E0               [24] 3858 	movx	a,@dptr
      000C36 FA               [12] 3859 	mov	r2,a
      000C37 A3               [24] 3860 	inc	dptr
      000C38 E0               [24] 3861 	movx	a,@dptr
      000C39 FB               [12] 3862 	mov	r3,a
      000C3A 8A 82            [24] 3863 	mov	dpl,r2
      000C3C 8B 83            [24] 3864 	mov	dph,r3
      000C3E C0 07            [24] 3865 	push	ar7
      000C40 C0 06            [24] 3866 	push	ar6
      000C42 C0 05            [24] 3867 	push	ar5
      000C44 C0 04            [24] 3868 	push	ar4
      000C46 12r00r00         [24] 3869 	lcall	___uint2fs
      000C49 A8 82            [24] 3870 	mov	r0,dpl
      000C4B A9 83            [24] 3871 	mov	r1,dph
      000C4D AA F0            [24] 3872 	mov	r2,b
      000C4F FB               [12] 3873 	mov	r3,a
      000C50 D0 04            [24] 3874 	pop	ar4
      000C52 D0 05            [24] 3875 	pop	ar5
      000C54 D0 06            [24] 3876 	pop	ar6
      000C56 D0 07            [24] 3877 	pop	ar7
      000C58 C0 00            [24] 3878 	push	ar0
      000C5A C0 01            [24] 3879 	push	ar1
      000C5C C0 02            [24] 3880 	push	ar2
      000C5E C0 03            [24] 3881 	push	ar3
      000C60 8C 82            [24] 3882 	mov	dpl,r4
      000C62 8D 83            [24] 3883 	mov	dph,r5
      000C64 8E F0            [24] 3884 	mov	b,r6
      000C66 EF               [12] 3885 	mov	a,r7
      000C67 12r00r00         [24] 3886 	lcall	___fsadd
      000C6A AC 82            [24] 3887 	mov	r4,dpl
      000C6C AD 83            [24] 3888 	mov	r5,dph
      000C6E AE F0            [24] 3889 	mov	r6,b
      000C70 FF               [12] 3890 	mov	r7,a
      000C71 E5 81            [12] 3891 	mov	a,sp
      000C73 24 FC            [12] 3892 	add	a,#0xfc
      000C75 F5 81            [12] 3893 	mov	sp,a
      000C77 8C 82            [24] 3894 	mov	dpl,r4
      000C79 8D 83            [24] 3895 	mov	dph,r5
      000C7B 8E F0            [24] 3896 	mov	b,r6
      000C7D EF               [12] 3897 	mov	a,r7
      000C7E 12r00r00         [24] 3898 	lcall	___fs2uint
      000C81 85 82*16         [24] 3899 	mov	_sPW,dpl
      000C84 85 83*17         [24] 3900 	mov	(_sPW + 1),dph
                           000C87  3901 	C$lab3_3k.c$371$2$163 ==.
                                   3902 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:371: printf("--------> \r\n");
      000C87 74r58            [12] 3903 	mov	a,#___str_15
      000C89 C0 E0            [24] 3904 	push	acc
      000C8B 74s01            [12] 3905 	mov	a,#(___str_15 >> 8)
      000C8D C0 E0            [24] 3906 	push	acc
      000C8F 74 80            [12] 3907 	mov	a,#0x80
      000C91 C0 E0            [24] 3908 	push	acc
      000C93 12r00r00         [24] 3909 	lcall	_printf
      000C96 15 81            [12] 3910 	dec	sp
      000C98 15 81            [12] 3911 	dec	sp
      000C9A 15 81            [12] 3912 	dec	sp
      000C9C 02r0Dr60         [24] 3913 	ljmp	00119$
      000C9F                       3914 00118$:
                           000C9F  3915 	C$lab3_3k.c$373$1$162 ==.
                                   3916 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:373: else if(error < -50)//should turn left
      000C9F C3               [12] 3917 	clr	c
      000CA0 E5*2B            [12] 3918 	mov	a,_error
      000CA2 94 CE            [12] 3919 	subb	a,#0xce
      000CA4 E5*2C            [12] 3920 	mov	a,(_error + 1)
      000CA6 64 80            [12] 3921 	xrl	a,#0x80
      000CA8 94 7F            [12] 3922 	subb	a,#0x7f
      000CAA 40 03            [24] 3923 	jc	00163$
      000CAC 02r0Dr4B         [24] 3924 	ljmp	00115$
      000CAF                       3925 00163$:
                           000CAF  3926 	C$lab3_3k.c$375$1$162 ==.
                                   3927 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:375: sPW = sPW_CENTER + 0.416667*error;
      000CAF 85*2B 82         [24] 3928 	mov	dpl,_error
      000CB2 85*2C 83         [24] 3929 	mov	dph,(_error + 1)
      000CB5 12r00r00         [24] 3930 	lcall	___sint2fs
      000CB8 AC 82            [24] 3931 	mov	r4,dpl
      000CBA AD 83            [24] 3932 	mov	r5,dph
      000CBC AE F0            [24] 3933 	mov	r6,b
      000CBE FF               [12] 3934 	mov	r7,a
      000CBF C0 04            [24] 3935 	push	ar4
      000CC1 C0 05            [24] 3936 	push	ar5
      000CC3 C0 06            [24] 3937 	push	ar6
      000CC5 C0 07            [24] 3938 	push	ar7
      000CC7 90 55 61         [24] 3939 	mov	dptr,#0x5561
      000CCA 75 F0 D5         [24] 3940 	mov	b,#0xd5
      000CCD 74 3E            [12] 3941 	mov	a,#0x3e
      000CCF 12r00r00         [24] 3942 	lcall	___fsmul
      000CD2 AC 82            [24] 3943 	mov	r4,dpl
      000CD4 AD 83            [24] 3944 	mov	r5,dph
      000CD6 AE F0            [24] 3945 	mov	r6,b
      000CD8 FF               [12] 3946 	mov	r7,a
      000CD9 E5 81            [12] 3947 	mov	a,sp
      000CDB 24 FC            [12] 3948 	add	a,#0xfc
      000CDD F5 81            [12] 3949 	mov	sp,a
      000CDF 90r00r00         [24] 3950 	mov	dptr,#_sPW_CENTER
      000CE2 E0               [24] 3951 	movx	a,@dptr
      000CE3 FA               [12] 3952 	mov	r2,a
      000CE4 A3               [24] 3953 	inc	dptr
      000CE5 E0               [24] 3954 	movx	a,@dptr
      000CE6 FB               [12] 3955 	mov	r3,a
      000CE7 8A 82            [24] 3956 	mov	dpl,r2
      000CE9 8B 83            [24] 3957 	mov	dph,r3
      000CEB C0 07            [24] 3958 	push	ar7
      000CED C0 06            [24] 3959 	push	ar6
      000CEF C0 05            [24] 3960 	push	ar5
      000CF1 C0 04            [24] 3961 	push	ar4
      000CF3 12r00r00         [24] 3962 	lcall	___uint2fs
      000CF6 A8 82            [24] 3963 	mov	r0,dpl
      000CF8 A9 83            [24] 3964 	mov	r1,dph
      000CFA AA F0            [24] 3965 	mov	r2,b
      000CFC FB               [12] 3966 	mov	r3,a
      000CFD D0 04            [24] 3967 	pop	ar4
      000CFF D0 05            [24] 3968 	pop	ar5
      000D01 D0 06            [24] 3969 	pop	ar6
      000D03 D0 07            [24] 3970 	pop	ar7
      000D05 C0 04            [24] 3971 	push	ar4
      000D07 C0 05            [24] 3972 	push	ar5
      000D09 C0 06            [24] 3973 	push	ar6
      000D0B C0 07            [24] 3974 	push	ar7
      000D0D 88 82            [24] 3975 	mov	dpl,r0
      000D0F 89 83            [24] 3976 	mov	dph,r1
      000D11 8A F0            [24] 3977 	mov	b,r2
      000D13 EB               [12] 3978 	mov	a,r3
      000D14 12r00r00         [24] 3979 	lcall	___fsadd
      000D17 AC 82            [24] 3980 	mov	r4,dpl
      000D19 AD 83            [24] 3981 	mov	r5,dph
      000D1B AE F0            [24] 3982 	mov	r6,b
      000D1D FF               [12] 3983 	mov	r7,a
      000D1E E5 81            [12] 3984 	mov	a,sp
      000D20 24 FC            [12] 3985 	add	a,#0xfc
      000D22 F5 81            [12] 3986 	mov	sp,a
      000D24 8C 82            [24] 3987 	mov	dpl,r4
      000D26 8D 83            [24] 3988 	mov	dph,r5
      000D28 8E F0            [24] 3989 	mov	b,r6
      000D2A EF               [12] 3990 	mov	a,r7
      000D2B 12r00r00         [24] 3991 	lcall	___fs2uint
      000D2E 85 82*16         [24] 3992 	mov	_sPW,dpl
      000D31 85 83*17         [24] 3993 	mov	(_sPW + 1),dph
                           000D34  3994 	C$lab3_3k.c$376$2$164 ==.
                                   3995 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:376: printf("<-------- \r\n");
      000D34 74r65            [12] 3996 	mov	a,#___str_16
      000D36 C0 E0            [24] 3997 	push	acc
      000D38 74s01            [12] 3998 	mov	a,#(___str_16 >> 8)
      000D3A C0 E0            [24] 3999 	push	acc
      000D3C 74 80            [12] 4000 	mov	a,#0x80
      000D3E C0 E0            [24] 4001 	push	acc
      000D40 12r00r00         [24] 4002 	lcall	_printf
      000D43 15 81            [12] 4003 	dec	sp
      000D45 15 81            [12] 4004 	dec	sp
      000D47 15 81            [12] 4005 	dec	sp
      000D49 80 15            [24] 4006 	sjmp	00119$
      000D4B                       4007 00115$:
                           000D4B  4008 	C$lab3_3k.c$379$1$162 ==.
                                   4009 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:379: printf("  --  \r\n");
      000D4B 74r72            [12] 4010 	mov	a,#___str_17
      000D4D C0 E0            [24] 4011 	push	acc
      000D4F 74s01            [12] 4012 	mov	a,#(___str_17 >> 8)
      000D51 C0 E0            [24] 4013 	push	acc
      000D53 74 80            [12] 4014 	mov	a,#0x80
      000D55 C0 E0            [24] 4015 	push	acc
      000D57 12r00r00         [24] 4016 	lcall	_printf
      000D5A 15 81            [12] 4017 	dec	sp
      000D5C 15 81            [12] 4018 	dec	sp
      000D5E 15 81            [12] 4019 	dec	sp
      000D60                       4020 00119$:
                           000D60  4021 	C$lab3_3k.c$381$1$162 ==.
                                   4022 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:381: if(sPW > sPW_MAX)
      000D60 90r00r04         [24] 4023 	mov	dptr,#_sPW_MAX
      000D63 E0               [24] 4024 	movx	a,@dptr
      000D64 FE               [12] 4025 	mov	r6,a
      000D65 A3               [24] 4026 	inc	dptr
      000D66 E0               [24] 4027 	movx	a,@dptr
      000D67 FF               [12] 4028 	mov	r7,a
      000D68 C3               [12] 4029 	clr	c
      000D69 EE               [12] 4030 	mov	a,r6
      000D6A 95*16            [12] 4031 	subb	a,_sPW
      000D6C EF               [12] 4032 	mov	a,r7
      000D6D 95*17            [12] 4033 	subb	a,(_sPW + 1)
      000D6F 50 0A            [24] 4034 	jnc	00121$
                           000D71  4035 	C$lab3_3k.c$382$1$162 ==.
                                   4036 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:382: sPW = sPW_MAX;
      000D71 90r00r04         [24] 4037 	mov	dptr,#_sPW_MAX
      000D74 E0               [24] 4038 	movx	a,@dptr
      000D75 F5*16            [12] 4039 	mov	_sPW,a
      000D77 A3               [24] 4040 	inc	dptr
      000D78 E0               [24] 4041 	movx	a,@dptr
      000D79 F5*17            [12] 4042 	mov	(_sPW + 1),a
      000D7B                       4043 00121$:
                           000D7B  4044 	C$lab3_3k.c$383$1$162 ==.
                                   4045 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:383: if(sPW < sPW_MIN)
      000D7B 90r00r02         [24] 4046 	mov	dptr,#_sPW_MIN
      000D7E E0               [24] 4047 	movx	a,@dptr
      000D7F FE               [12] 4048 	mov	r6,a
      000D80 A3               [24] 4049 	inc	dptr
      000D81 E0               [24] 4050 	movx	a,@dptr
      000D82 FF               [12] 4051 	mov	r7,a
      000D83 C3               [12] 4052 	clr	c
      000D84 E5*16            [12] 4053 	mov	a,_sPW
      000D86 9E               [12] 4054 	subb	a,r6
      000D87 E5*17            [12] 4055 	mov	a,(_sPW + 1)
      000D89 9F               [12] 4056 	subb	a,r7
      000D8A 50 0A            [24] 4057 	jnc	00123$
                           000D8C  4058 	C$lab3_3k.c$384$1$162 ==.
                                   4059 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:384: sPW = sPW_MIN;
      000D8C 90r00r02         [24] 4060 	mov	dptr,#_sPW_MIN
      000D8F E0               [24] 4061 	movx	a,@dptr
      000D90 F5*16            [12] 4062 	mov	_sPW,a
      000D92 A3               [24] 4063 	inc	dptr
      000D93 E0               [24] 4064 	movx	a,@dptr
      000D94 F5*17            [12] 4065 	mov	(_sPW + 1),a
      000D96                       4066 00123$:
                           000D96  4067 	C$lab3_3k.c$386$1$162 ==.
                                   4068 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:386: printf("Stering error is %d \n",error);
      000D96 C0*2B            [24] 4069 	push	_error
      000D98 C0*2C            [24] 4070 	push	(_error + 1)
      000D9A 74r7B            [12] 4071 	mov	a,#___str_18
      000D9C C0 E0            [24] 4072 	push	acc
      000D9E 74s01            [12] 4073 	mov	a,#(___str_18 >> 8)
      000DA0 C0 E0            [24] 4074 	push	acc
      000DA2 74 80            [12] 4075 	mov	a,#0x80
      000DA4 C0 E0            [24] 4076 	push	acc
      000DA6 12r00r00         [24] 4077 	lcall	_printf
      000DA9 E5 81            [12] 4078 	mov	a,sp
      000DAB 24 FB            [12] 4079 	add	a,#0xfb
      000DAD F5 81            [12] 4080 	mov	sp,a
                           000DAF  4081 	C$lab3_3k.c$387$1$162 ==.
                                   4082 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:387: printf("Stering is set to %u \n", sPW);
      000DAF C0*16            [24] 4083 	push	_sPW
      000DB1 C0*17            [24] 4084 	push	(_sPW + 1)
      000DB3 74r91            [12] 4085 	mov	a,#___str_19
      000DB5 C0 E0            [24] 4086 	push	acc
      000DB7 74s01            [12] 4087 	mov	a,#(___str_19 >> 8)
      000DB9 C0 E0            [24] 4088 	push	acc
      000DBB 74 80            [12] 4089 	mov	a,#0x80
      000DBD C0 E0            [24] 4090 	push	acc
      000DBF 12r00r00         [24] 4091 	lcall	_printf
      000DC2 E5 81            [12] 4092 	mov	a,sp
      000DC4 24 FB            [12] 4093 	add	a,#0xfb
      000DC6 F5 81            [12] 4094 	mov	sp,a
                           000DC8  4095 	C$lab3_3k.c$388$1$162 ==.
                                   4096 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:388: PCA0CP0 = 0xFFFF - sPW;
      000DC8 74 FF            [12] 4097 	mov	a,#0xff
      000DCA C3               [12] 4098 	clr	c
      000DCB 95*16            [12] 4099 	subb	a,_sPW
      000DCD F5 EA            [12] 4100 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000DCF 74 FF            [12] 4101 	mov	a,#0xff
      000DD1 95*17            [12] 4102 	subb	a,(_sPW + 1)
      000DD3 F5 FA            [12] 4103 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           000DD5  4104 	C$lab3_3k.c$389$1$162 ==.
                           000DD5  4105 	XG$Set_Heading$0$0 ==.
      000DD5 22               [24] 4106 	ret
                                   4107 ;------------------------------------------------------------
                                   4108 ;Allocation info for local variables in function 'ReadRanger'
                                   4109 ;------------------------------------------------------------
                           000DD6  4110 	G$ReadRanger$0$0 ==.
                           000DD6  4111 	C$lab3_3k.c$393$1$162 ==.
                                   4112 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:393: unsigned int ReadRanger()
                                   4113 ;	-----------------------------------------
                                   4114 ;	 function ReadRanger
                                   4115 ;	-----------------------------------------
      000DD6                       4116 _ReadRanger:
                           000DD6  4117 	C$lab3_3k.c$396$1$165 ==.
                                   4118 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:396: i2c_read_data(r_addr,2,r_Data,2);
      000DD6 75*10r1B         [24] 4119 	mov	_i2c_read_data_PARM_3,#_r_Data
      000DD9 75*11 00         [24] 4120 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000DDC 75*12 40         [24] 4121 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000DDF 75*0F 02         [24] 4122 	mov	_i2c_read_data_PARM_2,#0x02
      000DE2 75*13 02         [24] 4123 	mov	_i2c_read_data_PARM_4,#0x02
      000DE5 85*1F 82         [24] 4124 	mov	dpl,_r_addr
      000DE8 12r04r06         [24] 4125 	lcall	_i2c_read_data
                           000DEB  4126 	C$lab3_3k.c$398$1$165 ==.
                                   4127 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:398: range = ((r_Data[0] << 8) | r_Data[1]);
      000DEB AF*1B            [24] 4128 	mov	r7,_r_Data
      000DED 7E 00            [12] 4129 	mov	r6,#0x00
      000DEF AC*1C            [24] 4130 	mov	r4,(_r_Data + 0x0001)
      000DF1 7D 00            [12] 4131 	mov	r5,#0x00
      000DF3 EC               [12] 4132 	mov	a,r4
      000DF4 4E               [12] 4133 	orl	a,r6
      000DF5 F5*1D            [12] 4134 	mov	_range,a
      000DF7 ED               [12] 4135 	mov	a,r5
      000DF8 4F               [12] 4136 	orl	a,r7
      000DF9 F5*1E            [12] 4137 	mov	(_range + 1),a
                           000DFB  4138 	C$lab3_3k.c$399$1$165 ==.
                                   4139 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:399: return range;
      000DFB 85*1D 82         [24] 4140 	mov	dpl,_range
      000DFE 85*1E 83         [24] 4141 	mov	dph,(_range + 1)
                           000E01  4142 	C$lab3_3k.c$401$1$165 ==.
                           000E01  4143 	XG$ReadRanger$0$0 ==.
      000E01 22               [24] 4144 	ret
                                   4145 ;------------------------------------------------------------
                                   4146 ;Allocation info for local variables in function 'ReadCompass'
                                   4147 ;------------------------------------------------------------
                           000E02  4148 	G$ReadCompass$0$0 ==.
                           000E02  4149 	C$lab3_3k.c$403$1$165 ==.
                                   4150 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:403: unsigned int ReadCompass()
                                   4151 ;	-----------------------------------------
                                   4152 ;	 function ReadCompass
                                   4153 ;	-----------------------------------------
      000E02                       4154 _ReadCompass:
                           000E02  4155 	C$lab3_3k.c$405$1$166 ==.
                                   4156 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:405: i2c_read_data(c_addr,2,c_Data,2);
      000E02 75*10r23         [24] 4157 	mov	_i2c_read_data_PARM_3,#_c_Data
      000E05 75*11 00         [24] 4158 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000E08 75*12 40         [24] 4159 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000E0B 75*0F 02         [24] 4160 	mov	_i2c_read_data_PARM_2,#0x02
      000E0E 75*13 02         [24] 4161 	mov	_i2c_read_data_PARM_4,#0x02
      000E11 85*22 82         [24] 4162 	mov	dpl,_c_addr
      000E14 12r04r06         [24] 4163 	lcall	_i2c_read_data
                           000E17  4164 	C$lab3_3k.c$406$1$166 ==.
                                   4165 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:406: heading = ((c_Data[0] << 8) | c_Data[1]); 
      000E17 AF*23            [24] 4166 	mov	r7,_c_Data
      000E19 7E 00            [12] 4167 	mov	r6,#0x00
      000E1B AC*24            [24] 4168 	mov	r4,(_c_Data + 0x0001)
      000E1D 7D 00            [12] 4169 	mov	r5,#0x00
      000E1F EC               [12] 4170 	mov	a,r4
      000E20 4E               [12] 4171 	orl	a,r6
      000E21 F5*25            [12] 4172 	mov	_heading,a
      000E23 ED               [12] 4173 	mov	a,r5
      000E24 4F               [12] 4174 	orl	a,r7
      000E25 F5*26            [12] 4175 	mov	(_heading + 1),a
                           000E27  4176 	C$lab3_3k.c$407$1$166 ==.
                                   4177 ;	C:\Users\Tim\Documents\LITEC\Lab4\lab3-3k.c:407: return heading;
      000E27 85*25 82         [24] 4178 	mov	dpl,_heading
      000E2A 85*26 83         [24] 4179 	mov	dph,(_heading + 1)
                           000E2D  4180 	C$lab3_3k.c$408$1$166 ==.
                           000E2D  4181 	XG$ReadCompass$0$0 ==.
      000E2D 22               [24] 4182 	ret
                                   4183 	.area CSEG    (CODE)
                                   4184 	.area CONST   (CODE)
                           000000  4185 Flab3_3k$__str_0$0$0 == .
      000000                       4186 ___str_0:
      000000 0A                    4187 	.db 0x0a
      000001 54 79 70 65 20 64 69  4188 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    4189 	.db 0x00
                           000016  4190 Flab3_3k$__str_1$0$0 == .
      000016                       4191 ___str_1:
      000016 20 20 20 20 20 25 63  4192 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    4193 	.db 0x00
                           000026  4194 Flab3_3k$__str_2$0$0 == .
      000026                       4195 ___str_2:
      000026 25 63                 4196 	.ascii "%c"
      000028 00                    4197 	.db 0x00
                           000029  4198 Flab3_3k$__str_3$0$0 == .
      000029                       4199 ___str_3:
      000029 45 6D 62 65 64 64 65  4200 	.ascii "Embedded Control Pulsewidth Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 50 75 6C 73
             65 77 69 64 74 68 20
             43 61 6C 69 62 72 61
             74 69 6F 6E
      000050 0D                    4201 	.db 0x0d
      000051 0A                    4202 	.db 0x0a
      000052 00                    4203 	.db 0x00
                           000053  4204 Flab3_3k$__str_4$0$0 == .
      000053                       4205 ___str_4:
      000053 53 74 65 65 72 69 6E  4206 	.ascii "Steering Calibration finished. %u "
             67 20 43 61 6C 69 62
             72 61 74 69 6F 6E 20
             66 69 6E 69 73 68 65
             64 2E 20 25 75 20
      000075 0D                    4207 	.db 0x0d
      000076 0A                    4208 	.db 0x0a
      000077 00                    4209 	.db 0x00
                           000078  4210 Flab3_3k$__str_5$0$0 == .
      000078                       4211 ___str_5:
      000078 4D 6F 74 6F 72 20 43  4212 	.ascii "Motor Calibration finished. %u "
             61 6C 69 62 72 61 74
             69 6F 6E 20 66 69 6E
             69 73 68 65 64 2E 20
             25 75 20
      000097 0D                    4213 	.db 0x0d
      000098 0A                    4214 	.db 0x0a
      000099 00                    4215 	.db 0x00
                           00009A  4216 Flab3_3k$__str_6$0$0 == .
      00009A                       4217 ___str_6:
      00009A 43 61 6C 69 62 72 61  4218 	.ascii "Calibration:"
             74 69 6F 6E 3A
      0000A6 0A                    4219 	.db 0x0a
      0000A7 48 65 6C 6C 6F 20 77  4220 	.ascii "Hello world!"
             6F 72 6C 64 21
      0000B3 0A                    4221 	.db 0x0a
      0000B4 00                    4222 	.db 0x00
                           0000B5  4223 Flab3_3k$__str_7$0$0 == .
      0000B5                       4224 ___str_7:
      0000B5 64 69 73 74 61 6E 63  4225 	.ascii "distance is %u "
             65 20 69 73 20 25 75
             20
      0000C4 0D                    4226 	.db 0x0d
      0000C5 0A                    4227 	.db 0x0a
      0000C6 00                    4228 	.db 0x00
                           0000C7  4229 Flab3_3k$__str_8$0$0 == .
      0000C7                       4230 ___str_8:
      0000C7 68 65 61 64 69 6E 67  4231 	.ascii "heading towards %u "
             20 74 6F 77 61 72 64
             73 20 25 75 20
      0000DA 0A                    4232 	.db 0x0a
      0000DB 00                    4233 	.db 0x00
                           0000DC  4234 Flab3_3k$__str_9$0$0 == .
      0000DC                       4235 ___str_9:
      0000DC 0A                    4236 	.db 0x0a
      0000DD 0D                    4237 	.db 0x0d
      0000DE 48 65 61 64 69 6E 67  4238 	.ascii "Heading %u,"
             20 25 75 2C
      0000E9 0A                    4239 	.db 0x0a
      0000EA 0D                    4240 	.db 0x0d
      0000EB 20 52 65 61 64 69 6E  4241 	.ascii " Reading %u"
             67 20 25 75
      0000F6 00                    4242 	.db 0x00
                           0000F7  4243 Flab3_3k$__str_10$0$0 == .
      0000F7                       4244 ___str_10:
      0000F7 0A                    4245 	.db 0x0a
      0000F8 0D                    4246 	.db 0x0d
      0000F9 48 65 61 64 69 6E 67  4247 	.ascii "Heading %u,"
             20 25 75 2C
      000104 0A                    4248 	.db 0x0a
      000105 0D                    4249 	.db 0x0d
      000106 20 72 61 6E 67 65 72  4250 	.ascii " ranger %u"
             20 25 75
      000110 00                    4251 	.db 0x00
                           000111  4252 Flab3_3k$__str_11$0$0 == .
      000111                       4253 ___str_11:
      000111 6D 6F 74 6F 72 20 50  4254 	.ascii "motor PW: %u"
             57 3A 20 25 75
      00011D 0A                    4255 	.db 0x0a
      00011E 00                    4256 	.db 0x00
                           00011F  4257 Flab3_3k$__str_12$0$0 == .
      00011F                       4258 ___str_12:
      00011F 73 74 65 72 69 6E 67  4259 	.ascii "stering PW: %u"
             20 50 57 3A 20 25 75
      00012D 0A                    4260 	.db 0x0a
      00012E 00                    4261 	.db 0x00
                           00012F  4262 Flab3_3k$__str_13$0$0 == .
      00012F                       4263 ___str_13:
      00012F 4F 76 65 72 69 64 65  4264 	.ascii "Overide is setted to %d "
             20 69 73 20 73 65 74
             74 65 64 20 74 6F 20
             25 64 20
      000147 0A                    4265 	.db 0x0a
      000148 00                    4266 	.db 0x00
                           000149  4267 Flab3_3k$__str_14$0$0 == .
      000149                       4268 ___str_14:
      000149 4A 75 73 74 20 62 61  4269 	.ascii "Just back up "
             63 6B 20 75 70 20
      000156 0A                    4270 	.db 0x0a
      000157 00                    4271 	.db 0x00
                           000158  4272 Flab3_3k$__str_15$0$0 == .
      000158                       4273 ___str_15:
      000158 2D 2D 2D 2D 2D 2D 2D  4274 	.ascii "--------> "
             2D 3E 20
      000162 0D                    4275 	.db 0x0d
      000163 0A                    4276 	.db 0x0a
      000164 00                    4277 	.db 0x00
                           000165  4278 Flab3_3k$__str_16$0$0 == .
      000165                       4279 ___str_16:
      000165 3C 2D 2D 2D 2D 2D 2D  4280 	.ascii "<-------- "
             2D 2D 20
      00016F 0D                    4281 	.db 0x0d
      000170 0A                    4282 	.db 0x0a
      000171 00                    4283 	.db 0x00
                           000172  4284 Flab3_3k$__str_17$0$0 == .
      000172                       4285 ___str_17:
      000172 20 20 2D 2D 20 20     4286 	.ascii "  --  "
      000178 0D                    4287 	.db 0x0d
      000179 0A                    4288 	.db 0x0a
      00017A 00                    4289 	.db 0x00
                           00017B  4290 Flab3_3k$__str_18$0$0 == .
      00017B                       4291 ___str_18:
      00017B 53 74 65 72 69 6E 67  4292 	.ascii "Stering error is %d "
             20 65 72 72 6F 72 20
             69 73 20 25 64 20
      00018F 0A                    4293 	.db 0x0a
      000190 00                    4294 	.db 0x00
                           000191  4295 Flab3_3k$__str_19$0$0 == .
      000191                       4296 ___str_19:
      000191 53 74 65 72 69 6E 67  4297 	.ascii "Stering is set to %u "
             20 69 73 20 73 65 74
             20 74 6F 20 25 75 20
      0001A6 0A                    4298 	.db 0x0a
      0001A7 00                    4299 	.db 0x00
                                   4300 	.area XINIT   (CODE)
                           000000  4301 Flab3_3k$__xinit_sPW_CENTER$0$0 == .
      000000                       4302 __xinit__sPW_CENTER:
      000000 5F 0A                 4303 	.byte #0x5f,#0x0a	; 2655
                           000002  4304 Flab3_3k$__xinit_sPW_MIN$0$0 == .
      000002                       4305 __xinit__sPW_MIN:
      000002 D5 07                 4306 	.byte #0xd5,#0x07	; 2005
                           000004  4307 Flab3_3k$__xinit_sPW_MAX$0$0 == .
      000004                       4308 __xinit__sPW_MAX:
      000004 E9 0C                 4309 	.byte #0xe9,#0x0c	; 3305
                           000006  4310 Flab3_3k$__xinit_mPW_CENTER$0$0 == .
      000006                       4311 __xinit__mPW_CENTER:
      000006 CD 0A                 4312 	.byte #0xcd,#0x0a	; 2765
                           000008  4313 Flab3_3k$__xinit_mPW_MIN$0$0 == .
      000008                       4314 __xinit__mPW_MIN:
      000008 EB 07                 4315 	.byte #0xeb,#0x07	; 2027
                           00000A  4316 Flab3_3k$__xinit_mPW_MAX$0$0 == .
      00000A                       4317 __xinit__mPW_MAX:
      00000A AE 0D                 4318 	.byte #0xae,#0x0d	; 3502
                                   4319 	.area CABS    (ABS,CODE)
