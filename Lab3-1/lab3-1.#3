/*
    Names:
    Section & Side:
    Date:
    File name:
    Program description:

*/


/* Sample code for Lab 3.1. This code provides a basic start. */
#include <c8051_SDCC.h>
#include <stdio.h>
#include <stdlib.h>


#define pw_min 1844               // set limits for the pulsewidth
#define pw_max 35020
//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Port_Init(void);
void PCA_Init (void);
void XBR0_Init();
void Set_Pulsewidth(void);
void PCA_ISR ( void ) __interrupt 9;

//-----------------------------------------------------------------------------
// Global Variables
//-----------------------------------------------------------------------------
unsigned int PW_CENTER = 18432;
unsigned int PW_MIN = 1844;
unsigned int PW_MAX = 35020;
unsigned int PW;
  
unsigned int PCA_start = 10000;   // start count for PCA

//-----------------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------------
void main(void)
{
    // initialize board
    Sys_Init();
    putchar(' '); //the quotes in this line may not format correctly
    Port_Init();
    XBR0_Init();
    PCA_Init();

    //print beginning message
    printf("Embedded Control Pulsewidth Calibration\n");
    // set the PCA output to a neutral setting
    //__________________________________________
    //__________________________________________
    PW = PW_CENTER;
    //__________________________________________
    //__________________________________________
    while(1)
        Set_Pulsewidth();
}

//-----------------------------------------------------------------------------
// Port_Init
//-----------------------------------------------------------------------------
//
// Set up ports for input and output
//
void Port_Init()
{
    P1MDOUT |= 0x0D;  //set output pin for CEX0, CEX2, CEX3
}

//-----------------------------------------------------------------------------
// XBR0_Init
//-----------------------------------------------------------------------------
//
// Set up the crossbar
//
void XBR0_Init()
{
    XBR0 = 0x27;  //configure crossbar as directed in the laboratory

}

//-----------------------------------------------------------------------------
// PCA_Init
//-----------------------------------------------------------------------------
//
// Set up Programmable Counter Array
//
void PCA_Init(void)
{
    // reference to the sample code in Example 4.5 -Pulse Width Modulation 
    // implemented using the PCA (Programmable Counter Array), p. 50 in Lab Manual.
    PCA0MD &= 0xF1; // SYSCLK/12
    PCA0MD |= 0x01; // Turn on PCA0 Counter
    PCA0MD0 = PCA0MD2 = PCA0MD3 = 0xC2; //16 bit with Comparator on and PWN enabled
    PCA0CN = 0x40; //enable PCA0 counter
    EIE1 |= 0x08;  //enable PCA interrupt
    EA = 1;        //enable GLobal Interrupt  
}

//-----------------------------------------------------------------------------
// PCA_ISR
//-----------------------------------------------------------------------------
//
// Interrupt Service Routine for Programmable Counter Array Overflow Interrupt
//
void PCA_ISR ( void ) __interrupt 9
{
    // reference to the sample code in Example 4.5 -Pulse Width Modulation 
    // implemented using the PCA (Programmable Counter Array), p. 50 in Lab Manual.
    if (CF)
    {
        PCA0 = PCA_start;       // start count
//      PCA0L = PCA_start;      // low byte of start count
//      PCA0H = PCA_start >> 8; // high byte of start count
        CF = 0;                 // Very important - clear interrupt flag
    }
    else PCA0CN &= 0xC0;        // all other type 9 interrupts
}

void Set_Pulsewidth()
{
    char input;
    //wait for a key to be pressed
    input = getchar();
    if(input == '+')  // single character input to increase the pulsewidth
    {
        if (PW < pw_max) 
        {
            PW += 1000;
            PCA0CP1 = 65536 - PW;  // change pulse width
        }
        // ___________________________
        // ___________________________
        if(PW > pw_max)  // check if greater than pulsewidth maximum
        {    
            PW = PW_MAX;    // set PW to the maximum value
        }
    }
    else if(input == '-')  // single character input to decrease the pulsewidth
    {
        // ___________________________
        // ___________________________
        if(PW > pw_min)
        {
            PW -= 1000;
            PCA0CP1 = 65536 - PW;  // change pulse width

        } 
        if(PW < pw_min)
        {  // check if less than pulsewidth minimum
            PW = PW_MIN;     // set PW to the minimum value
        }
    }
    printf("PW: %u\n", PW);
    PCA0CP1 = 0xFFFF - PW;

}
